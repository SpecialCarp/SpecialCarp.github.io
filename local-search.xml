<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 主题</title>
    <link href="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>Hexo 主题</h1><blockquote><p>本文编写时间为 ，可能存在过期内容，仅供参考。最新数据请访问 <a href="https://hexo.io/zh-cn/docs/themes">官方文档</a>。</p></blockquote><span id="more"></span><h2 id="更换主题">更换主题</h2><p><strong>查找主题：</strong></p><ol><li><a href="https://hexo.io/themes/">官网</a></li><li>在 <a href="https://github.com/search?q=hexo-theme&amp;type=repositories">Github</a> 上搜索 <code>hexo-theme</code></li><li>在 <a href="https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=hexo-theme">Gitee</a> 上搜索 <code>hexo-theme</code></li></ol><p><strong>推荐主题：</strong> <a href="https://github.com/fluid-dev/hexo-theme-fluid"><strong>fluid</strong></a> ，预览主题： <a href="https://hexo.fluid-dev.com/">Fluid’s blog</a>。介绍就不介绍了。</p><p>以 fluid 为例，更换主题。</p><h3 id="下载主题">下载主题</h3><p><strong>方式一：</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>这种方式下载的主题会放到 <code>node_modules/hexo-theme-fluid</code> ，且在 <code>package.json</code> 中确定版本 <code> &quot;hexo-theme-fluid&quot;: &quot;^1.9.5-a&quot;</code> ，如果你要修改主题的配置信息，则不建议直接在 <code>node_modules/hexo-theme-fluid/_config.yml</code> 中修改，需要在项目的根目录下创建 <code>_config.fluid.yml</code>，将 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">主题的配置文件</a> 复制过去，然后进行修改。</p><p><strong>方式二：</strong></p><p>在<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">Releases</a>页面下载主题压缩包，或者直接下载源码，解压然后改名为 <code>fluid</code> 放到项目的 <code>theme</code> 目录中。</p><p>这种方式可以直接在主题的配置文件中修改，但是还是建议将配置文件复制到根目录下，然后重命名为 <code>_config.fluid.yml</code>。</p><blockquote><p>配置文件项的加载优先级 <code>_config.fluid.yml</code> &gt; <code>theme/fluid/_config.yml</code> &gt; <code>_config.yml</code> ，越是默认项，优先级就越低。</p><p>主题的配置文件格式是 <code>_config.&lt;主题名&gt;.yml</code>。</p></blockquote><h3 id="切换主题">切换主题</h3><p>在根目录的 <code>_config.yml</code> 中修改配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>修改 <code>scaffolds/page.md</code>：</p><p>主要是添加一个 <code>type</code> 属性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br><span class="hljs-section">type: &#123;&#123; title &#125;&#125;</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><p>创建其他页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page categories <span class="hljs-comment"># 分类</span><br>hexo new page tags <span class="hljs-comment"># 标签</span><br>hexo new page about <span class="hljs-comment"># 关于</span><br></code></pre></td></tr></table></figure><p>分类和标签页不用动，主题会自动收集统计文章的文档属性(Front-matter)，然后展示；关于页面请自行编写。</p><p>然后执行以下命令，查看主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 清楚缓存</span><br>hexo g <span class="hljs-comment"># 生成静态文件</span><br>hexo s <span class="hljs-comment"># 启动本地服务</span><br></code></pre></td></tr></table></figure><h2 id="主题推荐">主题推荐</h2><h3 id="Fluid">Fluid</h3><blockquote><p>页面干净简单，UI 还好看，不是全部文字的排版，也不是全部在秀特效的那种，非常中庸的一个主题。</p></blockquote><p><a href="https://hexo.fluid-dev.com/"><strong>页面展示</strong></a>：</p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153301387.png" alt="fluid 主页大屏"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153333482.png" alt="fluid 主页文章"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153402826.png" alt="fluid 归档页面"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153427608.png" alt="fluid 分类页面"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153458942.png" alt="fluid 标签页面"></p><h4 id="使用主题">使用主题</h4><p><a href="#%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98">往上看</a></p><h4 id="主题纯净化">主题纯净化</h4><ol><li>去除控制台输出：例如使用VScode打开主题文件夹，检索主题文件夹下的 <code>hexo.log.info</code> 和 <code>console.log</code>。</li><li>页脚第一行文字的 HTML：注释或修改<code>_config.fluid.yml</code> 中的 <code>footer.content</code>。</li><li>友链：<code>_config.fluid.yml</code> 中的 <code>link</code>。</li><li>网站图标：<code>_config.fluid.yml</code> 中的 <code>favicon</code> 和 <code>apple_touch_icon</code>。</li></ol><p>可以在 <code>source</code> 下创建 <code>assets</code> 文件夹，将所有的跟网站相关的资源文件放到这里，在 hexo 编译时，会把这个文件夹放到输出文件夹的根目录下，例如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── source<br>  └── assets<br>    └── <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>      ├── <span class="hljs-keyword">banner.jpg</span><br><span class="hljs-keyword"></span>      └── logo.ico<br></code></pre></td></tr></table></figure><p>你就可以在主题配置文件中配置：<code>favicon: /assets/blog/logo.ico</code>。</p><p>执行 <code>hexo g</code> 之后，目录结构如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── public<br>  └── assets<br>    └── <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>      ├── <span class="hljs-keyword">banner.jpg</span><br><span class="hljs-keyword"></span>      └── logo.ico<br></code></pre></td></tr></table></figure><h4 id="主题配置">主题配置</h4><p>配置文件中都有注释，这里不详细解释，我只说一下我的修改了的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 遵循访客浏览器&quot;请勿追踪&quot;的设置，如果开启则不统计其访问</span><br>  <span class="hljs-attr">follow_dnt:</span> <span class="hljs-literal">false</span><br>  <br><span class="hljs-comment"># 导航栏的相关配置\</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示\</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;SpecialCarp&quot;</span><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">7</span><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-attr">menu:</span><br>  <span class="hljs-comment"># ...</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/links/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner1.jpg</span><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.7</span><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;目标推动技术发展&quot;</span><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner1.jpg</span><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/assets/image/index1.jpg</span><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY-NC&#x27;</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">SpecialCarp/SpecialCarp.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner2.jpg</span><br><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner3.jpg</span><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner4.jpg</span><br><br><span class="hljs-attr">links:</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><h4 id="添加评论插件">添加评论插件</h4><ol><li><p>在你的博客仓库安装 <a href="https://github.com/apps/utterances">utterances</a>。<br><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119164655588.png" alt="utterances 应用安装"><br><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119165223184.png" alt="选择安装的仓库"><br>输入确认密码，或使用移动端github验证。</p></li><li><p>修改 <code>_config.fluid.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br>    <span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">SpecialCarp/SpecialCarp.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br></code></pre></td></tr></table></figure><p>配置文件中有两个 <code>comments</code> 的配置项，一个文章页，一个友链页，注意看好。</p></li></ol><p>这是效果：</p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119170404974.png" alt="utterances 评论插件效果"></p><p>没有登录github不允许评论。</p><h2 id="创建主题">创建主题</h2><blockquote><p>可能这辈子都不会去学这个了，闲的蛋疼再说。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 部署 GitHub Pages</title>
    <link href="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/"/>
    <url>/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/</url>
    
    <content type="html"><![CDATA[<h1>Hexo 部署 GitHub Pages</h1><blockquote><p>本文编写时间为 2023-11-15，可能存在过期内容，仅供参考。最新数据请访问 [官方文档][<a href="https://hexo.io/zh-cn/docs/github-pages">https://hexo.io/zh-cn/docs/github-pages</a>]。</p></blockquote><p>**注意：**下面的所有 <code>speicalcarp</code> 都需要替换成你的 GitHub 用户名。</p><span id="more"></span><h2 id="GitHub-Pages">GitHub Pages</h2><blockquote><p><a href="https://docs.github.com/en/pages">GitHub Pages</a> 是 GitHub 提供的免费托管服务，允许用户在其平台上创建和发布静态网站。你可以使用 GitHub Pages 托管个人博客、项目文档、简历等静态网页内容。</p></blockquote><p><strong>创建 GitHub 仓库</strong></p><p>在 GitHub 上创建一个<a href="https://github.com/new">新的仓库</a>，仓库的名称应该是 <code>username.github.io</code>，其中 <code>username</code> 是你的 GitHub 用户名。</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231115143503669.png" alt="GitHub Pages 仓库创建"></p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119121649750.png" alt="SpecialCarp.github.io 仓库"></p><p>其中，主分支是 <code>main</code>，项目地址是 <code>https://github.com/SpecialCarp/SpecialCarp.github.io.git</code> 。</p><h2 id="hexo-deployer-git">hexo-deployer-git</h2><p>下载 git 部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改项目根目录下的 <code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/SpecialCarp/SpecialCarp.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h2 id="部署到远端仓库">部署到远端仓库</h2><p><strong>清理缓存</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p><strong>生成静态文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p><strong>部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dexo d<br></code></pre></td></tr></table></figure><p>如果是初次部署，会出现需要登录的提示：</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119122803276.png" alt="git发送github登录界面"> <img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119122849907.png" alt="界面中文翻译"></p><p>命令行输出 <code>INFO  Deploy done: git</code> 即为部署成功，github 仓库如下：</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119123224737.png" alt="image-20231119123224737"></p><p>访问 <code>https://specialcarp.github.io/</code> ，即可进入博客。</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119123551370.png" alt="博客界面"></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>top.specialcarp</category>
      
      <category>blog</category>
      
      <category>hexo</category>
      
      <category>github.com</category>
      
      <category>specialcarp.github.io</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>github pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo指令</title>
    <link href="/2023/11/15/hexo%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/15/hexo%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1>Hexo指令</h1><blockquote><p>本文编写时间为 2023-11-15，可能存在过期内容，仅供参考。最新数据请访问 [官方文档][<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a>]。</p></blockquote><span id="more"></span><h2 id="初始化项目（init）">初始化项目（init）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><h2 id="新建文章（new）">新建文章（new）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code>（布局）的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><p>Hexo 提供了三种常见的布局：</p><ol><li><strong>post：</strong> 用于普通的博客文章。</li><li><strong>page：</strong> 用于创建页面，例如关于页面、联系页面等。</li><li><strong>draft：</strong> 用于创建草稿，这些文章默认不会被生成到站点中，直到你将其发布。</li></ol><p>除了这些默认的布局，你还可以根据自己的需要创建自定义的布局。在 Hexo 中，布局是存储在 <code>source/_layouts</code> 目录下的文件。例如，如果你创建了一个自定义布局叫做 <code>mylayout</code>，你就可以使用以下命令创建一个使用该布局的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new mylayout <span class="hljs-string">&quot;Custom Layout Article&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--path</code></td><td style="text-align:left">自定义新文章的路径</td></tr><tr><td style="text-align:left"><code>-r</code>, <code>--replace</code></td><td style="text-align:left">如果存在同名文章，将其替换</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--slug</code></td><td style="text-align:left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page --path about/me<br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="生成静态文件（generate）">生成静态文件（generate）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>在根目录下的 <code>public</code> 文件夹中生成静态文件。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-d</code>, <code>--deploy</code></td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left"><code>-w</code>, <code>--watch</code></td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left"><code>-b</code>, <code>--bail</code></td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left"><code>-f</code>, <code>--force</code></td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left"><code>-c</code>, <code>--concurrency</code></td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h2 id="发表草稿（publish）">发表草稿（publish）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>将草稿（draft）发布为正式的文章。草稿是一种特殊的文章状态，它们默认不会被生成到最终的网站文件中，直到你明确地发布它们。这个命令可以将指定的草稿发布，并更新其状态为已发布。</p><ul><li><code>layout</code>：可选参数，表示文章的布局，可以是 <code>post</code>、<code>page</code> 或者其他自定义布局。如果不指定，默认是 <code>post</code>。</li><li><code>filename</code>：要发布的草稿文件的文件名（不包括扩展名），它通常位于 <code>source/_drafts</code> 目录中。</li></ul><p>请注意，<code>hexo publish</code> 命令并不是必需的，你也可以手动将草稿移动到 <code>source/_posts</code> 目录并更新其 Front Matter 来达到相同的效果。这个命令只是为了方便和自动化这个过程。</p><h2 id="启动服务器（server）">启动服务器（server）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>启动本地服务器以预览生成的静态网站的命令。执行这个命令后，Hexo 将启动一个本地服务器，你可以通过浏览器访问这个服务器地址来查看你的博客。</p><p>默认情况下，Hexo 会在 <code>localhost:4000</code> 上启动服务器。你可以通过浏览器访问 <code>http://localhost:4000</code> 来查看你的博客。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--port</code></td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--static</code></td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left"><code>-l</code>, <code>--log</code></td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>如果你希望在文件发生变化时自动刷新页面，可以使用 <code>--watch</code> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server --watch<br></code></pre></td></tr></table></figure><p>这会在文件变化时重新生成网站，并刷新浏览器页面。</p><h2 id="部署网站（deploy）">部署网站（deploy）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>将生成的静态网站部署到远程服务器的命令。部署的具体方式取决于你在 Hexo 的配置文件 <code>_config.yml</code> 中设置的部署配置。</p><p>在执行这个命令之前，你需要确保你已经通过 <code>hexo generate</code> 生成了静态文件。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-g</code>, <code>--generate</code></td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>在 Hexo 的配置文件（通常是 <code>_config.yml</code>）中，你需要配置你的部署信息。以下是一个示例配置，使用 Git 部署到 GitHub Pages：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository-url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><ul><li><code>type</code>: 部署类型，可以是 <code>git</code>、<code>heroku</code>、<code>rsync</code> 等，具体取决于你的部署方式。</li><li><code>repo</code>: 远程仓库的 URL。</li><li><code>branch</code>: 分支，默认是 <code>master</code>。</li></ul><p>如果你使用 GitHub Pages，通常配置中的 <code>repo</code> 部分会类似于 <code>https://github.com/username/username.github.io.git</code>。</p><p>在配置好部署信息后，执行 <code>hexo deploy</code> 就会根据配置将生成的静态文件推送到远程服务器上。</p><p>请注意，不同的部署方式可能需要不同的配置。如果你使用的是其他部署方式，例如 FTP、SFTP、OSS 等，你需要根据相应的配置进行设置。</p><h2 id="渲染文件（render）">渲染文件（render）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染指定的文件。这个命令通常用于查看特定文件的渲染效果，而不必生成整个博客。</p><p>其中 <code>&lt;file1&gt;</code>, <code>[file2]</code>, … 是你要渲染的文件路径。这可以是 Markdown 文件、HTML 文件等。执行这个命令后，Hexo 会使用配置中指定的渲染引擎对这些文件进行渲染，并输出到终端中。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-o</code>, <code>--output</code></td><td style="text-align:left">设置输出路径</td></tr></tbody></table><p>请注意，这个命令在实际使用中可能会因为 Hexo 版本的不同而有所变化。如果你使用的是较新的版本，可以通过 <code>hexo help render</code> 命令来查看详细的帮助信息。帮助信息会列出可用的选项和参数。</p><p>一般情况下，对于调试和查看渲染效果，你可能更倾向于使用 <code>hexo server</code> 命令来启动本地服务器，以便于在浏览器中查看博客的实际渲染效果。</p><h2 id="迁移（migrate）">迁移（migrate）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo migrate &lt;<span class="hljs-built_in">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="清除缓存（clean）">清除缓存（clean）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>清除生成的缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)，以便重新生成静态网站时始终从干净的状态开始。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="列出网站数据（list）">列出网站数据（list）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo list &lt;<span class="hljs-built_in">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出指定类型的资源。 <code>&lt;type&gt;</code> 参数表示你要列出的资源的类型。根据 Hexo 版本和插件的不同，可用的 <code>&lt;type&gt;</code> 类型可能会有所不同。</p><p>在 Hexo 的文档或帮助信息中，一般会提供对 <code>hexo list</code> 命令支持的资源类型的描述。</p><ul><li><strong>post：</strong> 列出所有博客文章。</li><li><strong>page：</strong> 列出所有页面。</li><li><strong>route：</strong> 列出所有路由。</li><li><strong>tag：</strong> 列出所有标签。</li><li><strong>category：</strong> 列出所有分类。</li></ul><p>你可以使用 <code>hexo help list</code> 命令来查看详细的帮助信息，以获取特定 Hexo 版本支持的资源类型列表。</p><h2 id="显示-Hexo-版本（version）">显示 Hexo 版本（version）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo version<br><span class="hljs-comment"># OR 简写为</span><br>hexo -v<br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="列出网站的配置（config）">列出网站的配置（config）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo config [key] [value]<br></code></pre></td></tr></table></figure><p>列出网站的配置（<code>_config.yml</code>）。如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</p><p>请注意，通过这种方式设置的配置项值只在当前会话中有效，重启 Hexo 后将失效。如果你想永久修改配置，应该直接编辑 Hexo 项目根目录下的 <code>_config.yml</code> 文件。</p><h2 id="选项">选项</h2><h3 id="安全模式">安全模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --safe<br></code></pre></td></tr></table></figure><p>在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式">调试模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --debug<br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式">简洁模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --silent<br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径">自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 custom.yml 代替默认的 _config.yml</span><br>hexo server --config custom.yml<br><br><span class="hljs-comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br>hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 custom.yml 代替默认的 _config.yml</span><br>hexo server --config custom.yml<br><br><span class="hljs-comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br>hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿">显示草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --draft<br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD">自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --cwd /path/to/cwd<br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>nodejs</category>
      
      <category>hexo</category>
      
      <category>文档</category>
      
      <category>指令</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建静态博客</title>
    <link href="/2023/11/14/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/14/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1>Hexo搭建静态博客</h1><blockquote><p>本文编写时间为 2023-11-14，hexo: 6.3.0，hexo-cli: 4.3.1，可能存在过期内容，仅供参考。最新数据请访问 [官方文档][<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>]。</p></blockquote><span id="more"></span><h2 id="环境要求">环境要求</h2><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h2 id="安装-Hexo">安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="新建项目">新建项目</h2><p>安装 Hexo-cli 完成后，请执行下列命令，Hexo 将会在指定文件夹中创建所需要的文件。<code>&lt;folder&gt;</code> 就是你项目的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，项目文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs te">.<br>├── _config.yml     -- 配置文件<br>├── package.json    -- 依赖信息<br>├── scaffolds       -- 模板<br>├── source          -- 源文件<br>|   ├── _drafts       -- 文章<br>|   └── _posts        -- 草稿<br>└── themes-- 主题<br></code></pre></td></tr></table></figure><p>本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在项目根目录下执行以下命令</span><br><span class="hljs-comment"># 启动本地服务</span><br>hexo server<br></code></pre></td></tr></table></figure><p>此时，访问 <code>http://localhost:4000/</code> 即可，当前项目只有一篇自带的 hello-world 文章，其文件在项目的<code>source\_posts</code> 目录下，在命令行工具中 <code>Ctrl + C</code> 即可停止项目。</p><p>如果启动失败请删除 <code>node_moudle</code> 目录，然后在项目根目录下执行 <code>npm install</code> 命令重新下载依赖。</p><h3 id="hexo-简单命令">hexo 简单命令</h3><p><strong>新建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><p><strong>新建文章</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new &lt;title&gt;<br></code></pre></td></tr></table></figure><p>Hexo 会根据 <code>scaffolds</code> 目录下的模板 <code>post.md</code> ，在 <code>source\_posts</code> 目录下生成一个 <code>&lt;title&gt;.md</code> 文件。</p><p><strong>生成静态文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br><span class="hljs-comment"># OR 简写为</span><br>hexo g<br></code></pre></td></tr></table></figure><p>Hexo 会根据 <code>_config.yml</code> 的配置，在根目录 <code>public</code> 下生成静态网站文件，通过部署 nginx、github pages、gitee pages 或其他服务器上，即可通过网络访问。</p><p><strong>启动本地服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br><span class="hljs-comment"># OR 简写为</span><br>hexo s<br></code></pre></td></tr></table></figure><p>Hexo 会在本地的 <code>4000</code> 端口开启一个服务，用于调试和本地查看。</p><p><strong>清除已生成的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="引用外部资源文件">引用外部资源文件</h2><blockquote><p>标准的 markdown 语法 <code>![]()</code> 在 hexo 编译静态文件时，会导致文件路径不对，<a href="https://hexo.io/zh-cn/docs/asset-folders">hexo 官方</a>提供了模板语法 <code>&#123;% asset_path slug [title] %&#125;</code> ，这样会导致正常的笔记和项目中的文件出现两种引用，既然是基于 markdown 的博客项目，那么一切都要以正常的 markdown 语法为主。</p><p>官方提供了一个新的选择：<code>hexo-renderer-marked</code> ，但是不好用，它需要你将所有的资源文件放到一个资源文件夹下。</p></blockquote><p>修改根目录下的 <code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><code>post_asset_folder: true</code>: 这个配置项是 Hexo 中用于开启或关闭文章资产文件夹功能。当设置为 <code>true</code> 时，Hexo 会在每篇文章对应的文件夹中创建一个与文章同名的资源文件夹，用于存放与该篇文章相关的资源文件（如图片、附件等）。</li><li><code>marked</code>: 这个配置项是与 Markdown 渲染相关的配置。<ul><li><code>prependRoot: true</code>: 当设置为 <code>true</code> 时，它会将相对路径的图片链接转换为以站点根目录开头的绝对路径。这样设置后，在生成的页面中，图片的链接将从站点根目录开始。</li><li><code>postAsset: true</code>: 当设置为 <code>true</code> 时，允许在文章中使用相对路径引用位于文章资产文件夹中的资源文件。也就是说，当您在文章中引用图片等资源时，可以使用相对路径，资源文件将会被正确引用和显示。</li></ul></li></ul><h3 id="hexo-asset-image">hexo-asset-image</h3><blockquote><p>这个插件在开启 <code>post_asset_folder: true</code> 的情况下，默认你的资源文件夹是文章同目录下的同名文件夹，在执行 <code>hexo g</code> 之后，hexo 会把资源文件夹下的文件全部复制到生成后的文章目录下。</p>  <figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">└── <span class="hljs-keyword">source</span><br>  └── _posts<br>    ├── hexo<br>    │ └── <span class="hljs-keyword">filename</span>.jpg<br>    └── hexo.md<br></code></pre></td></tr></table></figure>  <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">└── <span class="hljs-keyword">public</span><br>  └── <span class="hljs-number">2023</span><br>    └── <span class="hljs-number">9</span><br>      └── <span class="hljs-number">5</span><br>        └── hexo<br>          ├── filename.jpg<br>          └── <span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><p>这个插件会修改你生成后的文章（ <code>index.html</code>）中的 <code>&lt;img&gt;</code>的 src 属性。</p></blockquote><p><code>hexo-asset-image</code> 则会根据你在笔记中的引入路径去编译相应的资源文件路径。</p><p>下载插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-asset-image<br></code></pre></td></tr></table></figure><p>修改 <code>node_modules/hexo-asset-image/index.js</code> 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">post_asset_folder</span>) &#123;<br>    <span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br>    <span class="hljs-keyword">if</span> (version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>      <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br>      <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>)) &#123;<br>          <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>          <span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>            !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>            <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>            <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>            <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">if</span> (srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>              srcArray.<span class="hljs-title function_">shift</span>();<br>            src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span> + config.<span class="hljs-property">root</span> + link + src);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.<span class="hljs-title function_">html</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这个插件只是在 hexo 规则的基础上，对图片的引用做出相应的配合，但是我的编写习惯是：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tcl">└── <span class="hljs-keyword">source</span><br>  └── _posts<br>    └── hexo<br>      ├── assets<br>      │ └── <span class="hljs-keyword">filename</span>.jpg<br>      └── hexo.md<br></code></pre></td></tr></table></figure><p>我使用的是 Typora 作为笔记的编写工具，不想它作为博客的时候，需要改变，我希望它可以编译成下面得到这种情况：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">└── <span class="hljs-keyword">public</span><br>  └── <span class="hljs-number">2023</span><br>    └── <span class="hljs-number">9</span><br>      └── <span class="hljs-number">5</span><br>        └── hexo<br>          ├── assets<br>          │ └── filename.jpg<br>          └── <span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><h3 id="hexo-asset-file-carp">hexo-asset-file-carp</h3><blockquote><p>为了让 hexo 适应我的编写习惯，所以我在 <code>hexo-asset-image</code> 的插件基础上做出了调整，我将文章和资源文件夹看作一个整体，然后，资源文件夹默认在文章所在的文件夹下，只要文章到哪我把资源文件夹一起复制过去就可以了。</p></blockquote><p>下载插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-asset-file-carp<br></code></pre></td></tr></table></figure><p>修改 <code>_config.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yam">asset_dir: ./assets # 文章的资源文件夹，对于文章的相对路径<br></code></pre></td></tr></table></figure><p><code>asset_dir</code> 是我自定义的配置项，默认为 <code>assets</code> 文件夹，你可以像 Typora 中的配置一样写：<code>./$&#123;filename&#125;.assets</code> ，插件会自动解析替换的。</p><p>需要注意的是，这个插件的前提是你的资源文件夹处于文章的同目录下，如果是上一级目录，出问题，自负，或者你也可以自己写一个适合你习惯的插件。</p><p>一定要软件适应你，如果你去适应软件，最后所有的记录就都不是统一的规范。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>网站</category>
      
      <category>nodejs</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>hexo</category>
      
      <category>top.specialcarp</category>
      
      <category>blog</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/10/hello-world/"/>
    <url>/2023/11/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
