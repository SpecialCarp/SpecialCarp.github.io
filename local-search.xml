<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue 2 学习笔记</title>
    <link href="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>Vue 2 学习笔记</h1><blockquote><p>本文编写时间为 2023-11-29，可能存在过期内容，仅供参考。最新数据请访问 <a href="https://v2.cn.vuejs.org/v2/guide/">官方文档</a>。</p></blockquote><span id="more"></span><p>Vue 的官方文档做的很不错，尤其是有中文版本这方面，你可以跟着官方的中文版本教程一步一步来学习 Vue。</p><p>当你开始学习 Vue 时，官方文档是在你已经<strong>了解</strong> HTML、CSS 和 JavaScript 的中级知识做出的教程，这里指的是了解，不要求熟练。</p><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="渐进式框架（Progressive Framework）是指一种软件开发的方法或框架，它允许开发人员逐步构建和改进应用程序，而不必一次性完成所有功能。这种方法的目标是通过逐步添加新的功能、组件或模块，使应用程序逐渐完善，并且在整个开发过程中都是可用和可测试的。">[1]</span></a></sup>。在学习之前，先通过 Vue 官方制作的一个<a href="https://player.youku.com/embed/XMzMwMTYyODMyNA==?autoplay=true&amp;client_id=37ae6144009e277d">介绍视频</a>了解一下。</p><p><video controls crossorigin="“anonymous”" src="/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/assets/%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91%E4%BA%91.mp4"></video></p><p>Vue 在教程中给出了许多安装的方法，但是<strong>不推荐</strong>新手直接使用 <code>vue-cli</code>，尤其是在你还不熟悉基于 Node.js 的构建工具时。所以，建议新建一个文件夹，创建 <code>.html</code> 文件，然后下载 <a href="https://v2.cn.vuejs.org/js/vue.js">Vue.js</a> 到本地，使用 <code>&lt;script&gt;</code> 标签引入，通过浏览器新标签页中打开它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My first Vue app<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./vue.js&quot;</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果觉得文字解释不够清晰，可以边看 Vue 的官方教程边看 <a href="https://learning.dcloud.io/">dcloud<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="dcloud 的产品有 HBuilderX、uni-app。">[2]</span></a></sup> 赞助的免费教程</a>，也可以去其他网站搜索教程视频。</p><p>不论学习什么，首先是要了解概念和名词，<!-- 这些不了解，对于理解整个知识体系就会变得一知半解，只了解简单的、粗显的和实际操作性的东西，了解概念是让我们从这个事物的最初开始学习， -->从设计者的角度来理解这件作品。</p><p>首先，我们解读一下上面的 Hello Vue 中 Vue 都做了什么。</p><p>第一，我们通过 <code>script</code> 标签引入本地的 <code>Vue.js</code>，Vuejs 会抛出 Vue 的构造函数和一些全局API；</p><p>第二，我们在这个页面的末尾，通过 Vue 的构造函数创建了一个 Vue 对象，我们向构造函数中传入了一个对象参数，这个对象定义了两个属性：el 和 data，el 属性的值是一个 CSS 选择器值，指向了我们在页面中定义的一个 id 为 app 的节点元素。</p><p>第三，Vue 将 id 为 app 的节点元素下的 <code>&#123;&#123; massage &#125;&#125;</code> 替换为了我们在创建 Vue 对象时传入的对象的 data 属性中的 massage 属性。</p><p>综上所述，我们可以使用 Vuejs，讲一些 js 变量通过”Mustache”语法<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mustache是一种轻量级的模板语法，用于在HTML、XML、JavaScript等文件中动态地渲染数据。Mustache不依赖特定的编程语言，因此可以在多种编程语言中使用。">[3]</span></a></sup>插入 HTML 页面中。</p><p>但这还不够精彩，你要先去先了解一个概念：<strong><a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a></strong><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="MVVM（Model-View-ViewModel）是一种软件架构模式，用于设计和实现用户界面（UI）。它是基于MVC（Model-View-Controller）模式的演变，旨在解决MVC模式中视图和模型之间的紧耦合问题。">[4]</span></a></sup>，然后在浏览器的控制台执行 <code>app.message=&quot;你好，Vue！&quot;</code>，然后就会神奇的发现，浏览器的内容变化了。Vue 在教程中提到：*Vue 虽然没有完全遵循 MVVM 模型，但是 Vue 的设计也受到了它的启发。当创建一个 Vue 实例时，你可以传入一个<strong>选项对象</strong>。使用这些选项来创建你想要的行为。*我们通过 MVVM 模型这个概念去理解一下 Vue：</p><ul><li><p>MVVM：页面输入改变数据，数据改变影响页面数据展示与渲染；</p></li><li><p>M（model）：普通的javascript数据对象；</p></li><li><p>V（view）：前端展示页面；</p></li><li><p>VM（ViewModel）：用于双向绑定数据与页面，对于我们来说，就是vue的实例。</p></li></ul><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/20151109171527_549.png" alt="使用 MVVM 理解 Vue"></p><p>而我们需要做的就是，搭建页面框架、定义数据和行为，而响应页面的动作，则交给 Vue。视图和模型之间的解耦，使得可以更容易地修改和扩展应用程序的各个部分。由于逻辑分离清晰，代码更容易维护和测试。</p><p>了解了设计理念，接下来就是学习使用 Vue 的选项对象和全局API。</p><h2 id="Vue-基础">Vue 基础</h2><p>学习 Vue 基础，要从最基本的 H5+JS 的编程比较，看一下 Vue 有哪些不同的东西。</p><h3 id="数据、方法和指令">数据、方法和指令</h3><p>在正常的前后端分离项目中，页面的逻辑大都如下：</p><pre><code class=" mermaid">graph TBA(浏览器请求页面)B(服务器返回页面)C(js请求后台数据)D(js根据数据渲染页面)E(用户操作界面)A--&gt;B--&gt;C--&gt;D--&gt;E--&gt;C</code></pre><p>最主要的逻辑就是，用户操作界面触发函数，改变数据，然后页面相应。而在 Vue 中，数据到页面是响应式的，那么我们就该考虑如何从 Vue 这里拿到用户操作界面的信息呢？在 Vue 的 <a href="https://v2.cn.vuejs.org/v2/api/#methods">API 文档</a> 我们可以看到选项对象有个属性是 <code>methods</code>，一看就是传方法的地方，把方法给 Vue 之后怎么触发呢？找事件相关的 API，找到一个指令 <code>v-on</code> 用来绑定事件监听器。</p><blockquote><p>Vue 文档有个搜索框，输入关键字查找相应的文档。</p></blockquote><p>使用方法也很简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-attr">reverseMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>指令 (Directives)</strong> 是带有 <code>v-</code> 前缀的特殊属性（attribute）。在Vue.js中，指令（Directives）是特殊的标记，用于提供应用程序中模板部分的行为。</p><p>不要把 <code>v-on:click</code> 和原来的 的 <code>onclick</code> 属性混为一谈，<code>v-on:click</code> 是 Vue 的自定义属性，它会去获取这个属性的值，然后去绑定事件。</p><h4 id="模板语法-sup-id-fnref-5-class-footnote-ref-a-href-fn-5-rel-footnote-span-class-hint-top-hint-rounded-aria-label-模板语法是一种用于定义和呈现动态内容的文本模板的语法规则。模板通常包含占位符、控制结构和表达式，这些元素允许在运行时插入具体的数据或执行逻辑。-5-span-a-sup">模板语法<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="模板语法是一种用于定义和呈现动态内容的文本模板的语法规则。模板通常包含占位符、控制结构和表达式，这些元素允许在运行时插入具体的数据或执行逻辑。">[5]</span></a></sup></h4><p>通过 Vue 定义的语法，让 Vue 将数据渲染到 HTML 中。比如之前提到的 <code>&#123;&#123; &#125;&#125;</code>。</p><p><strong>data</strong>：<a href="https://v2.cn.vuejs.org/v2/api/#data">选项/数据对象</a></p><p>类型：<code>Object | Function</code></p><p>Vue 会递归地把 data 的属性（property）转换为 getter/setter，从而让 data 的属性（property）能够响应数据变化。<strong>对象必须是纯粹的对象 (含有零个或多个的 key/value 对)</strong>：浏览器 API 创建的原生对象，原型上的属性（property）会被忽略。大概来说，data 应该只能是数据 - 不推荐观察拥有状态行为的对象<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="拥有状态行为的对象指的是具有一些特定状态和相关行为的对象，通常不仅仅是数据的容器。">[7]</span></a></sup>。前面这句话简而言之就是，不要在 data 中定义返回数据的方法，只定义类似 JSON 形式的数据对象。</p><p>data 一旦被 Vue.js 观察过，你就无法在根数据对象上添加响应式属性（property）。因此推荐在创建实例之前，就声明所有的根级响应式属性（property）。简而言之，言而简之：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    a：&#123;&#123; a &#125;&#125; -- b：&#123;&#123; b &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: data<br>&#125;)<br>data.<span class="hljs-property">a</span> = <span class="hljs-number">3</span> <span class="hljs-comment">// 页面会响应</span><br>data.<span class="hljs-property">b</span> = <span class="hljs-number">2</span> <span class="hljs-comment">// 页面不会响应</span><br></code></pre></td></tr></table></figure><p>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。Vue 实例也代理了 data 对象上所有的属性（property），因此访问 <code>vm.a</code> 等价于访问 <code>vm.$data.a</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">vm.<span class="hljs-property">$data</span> === data <span class="hljs-comment">// =&gt; true</span><br></code></pre></td></tr></table></figure><p>以 <code>_</code> 或 <code>$</code> 开头的 property <strong>不会</strong>被 Vue 实例代理，因为它们可能和 Vue 内置的属性（property）、API 方法冲突。你可以使用例如 <code>vm.$data._property</code> 的方式访问这些属性（property）。</p><p>如果需要，可以通过将 <code>vm.$data</code> 传入 <code>JSON.parse(JSON.stringify(...))</code> 得到深拷贝的原始数据对象。</p><p><strong><code>&#123;&#123; &#125;&#125;</code></strong>：纯文本插值</p><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> 属性（property）的值。无论何时，绑定的数据对象上 <code>msg</code> 属性（property）发生了改变，插值处的内容都会更新。</p><p><code>&#123;&#123; &#125;&#125;</code> 是 Vue 的模板语法，在这个模板语法中只允许填入变量、文本、<strong>单行表达式</strong><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="单行表达式通常是指在编程语言中，一条语句中包含的逻辑、计算或操作都在一行内完成。这种表达式的目标是简洁而紧凑，以便更容易理解和阅读。">[6]</span></a></sup>（对于所有的数据绑定都是这个规则），且双大括号会将数据解释为普通文本，而非 HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> &#123;&#123; rawHtml &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span>,<br>        <span class="hljs-attr">rawHtml</span>: <span class="hljs-string">`&lt;span style=&#x27;color: red;&#x27;&gt;This is red.&lt;/span&gt;`</span>,<br>        <span class="hljs-attr">number</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-attr">reverseMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>允许的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Vue 中定义变量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 文本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; &#x27;message&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 单行表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; &#x27;id：&#x27; + id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; reverseMessage() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; var a = 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>模板表达式都被放在沙盒中，只能访问<a href="https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9">全局变量的一个白名单</a>，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p></blockquote><p><strong><code>v-html</code></strong>：原始 HTML</p><p>为了输出真正的 HTML，你需要使用 <a href="https://v2.cn.vuejs.org/v2/api/#v-html"><code>v-html</code> 指令</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个 <code>span</code> 的内容将会被替换成为属性（property）值 <code>rawHtml</code>，直接作为 HTML，会忽略解析属性（property）值中的数据绑定。注意，你不能使用 <code>v-html</code> 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。</p><blockquote><p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 <a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC">XSS 攻击</a><sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="XSS（Cross-Site Scripting）攻击是一种Web应用程序安全漏洞，攻击者通过注入恶意脚本（通常是JavaScript代码）到Web页面中，使得用户在浏览器中执行这些恶意脚本。这种攻击允许攻击者在受害者的浏览器中执行恶意操作，例如窃取用户的登录凭证、篡改页面内容或进行其他恶意活动。">[8]</span></a></sup>。请只对可信内容使用 HTML 插值，<strong>绝对不要</strong>对用户提供的内容使用插值。</p></blockquote><p><code>v-text</code>：纯文本替换标签内容</p><p>说到 <code>v-html</code>，那必须介绍一下 <code>v-text</code>，更新绑定元素的 <code>innerHTML</code>，以纯文本的形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 和下面的一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>message：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 多了个 span 标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>message：&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有用，但不常用，了解即可。</p><p><strong><code>v-bind</code></strong>：绑定 HTML 节点属性（attribute）</p><p>Mustache 文本插值语法 <code>&#123;&#123; &#125;&#125;</code> 不能作用在节点属性，Vue 提供了 <code>v-bind</code> 指令用于绑定节点属性。使用方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定一个 attribute --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imageSrc&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 内联字符串拼接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&quot;vue-logo.png&quot;</span>,<br>        <span class="hljs-attr">imageSrc</span>: <span class="hljs-string">&quot;https://static-sg-cdn.eporner.com/gallery/wc/Uk/Szh9KZTUkwc/694382-sleek-figure-nude_880x660.jpg&quot;</span>,<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p></blockquote><p>对于普通的节点属性只需要通过表达式计算出字符串结果即可，但是在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。对于以 <em>on</em> 开头节点事件属性，请使用 <code>v-on</code> 绑定。</p><p><strong>绑定 HTML Class：对象语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">     <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>再次强调，<code>v-bind:class</code> 等指令都是 Vue 自定义的节点属性，Vue.js 通过这些自定义属性去改变原有的属性值，不要将 <code>v-bind:class</code> 和 <code>class</code> 混为一谈。</p></blockquote><p><code>v-bind:class</code> 指令也可以与普通的 class 属性共存。当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code>，class 列表将变为 <code>&quot;static active text-danger&quot;</code>。</p><p>绑定的数据对象不必内联定义在模板里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">classObject</span>: &#123;<br>        <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>绑定 HTML Class：数组语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在数组中使用对象语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[&#123; active: !isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br><span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绑定内敛样式 Style：对象语法</strong></p><p><code>v-bind:style</code> 的对象语法十分直观，看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性（property）名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br><span class="hljs-attr">fontSize</span>: <span class="hljs-number">30</span>,<br><span class="hljs-attr">styleObject</span>: &#123;<br><span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: <span class="hljs-string">&#x27;13px&#x27;</span>,<br>        <span class="hljs-attr">marginTop</span>: <span class="hljs-string">&#x27;6px&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:activeColor; font-size: 30px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:activeColor; font-size: 30px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:activeColor; font-size: 13px; margin-top: 6px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绑定内敛样式 Style：数组语法</strong></p><p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">baseStyles</span>: &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;0px&#x27;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;0px&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">overridingStyles</span>: &#123;<br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: <span class="hljs-string">&#x27;13px&#x27;</span>,<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;6px&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 6px; padding: 0px; color: red; font-size: 13px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>靠后的样式对象会覆盖前面的样式（很合理）。</p><p><strong><code>v-on</code></strong>：绑定事件监听器</p><p>事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p><p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events"><strong>原生 DOM 事件</strong></a>。在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 内联语句 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span>点击按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">doThat</span>(<span class="hljs-params">msg, event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;but&#x27;</span>) === <br>                    event.<span class="hljs-property">target</span>); <span class="hljs-comment">// =&gt; true</span><br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>因为在方法中 <code>this</code> 执行 Vue 的实例对象，所以 Vue.js 提供了这么个属性来访问事件对象。</p></blockquote><p>从 <code>2.4.0</code> 开始，<code>v-on</code> 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和 <code>v-bind</code> 一样在 <code>2.6.0</code> 之后支持动态事件缩写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:</span>[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML 属性（attribute）名里是无效的。例如：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这会触发一个编译警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[&#x27;<span class="hljs-attr">foo</span>&#x27; + <span class="hljs-attr">bar</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>变通的办法是使用没有空格或引号的表达式，或用<a href="#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8">计算属性</a>替代这种复杂表达式。</p><p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把属性（attribute）名全部强制转为小写：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span><br><span class="hljs-comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">someAttr</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><strong><code>v-bind</code> 和 <code>v-on</code> 简写</strong>：你会感谢有简写的</p><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的属性（attribute）。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8">单页面应用程序 (SPA - single page application)</a><sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="单页面应用程序（Single Page Application，SPA）是一种Web应用程序架构，它使用一张单一的HTML页面，通过异步加载页面所需的内容，而不是每次用户导航时都重新加载整个页面。SPAs借助JavaScript、AJAX（Asynchronous JavaScript and XML）等技术，通过在后台与服务器进行数据交互，动态地更新页面内容，实现用户与应用程序之间的流畅交互。">[9]</span></a></sup> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 简写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态参数的简写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>它们看起来可能与普通的 HTML 属性略有不同，但 <code>:</code> 与 <code>@</code> 对于属性名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标签中。</p><blockquote><p>简写不支持对象语法，你不能像 <code>:=&quot;&#123; herf: url &#125;&quot;</code>、<code>@=&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</code> 这样写，很离谱。</p></blockquote><p><strong>methods</strong>：<a href="https://v2.cn.vuejs.org/v2/api/#methods">选项/方法</a></p><p>类型：<code>&#123; [key: string]: Function &#125;</code></p><p>methods 中定义的方法与 data 一样都将被混入到 Vue 实例中。可以直接通过 Vue 实例访问这些方法，或者在指令表达式中使用。</p><p>方法中的 <code>this</code> 自动绑定为 Vue 实例。所以可以在方法中通过 <code>this</code> 来获取数据，或调用其他方法。</p><blockquote><p>注意，<strong>不应该使用箭头函数来定义 method 函数</strong> (例如 <code>plus: () =&gt; this.a++</code>)。理由是箭头函数绑定了父级作用域的上下文，所以 <code>this</code> 将不会按照期望指向 Vue 实例，<code>this.a</code> 将是 undefined。</p></blockquote><h5 id="双向数据绑定">双向数据绑定</h5><p>在上面介绍的 <code>v-bind</code> 虽然可以将数据绑定到页面上，但是数据的流向是单向的，即：</p><pre><code class=" mermaid">graph TBA(定义数据)B(Vue.js 将数据渲染到界面上)C(用户操作界面触发方法)D(方法修改数据)A--&gt;B--&gt;C--&gt;D--&gt;B</code></pre><p>在编写关于表单控件这方面的代码时，你就需要考虑使用修改事件去更新数据，这是传统的也是麻烦的解决方法，Vue 提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态（数据）之间的双向绑定。</p><p><strong><code>v-model</code></strong>：绑定表单控件 value 属性</p><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><blockquote><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 属性（attribute）的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p></blockquote><p><code>v-model</code> 在内部为不同的输入元素使用不同的属性（property）并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> 属性（property）和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> 属性（property）和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop，并将 <code>change</code> 作为事件。</li></ul><blockquote><p>对于需要使用<a href="https://zh.wikipedia.org/wiki/%E8%BE%93%E5%85%A5%E6%B3%95">输入法</a> (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 <code>input</code> 事件。</p></blockquote><p>除去没有与用户交互内容的 <code>&lt;input&gt;</code>，比如 <code>type</code> 属性的值为 <code>button</code>、<code>image</code>、<code>reset</code>  和 <code>submit</code> 时。</p><p><strong>文本框的使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;文本框&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>文本框<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> </span><br><span class="hljs-tag">               <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> </span><br><span class="hljs-tag">               <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入文字&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;多行文本&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>多行文本<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;multiline_message&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入多行文字&quot;</span></span><br><span class="hljs-tag">                  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">multiline_message</span>: <span class="hljs-string">&quot;&quot;</span><br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>在多行文本中，<code>multiline_message</code> 变量的值中的换行符会以 <code>\n</code> 的形式储存。</p><p>以此类推，<code>password</code>、<code>search</code>、<code>email</code>等以文本框展示的控件，使用 <code>v-model</code> 绑定一个字符串变量，<code>number</code> 则是一个数字变量。</p><p>比较特殊的有时间控件：<code>date</code>、<code>datetime-local</code>、<code>month</code>、<code>week</code> 和 <code>time</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;时间选择器&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>时间选择器<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;date&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>date value is: &#123;&#123; date &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;datetime-local&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>datetime-local value is: &#123;&#123; datetime-local &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;month&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>month value is: &#123;&#123; month &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;week&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>week value is: &#123;&#123; week &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;time&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>time value is: &#123;&#123; time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    datetime-<span class="hljs-attr">local</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">week</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下可以看出，Vue 对于这些控件的值都是用他们原来的 String 类型，这些数据的格式为：</p><ul><li>date：<code>yyyy-MM-dd</code></li><li>datetime-local：<code>yyyy-MM-ddThh:mm</code>，注意：T 代替了年月日和时分中间空格</li><li>month：<code>yyyy-MM</code>，注意：控件选择的某一年的几月份，所以变量的值就带上了年号</li><li>week：<code>yyyy-WW</code>，注意：和 month 一样，控件展示的就需要你选择年份</li><li>time：<code>hh:mm</code>，可以使用 date + time 规避 datetime-local 的使用</li></ul><p>特殊的数字控件：<code>range</code> 拖拽条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;时间选择器&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>时间选择器<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;ice-cream-flavors&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;range&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ice-cream-flavors&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>range value is: &#123;&#123; time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">range</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个控件允许用户指定一个数值，该数值必须不小于给定值，并且不得大于另一个给定值。但是，其精确值并不重要。绑定的变量为一个字符串，取值区间由 <code>min</code> 和 <code>max</code> 属性决定（默认0-100），步值有 <code>step</code> 决定（默认1），step 可以设置成小数。</p><p>由于这种小部件不精确，因此除非控件的确切值不重要，否则通常不应使用它。</p><p><strong>单选框的使用</strong></p><blockquote><p>一个单选按钮组由具有相同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#name"><code>name</code></a> 属性的单选按钮组成。一旦单选按钮组被建立，选择那按钮组的任何单选按钮将会自动取消同组当前选择的任何按钮。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;单选按钮&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>单选按钮<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">picked</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 Vue 中不要求你使用相同的 <code>name</code> 属性分组，只需要你在 <code>data</code> 中定义一个字符串变量绑定到同一组的单选按钮中，要求你必须使用 <code>value</code> 属性定义单选按钮的值，相同的值在点击其中一个单选按钮时，会同时被选择。同样你也可以使用 <code>v-bind</code> 指令来绑定 <code>value</code> 属性，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pick&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当选中时 vm.pick === vm.a --&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果在单选框中没有定义 <code>value</code>，那么选中之后赋予变量的值就是 <code>null</code>。</p></blockquote><p><strong>复选框的使用</strong></p><p>对于选项，一般除必要情况，都是使用复选框，因为单选框一旦选择无法取消，要么做方法去取消单选框的选择，要么做方法去控制复选框只能选择一个，第二个可能还更简单一点（都是为了用户体验）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;复选框&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>复选框<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">checkedNames</span>: [],<br>&#125;<br></code></pre></td></tr></table></figure><p>与单选框不一样的是，如果你没有给复选框绑定 <code>value</code>，那么给到 Vue 的值当绑定的变量是数组时，则向数组中加入 <code>null</code>，如果是非数组，则赋值 <code>true</code> 或 <code>flase</code>。绑定的变量不能是对象类型的，否则在绑定的多选框变更时，会变成布尔值。</p><p>Vue 还为复选框定义了两个属性 <code>true-value</code> 和 <code>false-value</code>，当选中时，就是<code>true-value</code>，未选中时就是 <code>false-value</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;toggle&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">true-value</span>=<span class="hljs-string">&quot;yes&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">false-value</span>=<span class="hljs-string">&quot;no&quot;</span></span><br><span class="hljs-tag">&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-comment">// 当选中时 toggle === &#x27;yes&#x27;</span><br><span class="hljs-comment">// 当没有选中时 toggle === &#x27;no&#x27;</span><br>    <span class="hljs-attr">toggle</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不适应于数组，数组还得使用 <code>value</code>，不然给到的还是 <code>null</code>。</p></blockquote><blockquote><p>这里的 <code>true-value</code> 和 <code>false-value</code> 属性（attribute）并不会影响输入控件的 <code>value</code> 属性（attribute），因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p></blockquote><p><strong>选择框</strong></p><p>一个提供选项菜单的控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;选择框&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>选择框<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p></blockquote><p>选择框定义了 <code>multiple</code> 属性后，就可以多选，同理多选时需要绑定到一个数组上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-6&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">selected</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>当选择框的选项 <code>&lt;option&gt;</code> 没有定义 <code>value</code> 时，默认 <code>value</code> 等于选项标签的节点内容。</p><h4 id="计算属性和侦听器">计算属性和侦听器</h4><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><br>    &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p><p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><p><strong>computed</strong>：计算属性</p><p>类型：<code>&#123; [key: string]: Function &#125;</code>或者<code>&#123; [key: string]: &#123; get: Function, set: Function &#125; &#125;</code></p><p>计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-comment">// 计算属性的 getter</span><br>        <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">// `this` 指向 vm 实例</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里我们声明了一个计算属性 <code>reversedMessage</code>。我们提供的函数将用作属性（property） <code>vm.reversedMessage</code> 的 getter 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">reversedMessage</span>) <span class="hljs-comment">// =&gt; &#x27;olleH&#x27;</span><br>vm.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;Goodbye&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">reversedMessage</span>) <span class="hljs-comment">// =&gt; &#x27;eybdooG&#x27;</span><br></code></pre></td></tr></table></figure><p>你可以像绑定普通属性（property）一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。而且最妙的是 Vue.js 已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。</p><blockquote><p>注意如果你为一个计算属性使用了箭头函数，则 <code>this</code> 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-attr">aDouble</span>: <span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> vm.<span class="hljs-property">a</span> * <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>计算属性的属性值为函数时，Vue 会默认这个函数这个计算属性的 getter 方法，如要设置 setter 方法，请参照一下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-comment">// 仅读取</span><br>        <span class="hljs-attr">aDouble</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> * <span class="hljs-number">2</span><br>        &#125;,<br>        <span class="hljs-comment">// 读取和设置</span><br>        <span class="hljs-attr">aPlus</span>: &#123;<br>            <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-number">1</span><br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = v - <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br>vm.<span class="hljs-property">aPlus</span>   <span class="hljs-comment">// =&gt; 2</span><br>vm.<span class="hljs-property">aPlus</span> = <span class="hljs-number">3</span><br>vm.<span class="hljs-property">a</span>       <span class="hljs-comment">// =&gt; 2</span><br>vm.<span class="hljs-property">aDouble</span> <span class="hljs-comment">// =&gt; 4</span><br></code></pre></td></tr></table></figure><p>计算属性的结果会被缓存，除非依赖的响应式属性（property）变化才会重新计算。注意，如果某个依赖（比如非响应式属性（property））在该实例范畴之外，则计算属性是<strong>不会</strong>被更新的。</p><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-attr">now</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A。如果没有缓存，我们将不可避免的多次执行 A 的 getter！如果你不希望有缓存，请用方法来替代。</p><p><strong>watch</strong>：侦听器</p><p>类型：<code>&#123; [key: string]: string | Function | Object | Array &#125;</code></p><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code>，遍历 watch 对象的每一个属性（property）。</p><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        为什么不问问神奇的魔法海螺呢？<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;请你提出问题，并在问题的最后带上 &quot;?&quot;，我会回答你是或者否&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="language-javascript">            <span class="hljs-attr">question</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;new: %s, old: %s&#x27;</span>, newQuestion, oldQuestion);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;神奇的魔法海螺，请你回答我...&#x27;</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">debouncedGetAnswer</span>()</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="language-javascript">            <span class="hljs-comment">// AJAX 请求直到用户输入完毕才会发出。</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">debouncedGetAnswer</span> = _.<span class="hljs-title function_">debounce</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">getAnswer</span>, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">getAnswer</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;请你提出问题，并在问题的最后带上 &quot;?&quot;，我会回答你是或者否&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) === -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;请你在问题的最后带上一个问号：&quot;?&quot; 不然我无法回答你 😅&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;神奇海螺思考中...&#x27;</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">                axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)</span><br><span class="language-javascript">                    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">                    vm.<span class="hljs-property">answer</span> = _.<span class="hljs-title function_">capitalize</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">answer</span>) == <span class="hljs-string">&quot;yes&quot;</span> ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">                    vm.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;错误，来自黄色方块和粉色星星的力量，使神奇海螺无法做出回应&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们先了解一下这个例子的逻辑：</p><pre><code class=" mermaid">graph TBA(定义数据 question 和 answer，并绑定到页面上)B(定义一个侦听器 question，当 question 变化时调用函数)C(在生命周期函数中，做一个防抖处理)D(在 methods 中定义一个请求是或否的函数)E(修改 answer)A--&gt;B--&gt;D--&gt;EC--&gt;D</code></pre><p>嗯，非常标准的监听用户输入异步请求数据的操作。</p><p>首先，需要解释几个点：</p><ul><li>lodash.js<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="Lodash 是一个流行的 JavaScript 工具库，提供了许多实用的函数和方法，用于简化 JavaScript 编程中的常见任务。它通过提供一组模块化、高性能、易于使用的功能，帮助开发者更便捷地进行数组操作、对象操作、函数式编程、集合操作、字符串操作等。">[10]</span></a></sup> 暴漏出 <code>_</code> 的入口点，类似 JQuery.js 的 <code>$</code>，用于调用它的各种API。</li><li><a href="https://www.lodashjs.com/docs/lodash.debounce#_debouncefunc-wait0-options"><code>_.debounce(func, [wait=0], [options=])</code></a> 创建一个 debounced（防抖动）函数，该函数会从上一次被调用后，延迟 <code>wait</code> 毫秒后调用 <code>func</code> 方法。当你在 <code>wait</code> 毫秒内连续调用，则会重置时间，等待调用。</li><li>axios.js<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境中进行 HTTP 请求。它是一个轻量、简单、灵活的工具，使得在前端和后端之间进行数据交互变得更加容易。">[11]</span></a></sup> 用来提供封装过的便于使用的 AJAX 请求。</li><li><code>axios.get(url, [config])</code> 通过 url 发送 Get 请求，返回一个 Promise 对象<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="Promise 是 JavaScript 中用于处理异步操作的对象。它表示一个在未来可能会完成或失败的操作，具体是一个异步操作的最终结果（或错误）。">[12]</span></a></sup>。</li><li><code>created()</code>：生命周期函数，在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。</li></ul><p>综上可知，<a href="https://v2.cn.vuejs.org/v2/api/#watch"><code>watch</code></a> 中定义的属性名与 data 中的属性一致时，Vue 会监听这个属性的变化，当属性变化时，会调用与之相对的函数，Vue 会向函数中传入两个参数：原来的属性值和新的属性值。</p><blockquote><p>注意，<strong>不应该使用箭头函数来定义 watcher 函数</strong> (例如 <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>)。理由是箭头函数绑定了父级作用域的上下文，所以 <code>this</code> 将不会按照期望指向 Vue 实例，<code>this.updateAutocomplete</code> 将是 undefined。</p></blockquote><p>对于数组和对象变量的侦听，我们先略过，这里只说明怎么侦听，你也可以可以跳到 <a href>数组和对象的变更检测</a>，请看如下示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">a</span>: &#123;<br>            <span class="hljs-attr">b</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">c</span>: &#123;<br>                <span class="hljs-attr">d</span>: <span class="hljs-number">5</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;,<br>    <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-comment">// 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span><br>        <span class="hljs-attr">a</span>: &#123;<br>            <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>            <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-comment">// 侦听 vm.c.d&#x27;s 的值: &#123;e: 5&#125;</span><br>        <span class="hljs-string">&#x27;a.b&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>        <span class="hljs-comment">// someMethod 是方法名</span><br>        <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;someMethod&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>数组可以和普通的变量一样被侦听，而对象，要么去专门侦听它的属性值（<code> 'c.d': function ()</code>），要么使用 <code>deep: true</code> 监听它的所有值。</p><p>侦听器的属性值可以是：方法名、一个函数、一个对象、一个数组。</p><p>当属性值的类型为对象时，对象的属性必须定义 <code>handler</code> 属性，且值是一个方法或方法名。当属性 <code>deep</code> 为真时，回调函数（<code>handler()</code>）会在任何被侦听的对象的属性（property）改变时被调用，不论其被嵌套多深；当属性 <code>immediate</code> 为真时，回调函数（<code>handler()</code>）将会在侦听开始之后被立即调用一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-string">&#x27;a.c.d&#x27;</span>: &#123;<br>        <span class="hljs-attr">handler</span>: <span class="hljs-string">&#x27;someMethod&#x27;</span>,<br>        <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当属性值的类型为数组时，侦听的数据变化时，Vue 会逐个调用数组中的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">a</span>: [<br>    <span class="hljs-string">&#x27;someMethod&#x27;</span>,<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle2</span> (val, oldVal) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>    &#123;<br>        <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle3</span> (val, oldVal) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>        <span class="hljs-comment">/* ... */</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p><strong>计算属性 VS 侦听器</strong></p><p>当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code>，特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。细想一下这个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>        <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Bar&#x27;</span>,<br>        <span class="hljs-attr">fullName</span>: <span class="hljs-string">&#x27;Foo Bar&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = val + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-attr">lastName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + val<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Foo&#x27;</span>,<br>        <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Bar&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-attr">fullName</span>: &#123;<br>            <span class="hljs-comment">// getter</span><br>            <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>            &#125;,<br>            <span class="hljs-comment">// setter</span><br>            <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newValue</span>) &#123;<br>                <span class="hljs-keyword">var</span> names = newValue.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = names[<span class="hljs-number">0</span>]<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = names[names.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>好得多了，不是吗？</p><h4 id="常用指令">常用指令</h4><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊属性（attribute）。指令的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML 属性（attribute）。</p><p><code>v-html</code>：更新元素的 <code>innerHTML</code>，<strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译</strong>。如果试图使用 <code>v-html</code> 组合模板，可以重新考虑是否通过使用组件来替代。</p><p>在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。只在可信内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>v-bind</code></strong>：动态地绑定一个或多个属性（attribute），或一个组件 prop 到表达式。可以简写为 <code>:</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 绑定一个 attribute --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imageSrc&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageSrc&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- class 绑定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; red: isRed &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- style 绑定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; fontSize: size + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributeName</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> 属性（property）<code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p><p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:</span>[<span class="hljs-attr">eventName</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code>。</p><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML 属性（attribute）名里是无效的。例如：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这会触发一个编译警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[&#x27;<span class="hljs-attr">foo</span>&#x27; + <span class="hljs-attr">bar</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p><p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把属性（attribute）名全部强制转为小写：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span><br><span class="hljs-comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">someAttr</span>]=<span class="hljs-string">&quot;value&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><strong><code>v-on</code></strong>：绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句。可以简写为 <code>@</code>。</p><p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events"><strong>原生 DOM 事件</strong></a>。用在自定义元素组件上时，也可以监听子组件触发的<strong>自定义事件</strong>。</p><p>在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> 属性（property）：<code>v-on:click=&quot;handle('ok', $event)&quot;</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 方法处理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态事件 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:</span>[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 内联语句 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>v-model</code></strong>：在表单控件或者组件上创建双向绑定。随表单控件类型不同而不同。</p><p><strong>限制</strong>：<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code> 和 自定义组件。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>v-if</code></strong>：根据表达式的值的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a> 来有条件地渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <code>&lt;template&gt;</code>，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</p><p><strong><code>v-else-if</code></strong>：表示 <code>v-if</code> 的“else if 块”。可以链式调用。前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p><p><strong><code>v-else</code></strong>：为 <code>v-if</code> 或者 <code>v-else-if</code> 添加“else 块”。前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>    A<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>    B<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>    C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>    Not A/B/C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>v-show</code></strong>：根据表达式之真假值，切换元素的 <code>display</code> CSS 属性（property）。当条件变化时该指令触发过渡效果。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p></blockquote><p><strong><code>v-if</code> VS <code>v-show</code></strong></p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做，直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><p><strong><code>v-for</code></strong>：基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>，为当前遍历的元素提供别名，为数组索引指定别名（或者用于对象的键）。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;--&#123;&#123; item.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val, key) in object&quot;</span>&gt;</span>&#123;&#123; key &#125;&#125;：&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val, name, index) in object&quot;</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;--&#123;&#123; key &#125;&#125;：&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-for</code> 的默认行为会尝试原地修改元素而不是移动它们。要强制其重新排序元素，你需要用特殊属性（attribute）<code>key</code> 来提供一个排序提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    &#123;&#123; item.text &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用 <code>key</code> 管理 <code>v-if</code> 和 <code>v-for</code> 的可复用元素</strong></p><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your email address&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么在上面的代码中切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉，仅仅是替换了它的 <code>placeholder</code>。</p><p>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> 属性（attribute）即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your username&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your email address&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;email-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意，<code>&lt;label&gt;</code> 元素仍然会被高效地复用，因为它们没有添加 <code>key</code> 属性（attribute）。</p><p><strong><code>key</code></strong>：有相同父元素的子元素必须有<strong>独特的 key</strong>。重复的 key 会造成渲染错误。</p><p><code>key</code> 的特殊属性（attribute）主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p><p>它也可以用于强制替换元素/组件而不是重复使用它。</p><p><code>key</code> 的类型：<code>number | string | boolean (2.4.2 新增) | symbol (2.5.12 新增)</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>v-if</code> 与 <code>v-for</code> 一起使用</strong></p><blockquote><p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code>。但当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</p></blockquote><p>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上。</p><p>一般我们在两种常见的情况下会倾向于这样做：</p><ul><li>为了过滤一个列表中的项目 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。在这种情形下，请将 <code>users</code> 替换为一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表。</li><li>为了避免渲染本应该被隐藏的列表 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。这种情形下，请将 <code>v-if</code> 移动至容器元素上 (比如 <code>ul</code>、<code>ol</code>)。</li></ul><p>反例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.isActive&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        &#123;&#123; user.name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//...</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">users</span>: [</span><br><span class="language-javascript">            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User1&#x27;</span>, <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span> &#125;,</span><br><span class="language-javascript">            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User2&#x27;</span>, <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span> &#125;,</span><br><span class="language-javascript">            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User3&#x27;</span>, <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span> &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// ... </span></span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//...</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;shouldShowUsers&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        &#123;&#123; user.name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">users</span>:[ <span class="hljs-comment">/* ... */</span> ],</span><br><span class="language-javascript">        <span class="hljs-attr">shouldShowUsers</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// ...</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in activeUsers&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        &#123;&#123; user.name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">activeUsers</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span>user.<span class="hljs-property">isActive</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// ...</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;shouldShowUsers&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        &#123;&#123; user.name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么不要把 <code>v-for</code> 和 <code>v-if</code> 放到同一个节点上使用？因为性能，详情请见：<a href="https://v2.cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81">Vue 风格指南</a>。</p><p><strong><code>v-once</code></strong>：只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单个元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 有子元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>comment<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-once</span> <span class="hljs-attr">:comment</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-comment">&lt;!-- `v-for` 指令--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in list&quot;</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="指令修饰符">指令修饰符</h5><p><strong>事件修饰符</strong></p><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - (2.1.4) 只触发一次回调。</li><li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。</p><p><strong>按键修饰符</strong></p><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><ul><li><code>.enter</code> - 只有在 <code>key</code> 是 <code>Enter</code> 时调用</li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.ctrl</code> - (2.1.0)</li><li><code>.alt</code> - (2.1.0)</li><li><code>.shift</code> - (2.1.0)</li><li><code>.meta</code> - (2.1.0) 在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</li><li><code>.&#123;keyCode&#125;</code>：按键码，比如 <code>@keyup.13=&quot;submit&quot;</code>，13 就是回车（enter）的按键码，有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。</li></ul><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p><p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href="https://v2.cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 可以使用 `v-on:keyup.f1`</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">keyCodes</span>.<span class="hljs-property">f1</span> = <span class="hljs-number">112</span><br></code></pre></td></tr></table></figure><p>组合键：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Alt + C --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.alt.67</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Ctrl + Click --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。</p></blockquote><p>2.5.0 新增 <code>.exact</code> 修饰符，允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>鼠标按钮修饰符</strong></p><ul><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><p><strong><code>v-bind</code> 修饰符</strong></p><ul><li><code>.prop</code> - 作为一个 DOM 对象属性（property）绑定而不是作为节点属性（attribute）绑定。(<a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028">差别在哪里？</a>)</li><li><code>.camel</code> - (2.1.0+) 将 kebab-case 属性（attribute）名转换为 camelCase。(从 2.1.0 开始支持)</li><li><code>.sync</code> (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li></ul><p><strong><code>v-model</code> 修饰符</strong></p><ul><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#lazy"><code>.lazy</code></a> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#number"><code>.number</code></a> - 输入字符串转为有效的数字</li><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#trim"><code>.trim</code></a> - 输入首尾空格过滤</li></ul><h2 id="组件">组件</h2><p>在前端开发中，“组件”<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="在计算机科学和软件开发领域，组件（Component）是指一个独立、可重用、可替换的软件单元，它可以通过接口与其他组件进行交互。组件化是一种软件设计和开发的方法，旨在提高代码的可维护性、可扩展性和可重用性。">[13]</span></a></sup>通常指的是用于构建用户界面的可重用代码单元。这些前端组件可以包含 HTML、CSS 和 JavaScript，并且可以在应用程序中的不同部分重复使用。在现代前端框架（如React、Vue、Angular等）中，组件化已经成为一种主流的开发范式。</p><p>以下是前端组件的一些特性和概念：</p><ol><li><strong>可重用性：</strong> 组件是可重用的，可以在应用程序的不同地方多次使用，减少了代码的冗余。</li><li><strong>封装性：</strong> 组件封装了特定功能的代码和样式，将其隐藏在一个独立的单元中，有助于提高代码的模块性和可维护性。</li><li><strong>可组合性：</strong> 组件可以嵌套和组合在一起，形成更复杂的界面结构。这种嵌套和组合的方式有助于构建整体应用程序。</li><li><strong>独立性：</strong> 组件应该是相对独立的单元，它的行为和状态不会直接影响其他组件。</li><li><strong>状态（State）：</strong> 组件可以具有内部状态，表示组件的特定数据。状态的改变通常会触发组件的重新渲染。</li><li><strong>生命周期（Lifecycle）：</strong> 组件通常具有生命周期，即在创建、更新和销毁阶段会触发一系列生命周期钩子函数，开发者可以在这些钩子函数中执行特定的操作。</li></ol><p>不同的前端框架对组件有不同的实现方式和概念，但上述特性通常是组件化开发的共同特点。例如，在 React 中，组件可以是类组件或函数组件，而在 Vue 中，组件是基于 Vue 实例的可复用代码单元。组件化的思想有助于提高代码的可维护性，使得前端开发更加灵活和高效。</p><h3 id="组件基础">组件基础</h3><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个名为 button-counter 的新组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;<br>    <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>Vue 组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>&lt;button-counter&gt;</code>。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span> &#125;)<br></code></pre></td></tr></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><p><strong>组件复用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p><p><strong>组件 <code>data</code> 必须是一个函数</strong></p><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象。取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝。如果 Vue 没有这条规则，点击一个按钮就可能会像如下代码一样影响到<em>其它所有实例</em>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>组织和管理 Vue.js 应用程序中的组件</strong></p><p>在Vue.js中，组件是构建用户界面的独立单元，而对于大型应用程序，合理组织和管理组件是非常重要的。</p><p>通常一个应用会以一棵嵌套的组件树的形式来组织：</p><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/components.png" alt="Component Tree"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。</p><p>在注册一个组件的时候，我们始终需要给它一个名字。比如在全局注册的时候我们已经看到了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure><p>该组件的组件名就是 <code>Vue.component</code> 的第一个参数。</p><p>你给予组件的名字可能依赖于你打算拿它来做什么。当直接在 DOM 中使用一个组件 (而不是在字符串模板或<a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>) 的时候，我们强烈推荐遵循 <a href="https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name">W3C 规范</a>中的自定义组件名 (字母全小写且必须包含一个连字符)。这会帮助你避免和当前以及未来的 HTML 元素相冲突。</p><p>定义组件名的方式有两种：</p><p>使用 kebab-case（短横线分隔命名法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure><p>当使用 kebab-case 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;</code>。</p><p>使用 PascalCase（驼峰命名法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyComponentName&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure><p>当使用 PascalCase 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。注意，尽管如此，直接在 DOM (即非字符串的模板) 中使用时只有 kebab-case 是有效的。</p><p><strong>全局注册</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component-name&#x27;</span>, &#123;<br>    <span class="hljs-comment">// ... 选项 ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>这样注册的组件是<strong>全局注册的</strong>。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (<code>new Vue</code>) 的模板中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-a&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-b&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-c&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-b</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component-c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-c</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在所有子组件中也是如此，也就是说这三个组件<em>在各自内部</em>也都可以相互使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;component-a&#x27;</span>, &#123; <br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;component-b&gt;&lt;/component-b&gt;&lt;component-c&gt;&lt;/component-c&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>局部注册</strong></p><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这会造成用户需要加载更多无谓的 JavaScript。</p><p>在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentA</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentB</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentC</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>components</code> 选项中定义你想要使用的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-string">&#x27;component-a&#x27;</span>: <span class="hljs-title class_">ComponentA</span>,<br>        <span class="hljs-string">&#x27;component-b&#x27;</span>: <span class="hljs-title class_">ComponentB</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>对于 <code>components</code> 对象中的每个属性（property）来说，其属性（property）名就是自定义元素的名字，其属性（property）值就是这个组件的选项对象。</p><p>注意<strong>局部注册的组件在其子组件中<em>不可用</em></strong>。例如，如果你希望 <code>ComponentA</code> 在 <code>ComponentB</code> 中可用，则你需要这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentA</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentB</span> = &#123;<br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-string">&#x27;component-a&#x27;</span>: <span class="hljs-title class_">ComponentA</span><br>    &#125;,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Prop">Prop</h3><p>在子组件中定义可被接收的数据名称。</p><p>类型：<code>Array&lt;string&gt; | Object</code></p><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p><p>你可以基于对象的语法使用以下选项：</p><ul><li><code>type</code>：可以是下列原生构造函数中的一种：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。</li><li><code>default</code>：<code>any</code><br>为该 prop 指定一个默认值。如果该 prop 没有被传入，则换做用这个值。对象或数组类型的默认值必须从一个工厂函数返回。</li><li><code>required</code>：<code>Boolean</code><br>定义该 prop 是否是必填项。在非生产环境中，如果这个值为 truthy 且该 prop 没有被传入的，则一个控制台警告将会被抛出。</li><li><code>validator</code>：<code>Function</code><br>自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 falsy 的值 (也就是验证失败)，一个控制台警告将会被抛出。</li></ul><p><strong>通过 Prop 向子组件传递数据</strong></p><p>在使用组件时，像网页的标题和公共栏一些内容，它是需要拿到父级组件甚至是根组件的数据。如果你不能向这个组件传递我们想展示的数据的话，它是没有办法使用的。这也正是 prop 的由来。</p><p>Prop 是你可以在组件上注册的一些自定义属性。当一个值传递给一个 prop 属性的时候，它就变成了那个组件实例的一个 property。为了给组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>一个 prop 被注册之后，你就可以像这样把数据作为一个组件的属性（attribute）传递进来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Blogging with Vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Why Vue is so fun&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个对应数据的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">posts</span>: [<br>            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;My journey with Vue&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Blogging with Vue&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Why Vue is so fun&#x27;</span> &#125;<br>        ]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">               <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag">               &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上所示，你会发现我们可以使用 <code>v-bind</code> 来动态传递 prop。这在你一开始不清楚要渲染的具体内容的时候，是非常有用的。</p><p><strong>Prop 的大小写 (camelCase vs kebab-case)</strong></p><p>HTML 中的属性（attribute）名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>    <span class="hljs-comment">// 在 JavaScript 中是 camelCase 的</span><br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;postTitle&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">post-title</span>=<span class="hljs-string">&quot;hello!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Prop 的类型</strong></p><p>到这里，我们只看到了以字符串数组形式列出的 prop：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>, <span class="hljs-string">&#x27;isPublished&#x27;</span>, <span class="hljs-string">&#x27;commentIds&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>]<br></code></pre></td></tr></table></figure><p>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些 property 的名称和值分别是 prop 各自的名称和类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: &#123;<br><span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br><span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span>,<br><span class="hljs-attr">isPublished</span>: <span class="hljs-title class_">Boolean</span>,<br><span class="hljs-attr">commentIds</span>: <span class="hljs-title class_">Array</span>,<br><span class="hljs-attr">author</span>: <span class="hljs-title class_">Object</span>,<br><span class="hljs-attr">callback</span>: <span class="hljs-title class_">Function</span>,<br><span class="hljs-attr">contactsPromise</span>: <span class="hljs-title class_">Promise</span> <span class="hljs-comment">// or any other constructor</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。</p><p><strong>Prop 验证</strong></p><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p><p>为了定制 prop 的验证方式，你可以为 <code>props</code> 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>        <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>        <span class="hljs-comment">// 多个可能的类型</span><br>        <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>        <span class="hljs-comment">// 必填的字符串</span><br>        <span class="hljs-attr">propC</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>            <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-comment">// 带有默认值的数字</span><br>        <span class="hljs-attr">propD</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>            <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>        &#125;,<br>        <span class="hljs-comment">// 带有默认值的对象</span><br>        <span class="hljs-attr">propE</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>            <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>            <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-comment">// 自定义验证函数</span><br>        <span class="hljs-attr">propF</span>: &#123;<br>            <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>                <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>                <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">includes</span>(value)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p><blockquote><p>注意那些 prop 会在一个组件实例创建之前进行验证，所以实例的属性（property）(如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p></blockquote><p><strong><code>type</code> 类型检查</strong></p><p><code>type</code> 可以是下列原生构造函数中的一个：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code> 和 <code>Symbol</code>。</p><p>额外的，<code>type</code> 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。例如，给定下列现成的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (firstName, lastName) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>&#125;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-attr">author</span>: <span class="hljs-title class_">Person</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>来验证 <code>author</code> prop 的值是否是通过 <code>new Person</code> 创建的。</p><p><strong>传递静态或动态 Prop</strong></p><p>像这样，你已经知道了可以像这样给 prop 传入一个静态的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你也知道 prop 可以通过 <code>v-bind</code> 动态赋值，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述两个示例中，我们传入的值都是字符串类型的，但实际上<em>任何</em>类型的值都可以传给一个 prop。</p><p>传入一个数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><br><span class="hljs-comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:likes</span>=<span class="hljs-string">&quot;42&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:likes</span>=<span class="hljs-string">&quot;post.likes&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入一个布尔值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">is-published</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><br><span class="hljs-comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:is-published</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:is-published</span>=<span class="hljs-string">&quot;post.isPublished&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><br><span class="hljs-comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:comment-ids</span>=<span class="hljs-string">&quot;[234, 266, 273]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:comment-ids</span>=<span class="hljs-string">&quot;post.commentIds&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span><br><span class="hljs-comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:author</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">name: &#x27;Veronica&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">company: &#x27;Veridian Dynamics&#x27;</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind:author</span>=<span class="hljs-string">&quot;post.author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入一个对象的所有属性（property）</p><p>如果你想要将一个对象的所有属性（property）都作为 prop 传入，你可以使用不带参数的 <code>v-bind</code> (取代 <code>v-bind:prop-name</code>)。例如，对于一个给定的对象 <code>post</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">post</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;My Journey with Vue&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>非 Prop 的属性（attribute）</strong></p><p>一个非 prop 的标签属性（attribute）是指传向一个组件，但是该组件并没有定义相应的 prop 来接收这个属性（attribute）。</p><p>因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的属性（attribute），而这些属性（attribute）会被添加到这个组件的根元素上。</p><p>例如，想象一下你通过一个 Bootstrap 插件使用了一个第三方的 <code>&lt;bootstrap-date-input&gt;</code> 组件，这个插件需要在其 <code>&lt;input&gt;</code> 上用到一个 <code>data-date-picker</code> 属性（attribute）。我们可以将这个标签属性（attribute）添加到你的组件实例上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">bootstrap-date-input</span> <span class="hljs-attr">data-date-picker</span>=<span class="hljs-string">&quot;activated&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bootstrap-date-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后这个 <code>data-date-picker=&quot;activated&quot;</code> 属性（attribute）就会自动添加到 <code>&lt;bootstrap-date-input&gt;</code> 的根元素上。</p><p>想象一下 <code>&lt;bootstrap-date-input&gt;</code> 的模板是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了给我们的日期选择器插件定制一个主题，我们可能需要像这样添加一个特别的类名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">bootstrap-date-input</span></span><br><span class="hljs-tag"><span class="hljs-attr">data-date-picker</span>=<span class="hljs-string">&quot;activated&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date-picker-theme-dark&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bootstrap-date-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这种情况下，我们定义了两个不同的 <code>class</code> 的值：</p><ul><li><code>form-control</code>，这是在组件的模板内设置好的</li><li><code>date-picker-theme-dark</code>，这是从组件的父级传入的</li></ul><p>对于绝大多数标签属性（attribute）来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 <code>type=&quot;text&quot;</code> 就会替换掉 <code>type=&quot;date&quot;</code> 并把它破坏！庆幸的是，<code>class</code> 和 <code>style</code> 属性（attribute）会稍微智能一些，即两边的值会被合并起来，从而得到最终的值：<code>form-control date-picker-theme-dark</code>。</p><p>如果你<strong>不希望</strong>组件的根元素继承标签属性（attribute），你可以在组件的选项中设置 <code>inheritAttrs: false</code>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>    <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>这尤其适合配合实例的 <code>$attrs</code> 属性（property）使用，该属性（property）包含了传递给一个组件的属性（attribute）名和属性（attribute）值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;Enter your username&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有了 <code>inheritAttrs: false</code> 和 <code>$attrs</code>，你就可以手动决定这些 attribute 会被赋予哪个元素。在撰写<a href="https://v2.cn.vuejs.org/v2/style-guide/#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%90%8D-%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90">基础组件</a>的时候是常会用到的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>    <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;label&gt;</span><br><span class="hljs-string">      &#123;&#123; label &#125;&#125;</span><br><span class="hljs-string">      &lt;input</span><br><span class="hljs-string">        v-bind=&quot;$attrs&quot;</span><br><span class="hljs-string">        v-bind:value=&quot;value&quot;</span><br><span class="hljs-string">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span><br><span class="hljs-string">      &gt;</span><br><span class="hljs-string">    &lt;/label&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>注意 <code>inheritAttrs: false</code> 选项<strong>不会</strong>影响 <code>style</code> 和 <code>class</code> 的绑定。</p></blockquote><p>这个模式允许你在使用基础组件的时候更像是使用原始的 HTML 元素，而不会担心哪个元素是真正的根元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-input</span></span><br><span class="hljs-tag"><span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Username:&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">required</span></span><br><span class="hljs-tag"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter your username&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Porp 单向数据流</strong></p><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不应该</strong>在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p><p>这里有两种常见的试图变更一个 prop 的情形：</p><ol><li><p>**这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。**在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialCounter</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>**这个 prop 以一种原始的值传入且需要进行转换。**在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;size&#x27;</span>],<br><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-attr">normalizedSize</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身<em>将会影响</em>到父组件的状态。</p><h3 id="自定义事件">自定义事件</h3><p>在实际开发中，在父组件中通过 AJAX 请求获取到了数据，使用一些子组件来渲染页面，这是非常简洁和高效的。对于子组件来说，它只有模板和样式，需要的数据可以通过 <code>Props</code> 传递进来，对于数据的更新操作也是子组件的需要；对于父组件来说，一个数据可能会分发给多个子组件，为了数据的安全性，它不可能把直接操作数据的权限交给子组件，避免导致某个子组件更新数据影响其他子组件的状态。</p><blockquote><p>切记，组件不一定是你开发的，大概率造轮子的人不是你。如果子组件中可以修改父组件的数据，当你使用这个组件时，将数据交给了它，它莫名改了你的数据，而你不知道在哪修改的，想象一下，你是不会允许这种事情发生的。</p></blockquote><p>是故，Vue 将变更父组件状态的操作规定定义在父组件中，通过<strong>自定义事件</strong>将方法交给子组件，子组件通过提交这个事件来更新父组件的状态，这样父组件可以保证数据更新时的安全性，子组件只需要知道触发事件可以达到想要的操作即可。</p><p>例如我们可能会引入一个辅助功能来放大子组件的字号。在其父组件中，我们可以通过添加一个 <code>postFontSize</code> 数据属性（property）来支持这个功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">posts</span>: [<span class="hljs-comment">/* ... */</span>],<br>        <span class="hljs-attr">postFontSize</span>: <span class="hljs-number">1</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过自定义属性（attribute）将数据传递子组件中，并在子组件上绑定一个自定义事件<code>enlarge-text</code>，父级组件可以像处理 native DOM 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件，当触发这个事件时，我们通过更新 <code>postFontSize</code> 去影响所有的子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:post</span>=<span class="hljs-string">&quot;post&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-bind:fontSize</span>=<span class="hljs-string">&quot;postFontSize&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-on:enlarge-text</span>=<span class="hljs-string">&quot;postFontSize += 0.1&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们在每个子组件正文之前添加一个按钮来放大字号，当点击这个按钮时，我们需要告诉父级组件放大所有子组件的文本，子组件可以通过调用内建的 <a href="https://v2.cn.vuejs.org/v2/api/#vm-emit"><strong><code>$emit</code></strong> 方法</a>并传入事件名称来触发一个事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;fontSize&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;blog-post&quot; </span><br><span class="hljs-string">    :style=&quot;&#123; fontSize: fontSize + &#x27;em&#x27; &#125;&quot;&gt;</span><br><span class="hljs-string">&lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span><br><span class="hljs-string">&lt;button v-on:click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;</span><br><span class="hljs-string">Enlarge text</span><br><span class="hljs-string">&lt;/button&gt;</span><br><span class="hljs-string">&lt;div v-html=&quot;post.content&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/div&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>有了 Vue 提供的自定义事件功能，数据的修改权最后还是归于父组件，自定义事件可以像普通的事件一样绑定一个用于接收数据回调函数。</p><p><strong><code>vm.$emit(eventName, […args])</code></strong>：触发当前实例上的事件。附加参数都会传给监听器回调。</p><p>有的时候用一个事件来传递一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span>&gt;</span><br>  Enlarge text<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag"><span class="hljs-attr">...</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:enlarge-text</span>=<span class="hljs-string">&quot;postFontSize += $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者，如果这个事件处理函数是一个方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blog-post</span></span><br><span class="hljs-tag"><span class="hljs-attr">...</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:enlarge-text</span>=<span class="hljs-string">&quot;onEnlargeText&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么这个值将会作为第一个参数传入这个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">onEnlargeText</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">enlargeAmount</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">postFontSize</span> += enlargeAmount<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义事件名</strong></p><p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。举个例子，如果触发一个 camelCase 名字的事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;myEvent&#x27;</span>)<br></code></pre></td></tr></table></figure><p>则监听这个名字的 kebab-case 版本是不会有任何效果的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 没有效果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-on:my-event</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性（property）名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>，导致 <code>myEvent</code> 不可能被监听到。</p><p>因此，我们推荐你<strong>始终使用 kebab-case 的事件名</strong>。</p><h4 id="在组件上使用-v-model">在组件上使用 <code>v-model</code></h4><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;searchText = $event.target.value&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p>当用在组件上时，<code>v-model</code> 则会这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;searchText = $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><ul><li>将其 <code>value</code> 属性（attribute）绑定到一个名叫 <code>value</code> 的 prop 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><p>写成代码之后是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;custom-input&#x27;</span>, &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;value&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;input</span><br><span class="hljs-string">v-bind:value=&quot;value&quot;</span><br><span class="hljs-string">v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span><br><span class="hljs-string">&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> 属性（attribute）用于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input/checkbox#Value">不同的目的</a>。<code>model</code> 选项可以用来避免这样的冲突：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;base-checkbox&#x27;</span>, &#123;<br>    <span class="hljs-attr">model</span>: &#123;<br>        <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;checked&#x27;</span>,<br>        <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-attr">checked</span>: <span class="hljs-title class_">Boolean</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;input</span><br><span class="hljs-string">type=&quot;checkbox&quot;</span><br><span class="hljs-string">v-bind:checked=&quot;checked&quot;</span><br><span class="hljs-string">v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span><br><span class="hljs-string">&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>model</code></strong>：允许一个自定义组件在使用 <code>v-model</code> 时定制 prop 和 event。默认情况下，一个组件上的 <code>v-model</code> 会把 <code>value</code> 用作 prop 且把 <code>input</code> 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 <code>value</code> prop 来达到不同的目的。使用 <code>model</code> 选项可以回避这些情况产生的冲突。</p><p>类型：<code>&#123; prop?: string, event?: string &#125;</code></p></blockquote><p>现在在这个组件上使用 <code>v-model</code> 的时候：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lovingVue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-checkbox</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>lovingVue</code> 的值将会传入这个名为 <code>checked</code> 的 prop。同时当 <code>&lt;base-checkbox&gt;</code> 触发一个 <code>change</code> 事件并附带一个新的值的时候，这个 <code>lovingVue</code> 的属性（property）将会被更新。</p><p>当你使用这个子组件时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;some value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-checkbox</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-checkbox</span> </span><br><span class="hljs-tag"><span class="hljs-attr">:checked</span>=<span class="hljs-string">&quot;foo&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;change&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;some value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-checkbox</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意你仍然需要在组件的 <code>props</code> 选项里声明 <code>checked</code> 这个 prop。</p></blockquote><h4 id="将原生事件绑定到组件">将原生事件绑定到组件</h4><p>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-input</span> </span><br><span class="hljs-tag"><span class="hljs-attr">v-on:focus.native</span>=<span class="hljs-string">&quot;onFocus&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataValue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-input</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在有的时候这是很有用的，不过在你尝试监听一个类似 <code>&lt;input&gt;</code> 的非常特定的元素时，这并不是个好主意。比如上述 <code>&lt;base-input&gt;</code> 组件可能做了如下重构，所以根元素实际上是一个 <code>&lt;label&gt;</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    &#123;&#123; label &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;value&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这时，父级的 <code>.native</code> 监听器将静默失败。它不会产生任何报错，但是 <code>onFocus</code> 处理函数不会如你预期地被调用。</p><p>为了解决这个问题，Vue 提供了一个 <code>$listeners</code> 属性（property），它是一个对象，里面包含了作用在这个组件上的所有监听器。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">focus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-attr">input</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>vm.$listeners</code></strong>：包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器。</p></blockquote><p>有了这个 <code>$listeners</code> 属性（property），你就可以配合 <code>v-on=&quot;$listeners&quot;</code> 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 <code>&lt;input&gt;</code> 的你希望它也可以配合 <code>v-model</code> 工作的组件来说，为这些监听器创建一个类似下述 <code>inputListeners</code> 的计算属性通常是非常有用的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>    <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-attr">inputListeners</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> vm = <span class="hljs-variable language_">this</span><br>            <span class="hljs-comment">// `Object.assign` 将所有的对象合并为一个新对象</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,<br><span class="hljs-comment">// 我们从父级添加所有的监听器</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$listeners</span>,<br><span class="hljs-comment">// 然后我们添加自定义监听器，</span><br>  <span class="hljs-comment">// 或覆写一些监听器的行为</span><br>&#123;<br><span class="hljs-comment">// 这里确保组件配合 `v-model` 的工作</span><br><span class="hljs-attr">input</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>vm.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;label&gt;</span><br><span class="hljs-string">&#123;&#123; label &#125;&#125;</span><br><span class="hljs-string">&lt;input</span><br><span class="hljs-string">v-bind=&quot;$attrs&quot;</span><br><span class="hljs-string">v-bind:value=&quot;value&quot;</span><br><span class="hljs-string">v-on=&quot;inputListeners&quot;&gt;</span><br><span class="hljs-string">&lt;/label&gt; `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>现在 <code>&lt;base-input&gt;</code> 组件是一个<strong>完全透明的包裹器</strong>了，也就是说它可以完全像一个普通的 <code>&lt;input&gt;</code> 元素一样使用了：所有跟它相同的 attribute 和监听器都可以工作，不必再使用 <code>.native</code> 监听器。</p><p><strong><code>.sync</code> 修饰符</strong></p><blockquote><p>2.3.0+ 新增</p></blockquote><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源。</p><p>这也是为什么我们推荐以 <code>update:myPropName</code> 的模式触发事件取而代之。举个例子，在一个包含 <code>title</code> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:title&#x27;</span>, newTitle)<br></code></pre></td></tr></table></figure><p>然后父组件可以监听那个事件并根据需要更新一个本地的数据 property。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text-document</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;doc.title&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">v-on:update:title</span>=<span class="hljs-string">&quot;doc.title = $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text-document</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了方便起见，我们为这种模式提供一个缩写，即 <code>.sync</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text-document</span> <span class="hljs-attr">v-bind:title.sync</span>=<span class="hljs-string">&quot;doc.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text-document</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> <strong>不能</strong>和表达式一起使用 (例如 <code>v-bind:title.sync=”doc.title + ‘!’”</code> 是无效的)。取而代之的是，你只能提供你想要绑定的属性（property）名，类似 <code>v-model</code>。</p><p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text-document</span> <span class="hljs-attr">v-bind.sync</span>=<span class="hljs-string">&quot;doc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text-document</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样会把 <code>doc</code> 对象中的每一个属性（property）（如 <code>title</code>）都作为一个独立的 prop 传进去，然后各自添加用于更新的 <code>v-on</code> 监听器。</p><blockquote><p>注意：将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=”&#123; title: doc.title &#125;”</code>，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p></blockquote><h3 id="插槽">插槽</h3><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo-alert-box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#f3beb8</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f09898</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span> Something bad happened. <span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;alert-box&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;`</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>希望 Vue 会渲染出这样的东西：</p><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/image-20231219195803787.png" alt="image-20231219195803787"></p><p>幸好，Vue 自定义的 <code>&lt;slot&gt;</code> 元素让这变得非常简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;alert-box&#x27;</span>, &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div class=&quot;demo-alert-box&quot;&gt;</span><br><span class="hljs-string">&lt;strong&gt;Error!&lt;/strong&gt;</span><br><span class="hljs-string">&lt;slot&gt;&lt;/slot&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>如你所见，我们只要在需要的地方加入插槽就行了。</p><p>如果 <code>&lt;navigation-link&gt;</code> 的 <code>template</code> 中<strong>没有</strong>包含一个 <code>&lt;slot&gt;</code> 元素，则该组件起始标签和结束标签之间的任何内容都会被抛弃。</p><blockquote><p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 <code>v-slot</code> 指令)。它取代了 <code>slot</code> 和 <code>slot-scope</code> 这两个目前已被废弃但未被移除且仍在<a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">文档中</a>的 attribute。新语法的由来可查阅这份 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md">RFC</a>。</p></blockquote><p>Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Web Components 规范草案</a>，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口。</p><p><strong>默认内容</strong></p><p>有时为一个插槽设置具体的默认内容是很有用的，它只会在没有提供内容的时候被渲染。例如在一个 <code>&lt;submit-button&gt;</code> 组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可能希望这个 <code>&lt;button&gt;</code> 内绝大多数情况下都渲染文本“Submit”。为了将“Submit”作为后备内容，我们可以将它放在 <code>&lt;slot&gt;</code> 标签内：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在当我在一个父级组件中使用 <code>&lt;submit-button&gt;</code> 并且不提供任何插槽内容时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">submit-button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">submit-button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后备内容“Submit”将会被渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是如果我们提供内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">submit-button</span>&gt;</span><br>    Save<br><span class="hljs-tag">&lt;/<span class="hljs-name">submit-button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则这个提供的内容将会被渲染从而取代后备内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    Save<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="具名插槽">具名插槽</h4><p>有时我们需要多个插槽。例如对于一个带有如下模板的 <code>&lt;base-layout&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 我们希望把页头放这里 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 我们希望把主要内容放这里 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 我们希望把页脚放这里 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于这样的情况，<code>&lt;slot&gt;</code> 元素有一个特殊的 attribute：<code>name</code>。这个 attribute 可以用来定义额外的插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在 <code>&lt;template&gt;</code> 元素中的所有内容都将会被传入相应的插槽。任何没有被包裹在带有 <code>v-slot</code> 的 <code>&lt;template&gt;</code> 中的内容都会被视为默认插槽的内容。</p><p>然而，如果你希望更明确一些，仍然可以在一个 <code>&lt;template&gt;</code> 中包裹默认插槽的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>任何一种写法都会渲染出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意 <strong><code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code> 上</strong>（<a href="#v-slot_other">只有一种例外情况</a>），这一点和已经废弃的 <a href="#%E5%BA%9F%E5%BC%83%E8%AF%AD%E6%B3%95%EF%BC%88v2%E6%94%AF%E6%8C%81%EF%BC%8Cv3%E5%BA%9F%E5%BC%83%EF%BC%89"><code>slot</code> 属性（attribute）</a> 不同。</p><h4 id="作用域">作用域</h4><p>当你想在一个插槽中使用数据时，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigation-link</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/profile&quot;</span>&gt;</span><br>    Logged in as &#123;&#123; user.name &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">navigation-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该插槽跟模板的其它地方一样可以访问相同的实例 property (也就是相同的“作用域”)，而<strong>不能</strong>访问 <code>&lt;navigation-link&gt;</code> 的作用域。例如 <code>url</code> 是访问不到的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigation-link</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/profile&quot;</span>&gt;</span><br>    Clicking here will send you to: &#123;&#123; url &#125;&#125;<br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">这里的 url 会是 undefined，因为其 (指该插槽的) 内容是</span><br><span class="hljs-comment">传递给 &lt;navigation-link&gt; 的而不是</span><br><span class="hljs-comment">在 &lt;navigation-link&gt; 组件 内部 定义的。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">navigation-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作为一条规则，请记住：</p><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><p><a name="v-slot_other"></a></p><p><strong>作用域插槽</strong></p><blockquote><p>自 2.6.0 起有所更新。已废弃的使用 <code>slot-scope</code> 属性（attribute）的语法在<a href="#%E5%BA%9F%E5%BC%83%E8%AF%AD%E6%B3%95%EF%BC%88v2%E6%94%AF%E6%8C%81%EF%BC%8Cv3%E5%BA%9F%E5%BC%83%EF%BC%89">这里</a>。</p></blockquote><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。例如，设想一个带有如下模板的 <code>&lt;current-user&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>&#123;&#123; user.lastName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可能想换掉备用内容，用名而非姓来显示。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span>&gt;</span><br>    &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而上述代码不会正常工作，因为只有 <code>&lt;current-user&gt;</code> 组件可以访问到 <code>user</code>，而我们提供的内容是在父级渲染的。</p><p>为了让 <code>user</code> 在父级的插槽内容中可用，我们可以将 <code>user</code> 作为 <code>&lt;slot&gt;</code> 元素的一个属性（attribute）绑定上去，<code>&lt;current-user&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        &#123;&#123; user.lastName &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的属性（attribute）被称为<strong>插槽 prop</strong>。现在在父级作用域中，我们可以使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        &#123;&#123; slotProps.user.firstName &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们选择将包含所有插槽 prop 的对象命名为 <code>slotProps</code>，但你也可以使用任意你喜欢的名字。</p><p><strong>独占默认插槽的缩写语法</strong></p><p>在上述情况下，当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot</code> 直接用在组件上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>    &#123;&#123; slotProps.user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种写法还可以更简单。就像假定未指明的内容对应默认插槽一样，不带参数的 <code>v-slot</code> 被假定对应默认插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>    &#123;&#123; slotProps.user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意默认插槽的缩写语法<strong>不能</strong>和具名插槽混用，因为它会导致作用域不明确：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 无效，会导致警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>    &#123;&#123; slotProps.user.firstName &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:other</span>=<span class="hljs-string">&quot;otherSlotProps&quot;</span>&gt;</span><br>        slotProps is NOT available here<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只要出现多个插槽，请始终为<em>所有的</em>插槽使用完整的基于 <code>&lt;template&gt;</code> 的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        &#123;&#123; slotProps.user.firstName &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:other</span>=<span class="hljs-string">&quot;otherSlotProps&quot;</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解构插槽 Prop</strong></p><p>作用域插槽的内部工作原理是将你的插槽内容包裹在一个拥有单个参数的函数里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> (<span class="hljs-params">slotProps</span>) &#123;<br>    <span class="hljs-comment">// 插槽内容</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这意味着 <code>v-slot</code> 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。所以在支持的环境下 (<a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9">现代浏览器</a>)，你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E8%A7%A3%E6%9E%84%E5%AF%B9%E8%B1%A1">ES2015 解构</a>来传入具体的插槽 prop，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; user &#125;&quot;</span>&gt;</span><br>    &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样可以使模板更简洁，尤其是在该插槽提供了多个 prop 的时候。它同样开启了 prop 重命名等其它可能，例如将 <code>user</code> 重命名为 <code>person</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; user: person &#125;&quot;</span>&gt;</span><br>    &#123;&#123; person.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你甚至可以定义默认内容，用于插槽 prop 是 undefined 的情形：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;</span>&gt;</span><br>    &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>动态插槽名</strong></p><blockquote><p>2.6.0 新增</p></blockquote><p>动态指令参数也可以用在 <code>v-slot</code> 上，来定义动态的插槽名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:</span>[<span class="hljs-attr">dynamicSlotName</span>]&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>具名插槽的缩写</strong></p><blockquote><p>2.6.0 新增</p></blockquote><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然而，和其它指令一样，该缩写只在其有参数的时候才可用。这意味着以下语法是无效的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这样会触发一个警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> #=<span class="hljs-string">&quot;&#123; user &#125;&quot;</span>&gt;</span><br>    &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你希望使用缩写的话，你必须始终以明确插槽名取而代之：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; user &#125;&quot;</span>&gt;</span><br>    &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="其它示例">其它示例</h4><p>**插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容。**这在设计封装数据逻辑同时允许父级组件自定义部分布局的可复用组件时是最有用的。</p><p>例如，我们要实现一个 <code>&lt;todo-list&gt;</code> 组件，它是一个列表且包含布局和过滤逻辑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in filteredTodos&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span> &gt;</span><br>        &#123;&#123; todo.text &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以将每个 todo 作为父级组件的插槽，以此通过父级组件对其进行控制，然后将 <code>todo</code> 作为一个插槽 prop 进行绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in filteredTodos&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span> &gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            我们为每个 todo 准备了一个插槽，</span><br><span class="hljs-comment">            将 `todo` 对象作为一个插槽的 prop 传入。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-bind:todo</span>=<span class="hljs-string">&quot;todo&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 后备内容 --&gt;</span><br>            &#123;&#123; todo.text &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在当我们使用 <code>&lt;todo-list&gt;</code> 组件的时候，我们可以选择为 todo 定义一个不一样的 <code>&lt;template&gt;</code> 作为替代方案，并且可以从子组件获取数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">todo-list</span> <span class="hljs-attr">v-bind:todos</span>=<span class="hljs-string">&quot;todos&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:todo</span>=<span class="hljs-string">&quot;&#123; todo &#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        &#123;&#123; todo.text &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">todo-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这只是作用域插槽用武之地的冰山一角。想了解更多现实生活中的作用域插槽的用法，我们推荐浏览诸如 <a href="https://github.com/Akryum/vue-virtual-scroller">Vue Virtual Scroller</a>、<a href="https://github.com/posva/vue-promised">Vue Promised</a> 和 <a href="https://github.com/LinusBorg/portal-vue">Portal Vue</a> 等库。</p><h4 id="废弃语法（v2支持，v3废弃）">废弃语法（v2支持，v3废弃）</h4><p><strong>带有 <code>slot</code> 属性（attribute）的具名插槽</strong></p><blockquote><p>自 2.6.0 起被废弃。新推荐的语法请查阅<a href="#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">这里</a>。</p></blockquote><p>在 <code>&lt;template&gt;</code> 上使用特殊的 <code>slot</code> 属性（attribute），可以将内容从父级传给具名插槽 (把<a href="#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">这里</a>提到过的 <code>&lt;base-layout&gt;</code> 组件作为示例)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者直接把 <code>slot</code> 属性（attribute）用在一个普通元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里其实还有一个未命名插槽，也就是<strong>默认插槽</strong>，捕获所有未被匹配的内容。上述两个示例的 HTML 渲染结果均为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>带有 <code>slot-scope</code> 属性（attribute）的作用域插槽</strong></p><blockquote><p>自 2.6.0 起被废弃。新推荐的语法请查阅<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F">这里</a>。</p></blockquote><p>在 <code>&lt;template&gt;</code> 上使用特殊的 <code>slot-scope</code> attribute，可以接收传递给插槽的 prop (把<a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F">这里</a>提到过的 <code>&lt;slot-example&gt;</code> 组件作为示例)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot-example</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        &#123;&#123; slotProps.msg &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">slot-example</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>slot-scope</code> 声明了被接收的 prop 对象会作为 <code>slotProps</code> 变量存在于 <code>&lt;template&gt;</code> 作用域中。你可以像命名 JavaScript 函数参数一样随意命名 <code>slotProps</code>。</p><p>这里的 <code>slot=&quot;default&quot;</code> 可以被忽略为隐性写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot-example</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        &#123;&#123; slotProps.msg &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">slot-example</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>slot-scope</code> attribute 也可以直接用于非 <code>&lt;template&gt;</code> 元素 (包括组件)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot-example</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        &#123;&#123; slotProps.msg &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">slot-example</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>slot-scope</code> 的值可以接收任何有效的可以出现在函数定义的参数位置上的 JavaScript 表达式。这意味着在支持的环境下 (<a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">现代浏览器</a>)，你也可以在表达式中使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E8%A7%A3%E6%9E%84%E5%AF%B9%E8%B1%A1">ES2015 解构</a>，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot-example</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123; msg &#125;&quot;</span>&gt;</span><br>        &#123;&#123; msg &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">slot-example</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<a href="#%E5%85%B6%E5%AE%83%E7%A4%BA%E4%BE%8B">这里</a>描述过的 <code>&lt;todo-list&gt;</code> 作为示例，与它等价的使用 <code>slot-scope</code> 的代码是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">todo-list</span> <span class="hljs-attr">v-bind:todos</span>=<span class="hljs-string">&quot;todos&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123; todo &#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        &#123;&#123; todo.text &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">todo-list</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态组件">动态组件</h3><p>有的时候，在不同组件之间进行动态切换是非常有用的，比如在一个多标签的界面里：</p><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/a4db0ce6-4fab-4a6c-bf0e-0ba121f0e40f.gif" alt="a4db0ce6-4fab-4a6c-bf0e-0ba121f0e40f"></p><p>上述内容可以通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> attribute 来实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;&#123;id, name&#125; in componentList&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;currentTabComponent == name ? &#x27;dynamic-component-demo-tab-button-active&#x27;: &#x27;&#x27; &quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dynamic-component-demo-tab-button&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;currentTabComponent = name&quot;</span>&gt;</span><br>        &#123;&#123; name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Home</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>, <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div class=&quot;dynamic-component-demo-tab&quot;&gt;Home component&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Posts</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Posts&quot;</span>, <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div class=&quot;dynamic-component-demo-tab&quot;&gt;Posts component&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Archive</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Archive&quot;</span>, <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div class=&quot;dynamic-component-demo-tab&quot;&gt;Archive component&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">currentTabComponent</span>: <span class="hljs-string">&quot;Home&quot;</span>,<br>        <span class="hljs-attr">componentList</span>: [<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Posts&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Archive&quot;</span>&#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">components</span>:&#123;<br>        <span class="hljs-title class_">Posts</span>, <span class="hljs-title class_">Home</span>, <span class="hljs-title class_">Archive</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.dynamic-component-demo-tab-button</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#f0f0f0</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">1px</span>;<br>&#125;<br><span class="hljs-selector-class">.dynamic-component-demo-tab-button-active</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#e0e0e0</span>;<br>&#125;<br><span class="hljs-selector-class">.dynamic-component-demo-tab</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.dynamic-component-demo-tab-button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#e0e0e0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，Vue 特殊属性 <code>is</code> 可以是当前 Vue 实例中已注册组件的名字，也可以通过 <code>v-bind</code> 传入一个组件的选项对象，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;&#123;template: `&lt;div class=&#x27;dynamic-component-demo-tab&#x27;&gt;Home component&lt;/div&gt;`&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><strong><code>is</code></strong>：用于动态组件且基于 <a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">DOM 内模板的限制</a>来工作。</p><p>请留意，这个属性（attribute）可以用于常规 HTML 元素，但这些元素将被视为组件，这意味着所有的属性（attribute）<strong>都会作为 DOM attribute 被绑定</strong>。对于像 <code>value</code> 这样的属性（property），若想让其如预期般工作，你需要使用 <a href="https://v2.cn.vuejs.org/v2/api/#v-bind"><code>.prop</code> 修饰器</a>。</p><p>有些 HTML 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部。</p><p>这会导致我们使用这些有约束条件的元素时遇到一些问题。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blog-post-row</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blog-post-row</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个自定义组件 <code>&lt;blog-post-row&gt;</code> 会被作为无效的内容提升到外部，并导致最终渲染结果出错。幸好这个特殊的 <code>is</code> 属性（attribute）给了我们一个变通的办法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;blog-post-row&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是<strong>如果我们从以下来源使用模板的话，这条限制是<em>不存在</em>的</strong>：</p><ul><li>字符串 (例如：<code>template: '...'</code>)</li><li><a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件 (<code>.vue</code>)</a></li><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li></ul><h4 id="使用-keep-alive-缓存组件">使用 <code>keep-alive</code> 缓存组件</h4><p>我们在上面一个多标签的界面中使用 <code>is</code> 属性（attribute）来切换不同的组件：当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重新渲染导致的性能问题。例如我们来展开说一说这个多标签界面：</p><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/dfe979d1-c9cf-49df-a8fc-e5435f9df275.gif" alt="dfe979d1-c9cf-49df-a8fc-e5435f9df275"></p><p>你会注意到，如果你选择了一篇文章，切换到 <em>Archive</em> 标签，然后再切换回 <em>Posts</em>，是不会继续展示你之前选择的文章的。这是因为你每次切换新标签的时候，Vue 都创建了一个新的 <code>currentTabComponent</code> 实例。</p><p>重新创建动态组件的行为通常是非常有用的，但是在这个案例中，我们更希望那些标签的组件实例能够被在它们第一次被创建的时候缓存下来。为了解决这个问题，我们可以用一个 <code>&lt;keep-alive&gt;</code> 元素将其动态组件包裹起来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/d79324e0-a522-4822-8691-f9b3ea9d2813.gif" alt="d79324e0-a522-4822-8691-f9b3ea9d2813"></p><p>现在这个 <em>Posts</em> 标签保持了它的状态 (被选中的文章) 甚至当它未被渲染时也是如此。</p><blockquote><p>注意：这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字，不论是通过组件的 <code>name</code> 选项还是局部/全局注册。</p></blockquote><h3 id="异步组件">异步组件</h3><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;async-example&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 向 `resolve` 回调传递组件定义</span><br>        <span class="hljs-title function_">resolve</span>(&#123;<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span><br>        &#125;)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>如你所见，这个工厂函数会收到一个 <code>resolve</code> 回调，这个回调函数会在你从服务器得到组件定义的时候被调用。你也可以调用 <code>reject(reason)</code> 来表示加载失败。这里的 <code>setTimeout</code> 是为了演示用的，如何获取组件取决于你自己。一个推荐的做法是将异步组件和 <a href="https://webpack.docschina.org/guides/code-splitting/">webpack 的 code-splitting 功能</a>一起配合使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;async-webpack-example&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>    <span class="hljs-comment">// 这个特殊的 `require` 语法将会告诉 webpack</span><br>    <span class="hljs-comment">// 自动将你的构建代码切割成多个包，这些包</span><br>    <span class="hljs-comment">// 会通过 Ajax 请求加载</span><br>    <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;./my-async-component&#x27;</span>], resolve)<br>&#125;)<br></code></pre></td></tr></table></figure><p>你也可以在工厂函数中返回一个 <code>Promise</code>，所以把 webpack 2 和 ES2015 语法加在一起，我们可以这样使用动态导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<br>    <span class="hljs-string">&#x27;async-webpack-example&#x27;</span>,<br>    <span class="hljs-comment">// 这个动态导入会返回一个 `Promise` 对象。</span><br>    <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./my-async-component&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure><p>当使用<a href="https://v2.cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">局部注册</a>的时候，你也可以直接提供一个返回 <code>Promise</code> 的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-string">&#x27;my-component&#x27;</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./my-async-component&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>如果你是一个 <strong>Browserify</strong> 用户同时喜欢使用异步组件，很不幸这个工具的作者<a href="https://github.com/substack/node-browserify/issues/58#issuecomment-21978224">明确表示</a>异步加载“并不会被 Browserify 支持”，至少官方不会。Browserify 社区已经找到了<a href="https://github.com/vuejs/v2.vuejs.org/issues/620">一些变通方案</a>，这些方案可能会对已存在的复杂应用有帮助。对于其它的场景，我们推荐直接使用 webpack，以拥有内置的头等异步支持。</p></blockquote><p><strong>处理加载状态</strong></p><blockquote><p>2.3.0+ 新增</p></blockquote><p>这里的异步组件工厂函数也可以返回一个如下格式的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">AsyncComponent</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>    <span class="hljs-comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./MyComponent.vue&#x27;</span>),<br>    <span class="hljs-comment">// 异步组件加载时使用的组件</span><br>    <span class="hljs-attr">loading</span>: <span class="hljs-title class_">LoadingComponent</span>,<br>    <span class="hljs-comment">// 加载失败时使用的组件</span><br>    <span class="hljs-attr">error</span>: <span class="hljs-title class_">ErrorComponent</span>,<br>    <span class="hljs-comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br>    <span class="hljs-attr">delay</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-comment">// 如果提供了超时时间且组件加载也超时了，</span><br>    <span class="hljs-comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>注意如果你希望在 <a href="https://github.com/vuejs/vue-router">Vue Router</a> 的路由组件中使用上述语法的话，你必须使用 Vue Router 2.4.0+ 版本。</p></blockquote><h2 id="Vue-生命周期">Vue 生命周期</h2><p>Vue.js 实例的生命周期从创建到销毁经历了一系列的步骤，以下是整个过程中主要的阶段：</p><ol><li><p><strong>初始化阶段（Initialization）:</strong></p><p>创建 Vue 实例时，会进行初始化配置，包括合并选项、初始化生命周期、初始化事件系统、初始化渲染函数等。</p></li><li><p><strong>模板编译阶段（Template Compilation）:</strong></p><p>如果 Vue 实例的模板是通过字符串提供的，Vue 会将模板编译成渲染函数。</p></li><li><p><strong>挂载阶段（Mounting）:</strong></p><p>将编译好的模板渲染成虚拟 DOM，并挂载到实例的 <code>$el</code> 上。</p></li><li><p><strong>更新阶段（Updating）:</strong></p><p>当实例的响应式数据发生变化时，触发重新渲染。</p></li><li><p><strong>销毁阶段（Destroying）:</strong></p><p>当你调用 <code>vm.$destroy()</code> 时，Vue 实例会进入销毁阶段。</p><p>实例的销毁过程包括解除数据观测、取消事件订阅、解绑指令、销毁子组件等清理工作。</p></li></ol><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><p>比如 <a href="https://v2.cn.vuejs.org/v2/api/#created"><code>created</code></a> 钩子可以用来在一个实例被创建之后执行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// `this` 指向 vm 实例</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a is: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-comment">// =&gt; &quot;a is: 1&quot;</span><br></code></pre></td></tr></table></figure><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <a href="https://v2.cn.vuejs.org/v2/api/#mounted"><code>mounted</code></a>、<a href="https://v2.cn.vuejs.org/v2/api/#updated"><code>updated</code></a> 和 <a href="https://v2.cn.vuejs.org/v2/api/#destroyed"><code>destroyed</code></a>。生命周期钩子的 <code>this</code> 上下文指向调用它的 Vue 实例。</p><blockquote><p>不要在选项 property 或回调上使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>，比如 <code>created: () =&gt; console.log(this.a)</code> 或 <code>vm.$watch('a', newValue =&gt; this.myMethod())</code>。因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 <code>Uncaught TypeError: Cannot read property of undefined</code> 或 <code>Uncaught TypeError: this.myMethod is not a function</code> 之类的错误。</p></blockquote><p>这些钩子函数可以让你在不同阶段执行自定义的逻辑。以下是 Vue.js 实例生命周期中的主要钩子函数：</p><ol><li><p><strong>beforeCreate:</strong></p><p>在实例初始化之后，数据观测 (data observation) 和 event/watcher 事件配置之前被调用。</p><p>此时实例的选项对象已经被处理，但是实例上的数据和方法都还没初始化。</p></li><li><p><strong>created:</strong></p><p>在实例创建完成后被立即调用。</p><p>在这一阶段，实例已完成以下的配置：数据观测 (data observation)，属性和方法的运算，watch/event 事件回调。</p></li><li><p><strong>beforeMount:</strong></p><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>在该钩子函数中，虚拟 DOM 已经创建，但尚未挂载到页面上。</p></li><li><p><strong>mounted:</strong></p><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</p><p>如果 <code>vm.$el</code> 包含了子组件，在 mounted 钩子函数中，子组件的 <code>mounted</code> 钩子函数也会被调用。</p></li><li><p><strong>beforeUpdate:</strong></p><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</p><p>在这一阶段，你可以对更新前后的数据做对比。</p></li><li><p><strong>updated:</strong></p><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁后调用。</p><p>如果你在钩子函数中操作 DOM，这里是你更改数据后的最佳时机。</p></li><li><p><strong>beforeDestroy:</strong></p><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>在这一阶段，你可以执行一些清理工作，比如清除定时器或取消订阅。</p></li><li><p><strong>destroyed:</strong></p><p>实例销毁后调用。</p><p>在这一阶段，实例的所有指令和事件监听器都已被解绑，所有子实例也都已经被销毁。</p></li></ol><p>以上是 Vue.js 实例的主要生命周期钩子函数。在实例的整个生命周期中，它们会按照一定的顺序被调用。在销毁实例时，你可以手动调用 <code>vm.$destroy()</code> 方法，它会触发 beforeDestroy 和 destroyed 钩子函数。这样的操作通常是在手动销毁实例时使用，正常情况下 Vue.js 会在适当的时机自动管理实例的生命周期。</p><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p><p><img src="/2023/11/29/vue-2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/assets/Vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA.png" alt="Vue 生命周期图示"></p><h2 id="单文件组件">单文件组件</h2><p>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue(&#123; el: '#container '&#125;)</code> 在每个页面内指定一个容器元素。</p><p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p><ul><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript，而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components (单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p><p>这是一个文件名为 <code>Hello.vue</code> 的简单实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;p&gt;&#123;&#123; greeting &#125;&#125; World!&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    module.exports = &#123;<br>        data: function() &#123;<br>            return &#123;<br>                greeting: &quot;Hello&quot;<br>            &#125;;<br>        &#125;<br>    &#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>    p &#123;<br>        font-size: 2em;<br>        text-align: center;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>现在我们获得：</p><ul><li><a href="https://github.com/vuejs/awesome-vue#source-code-editing">完整语法高亮</a></li><li><a href="https://webpack.js.org/concepts/modules/#what-is-a-webpack-module">CommonJS 模块</a></li><li><a href="https://vue-loader.vuejs.org/zh-cn/features/scoped-css.html">组件作用域的 CSS</a></li></ul><p>正如我们说过的，我们可以使用预处理器来构建简洁和功能更丰富的组件，比如 Pug，Babel (with ES2015 modules)，和 Stylus。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template lang=&quot;jade&quot;&gt;<br>div<br>p &#123;&#123; greeting &#125;&#125; World!<br>OtherComponent<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import OtherComponent from &#x27;./OtherComponent.vue&#x27;<br>    export default &#123;<br>        components: &#123;<br>            OtherComponent<br>        &#125;,<br>        data () &#123;<br>            return &#123;<br>                greeting: &#x27;Hello&#x27;<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;stylus&quot; scoped&gt;<br>p<br>font-size 2em<br>text-align center<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这些特定的语言只是例子，你可以只是简单地使用 Babel，TypeScript，SCSS，PostCSS - 或者其他任何能够帮助你提高生产力的预处理器。如果搭配 <code>vue-loader</code> 使用 webpack，它也能为 CSS Modules 提供头等支持。</p><h3 id="怎么看待关注点分离？">怎么看待关注点分离？</h3><p>一个重要的事情值得注意，**关注点分离不等于文件类型分离。**在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。</p><p>即便你不喜欢单文件组件，你仍然可以把 JavaScript、CSS 分离成独立的文件然后做到热重载和预编译。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- my-component.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This will be pre-compiled<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./my-component.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./my-component.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>渐进式框架（Progressive Framework）是指一种软件开发的方法或框架，它允许开发人员逐步构建和改进应用程序，而不必一次性完成所有功能。这种方法的目标是通过逐步添加新的功能、组件或模块，使应用程序逐渐完善，并且在整个开发过程中都是可用和可测试的。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>dcloud 的产品有 HBuilderX、uni-app。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Mustache是一种轻量级的模板语法，用于在HTML、XML、JavaScript等文件中动态地渲染数据。Mustache不依赖特定的编程语言，因此可以在多种编程语言中使用。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>MVVM（Model-View-ViewModel）是一种软件架构模式，用于设计和实现用户界面（UI）。它是基于MVC（Model-View-Controller）模式的演变，旨在解决MVC模式中视图和模型之间的紧耦合问题。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>模板语法是一种用于定义和呈现动态内容的文本模板的语法规则。模板通常包含占位符、控制结构和表达式，这些元素允许在运行时插入具体的数据或执行逻辑。<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>单行表达式通常是指在编程语言中，一条语句中包含的逻辑、计算或操作都在一行内完成。这种表达式的目标是简洁而紧凑，以便更容易理解和阅读。<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>拥有状态行为的对象指的是具有一些特定状态和相关行为的对象，通常不仅仅是数据的容器。<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>XSS（Cross-Site Scripting）攻击是一种Web应用程序安全漏洞，攻击者通过注入恶意脚本（通常是JavaScript代码）到Web页面中，使得用户在浏览器中执行这些恶意脚本。这种攻击允许攻击者在受害者的浏览器中执行恶意操作，例如窃取用户的登录凭证、篡改页面内容或进行其他恶意活动。<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>单页面应用程序（Single Page Application，SPA）是一种Web应用程序架构，它使用一张单一的HTML页面，通过异步加载页面所需的内容，而不是每次用户导航时都重新加载整个页面。SPAs借助JavaScript、AJAX（Asynchronous JavaScript and XML）等技术，通过在后台与服务器进行数据交互，动态地更新页面内容，实现用户与应用程序之间的流畅交互。<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>Lodash 是一个流行的 JavaScript 工具库，提供了许多实用的函数和方法，用于简化 JavaScript 编程中的常见任务。它通过提供一组模块化、高性能、易于使用的功能，帮助开发者更便捷地进行数组操作、对象操作、函数式编程、集合操作、字符串操作等。<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境中进行 HTTP 请求。它是一个轻量、简单、灵活的工具，使得在前端和后端之间进行数据交互变得更加容易。<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>Promise 是 JavaScript 中用于处理异步操作的对象。它表示一个在未来可能会完成或失败的操作，具体是一个异步操作的最终结果（或错误）。<a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>在计算机科学和软件开发领域，组件（Component）是指一个独立、可重用、可替换的软件单元，它可以通过接口与其他组件进行交互。组件化是一种软件设计和开发的方法，旨在提高代码的可维护性、可扩展性和可重用性。<a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 介绍</title>
    <link href="/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1>Vue 介绍</h1><blockquote><p>本文编写时间为 2023-11-29，可能存在过期内容，仅供参考。最新数据请访问 官方文档。</p></blockquote><span id="more"></span><h2 id="什么是-Vue？">什么是 Vue？</h2><p>Vue（读音 /vjuː/，类似于 <strong>view</strong>）是一套用于构建用户界面的 **渐进式框架 **。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与 现代化的工具链 以及各种 支持类库 结合使用时，Vue 也完全能够为复杂的 <strong>单页面应用</strong> 提供驱动。（<a href="https://v2.cn.vuejs.org/">Vue 2 的介绍</a>）</p><p>Vue（发音为 /vjuː/，类似 <strong>view</strong>）是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。（<a href="https://cn.vuejs.org/">Vue 3 的介绍</a>）</p><p>下面是 <a href="https://v2.cn.vuejs.org/">Vue 2 官网</a>的入门介绍视频：<strong>《WHY VUE.JS?》</strong>，Vue 3 就没有了。</p><p><video controls src="./assets/%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91%E4%BA%91.mp4"></video></p><p>上面介绍视频出现了多个新概念：渐进式框架、组件、响应式、双向数据绑定、指令（v-for、v-if）、computed（计算属性）、单文件组件。其中 <code>@click</code> 是指令 <code>v-on:click</code> 的简写，测试插件指的是浏览器测试插件 Vue Devtools 。</p><ul><li><p><strong>渐进式框架</strong>：可以在原有的大系统的上面，把一两个组件改用它实现，就是当成 jQuery 来使用，也可以整个用它全家桶开发。即 <kbd>零使用</kbd> -&gt; <kbd>当做函数库调用</kbd> -&gt; <kbd>整个项目都用它开发</kbd>。</p></li><li><p><strong>组件</strong>：每个组件中都有组件的 html、JavaScript 和 CSS，并渲染网页单独的区域，css 的选择器 或者 js 的方法 或者 html 的 id 重复了怎么搞，若是互不干扰，那么 html、css 和 js 就有了 <strong>作用域</strong> 的概念。</p></li><li><p><strong>响应式编程</strong>：当应用的状态发生变化时，相关的界面元素会自动更新，而不需要手动操作DOM。它有助于构建更具可维护性和可预测性的代码，因为数据和视图之间的关系变得更加清晰。</p></li><li><p><strong>双向数据绑定</strong>：建立数据模型和用户界面之间的自动同步机制。在这种机制下，当用户界面中的输入元素（比如输入框）的值发生变化时，相应的数据模型会自动更新；反之亦然，当数据模型的值变化时，用户界面会自动更新以反映这些变化。</p></li><li><p><strong>指令</strong>：在 Vue 中指令是特殊的标签属性，用于向模板添加特定的行为。指令以 <code>v-</code> 开头，后面跟着指令的名称，例如 <code>v-bind</code>、<code>v-model</code>、<code>v-if</code> 等。这些指令使得开发者能够在模板中声明式地处理DOM，数据和视图之间的关系。指令的本质就是函数，指令后面的数据就是参数。</p></li><li><p><strong>单文件组件</strong>：Vue 规范的一种以 <code>.vue</code> 结尾的 组件 文件，文件只有三种根元素： <code>&lt;template&gt;</code> 、 <code>&lt;script&gt;</code> 、 <code>&lt;style&gt;</code> ，分别对应 html、js 和 css。文件经过 <code>vue-loader</code> 编译之后转换为 <code>viewModel</code> 在视图中渲染，一般出现在 Vue 的项目中。</p></li></ul><h3 id="MVVM-模型">MVVM 模型</h3><p>虽然没有完全遵循 MVVM（model-view-viewModel）模型，但是 Vue 的设计也受到了它的启发。ViewModel 是 vue.js 的核心，它在项目是 Vue 的一个实例。因此在文档中经常会使用 <code>vm</code>（ViewModel 的缩写）这个变量名表示 Vue 实例。</p><p><img src="/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/assets/20151109171527_549.png" alt="img"></p><p>首先我们将 DOM Listeners 和 Data Bindings 看做两个监听器，从 View 侧看，当 View 发生变化（点击事件、输入框数据变化等等），被 DOM Listeners 监听到，他就会帮我们去改变 Model 的数据或调用方法；从 Model 侧看，当 Model 发生改变（ 组件方法改变了组件数据、外部组件改变本组件数据等等 ），被 Data Bindings 监听到，它会自动的帮我们去重新渲染页面。这大致就是 MVVM 模型的设计理念。</p><h3 id="组件化">组件化</h3><blockquote><p>你可以去 Vue 组件中详细查看使用语法，这里只介绍思想。</p></blockquote><p>我们先搭建一个简单的页面，页面分三个主体部分：导航栏、文章展示和公告栏。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>banner<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>文章1<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>文章2<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>告示1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>告示1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>告示1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/assets/components.png" alt></p><p>很简单的一个页面结构，我们把整个页面看做一个整体，有头部导航栏、文章内容区、侧边公告栏等等，侧边内容区中有多篇文章，侧边公告栏有多个告示，如此一来，可以越分越细。Vue 提供的组件概念，我们可以把这些细分的部分通过组件的方式来实现，组件和组件之间有着作用域的概念，互不影响，一个大型的网页就可以拆分成多个细小的模块来进行多人合作完成。组件还有可复用性和懒加载的概念，我们以后再说。</p><h3 id="响应式原理">响应式原理</h3><p>Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接，不过理解其工作原理同样重要，这样你可以避开一些常见的问题。</p><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a> 把这些 property 全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters">getter/setter</a>。<code>Object.defineProperty</code> 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p><p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a> 来获取对检查数据更加友好的用户界面。</p><p>每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p><p><img src="/2023/11/29/vue-%E4%BB%8B%E7%BB%8D/assets/data.png" alt="data"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML标签语义</title>
    <link href="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/"/>
    <url>/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1>HTML标签语义</h1><blockquote><p>本文编写时间为 2023-11-26，可能存在过期内容，仅供参考。最新数据请访问 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">MDN web docs</a>。</p></blockquote><p>&lt;!–more–&gt;</p><p>为什么要了解 HTML 标签的语义？</p><p>HTML(HyperText Markup Language) 全称为超文本标记语言 ，是一种标记语言，并不是编程语言。</p><p>你可以把一个 HTML 文件看做一个文档，就像 word 文档，而浏览器是解析查看文档内容的软件。我们在编辑 word 文档时使用一定范围内约定俗成的规范来编辑，比如：加粗的字体是关键字，需要留意；标题分为一二三级，从高到低细分；重要内容可以加重背景色等等。HTML 的标签就起到这样一种 <strong>标识内容</strong> 的作用。</p><p>在 CSS 和 JavaScript 兴起的年代，HTML 已经渐渐被默认为展示数据的工具，所有的页面几乎都是块元素( div )、内敛元素( span )、无序列表( ul 、 li )、文本标签( p )和 媒体标签(  img 、video 、audio ) 完成的。并不能说这种开发模式不对，当然，开发嘛，怎么舒服怎么来，但是我们要了解 HTML 标签的语义，自己可以试着去根据 <strong>标签语义</strong> 开发，虽然别人不一定懂，自己回头看的时候肯定会很舒服。</p><p>HTML5规范引入了几个语义分段元素，以帮助组织文档的结构。语义剖分元素经过专门设计，可将结构含义传达给浏览器和代表用户解释文档的其他技术，例如屏幕阅读器和语音助手。</p><p>语义分段元素阐明了文档中的大规模结构。它们的目的是增强早期HTML版本的有限语义，早期HTML版本只包含 &lt;div&gt; 标记作为对相关内容进行分组的通用机制。例如， &lt;div class=“navigation”&gt; 对浏览器来说并不意味着它的内容有任何意义;只有阅读HTML源代码的人才能理解像导航这样的类的含义。相比之下， &lt;nav&gt; 元素更清楚地向浏览器和其他设备描述所包含的内容：链接或其他导航结构，以帮助用户浏览和理解他们在站点或页面内容中的位置。</p><p>新的语义元素被添加到 HTML5 中，以改进和澄清网站划分成有意义的内容区域。对于开发人员来说，按照预期的目的使用这些语义元素非常重要。许多可访问性工具以及一些浏览器提供的读者视图都依赖于语义分段元素。因此，不要将现有的混乱的 &lt;div&gt; 元素替换为一堆 &lt;section&gt; 元素。</p><p>根元素</p><table><thead><tr><th>Element</th><th>描述</th></tr></thead><tbody><tr><td>&lt;html&gt;</td><td>代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</td></tr></tbody></table><p>文档元数据</p><table><thead><tr><th>Element</th><th>描述</th></tr></thead><tbody><tr><td><a href="#head">&lt;head&gt;</a></td><td>代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。</td></tr><tr><td><a href="#title">&lt;title&gt;</a></td><td>定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。</td></tr><tr><td><a href="#base">&lt;base&gt;</a></td><td>定义页面上相对 URL 的基准 URL。</td></tr><tr><td><a href="#link">&lt;link&gt;</a></td><td>用于链接外部资源到该文档。</td></tr><tr><td><a href="#meta">&lt;meta&gt;</a></td><td>定义其他 HTML 元素无法描述的元数据。</td></tr><tr><td><a href="#style">&lt;style&gt;</a></td><td>用于内联 CSS。</td></tr></tbody></table><p>脚本</p><table><thead><tr><th>Element</th><th>描述</th></tr></thead><tbody><tr><td>&lt;script&gt;</td><td>定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。</td></tr><tr><td>&lt;noscript&gt;</td><td>定义当浏览器不支持脚本时显示的替代文字。</td></tr><tr><td>&lt;template&gt;</td><td>通过 JavaScript 在运行时实例化内容的容器。</td></tr></tbody></table><p>章节</p><table><thead><tr><th>Element</th><th>描述</th></tr></thead><tbody><tr><td><a href="#body">&lt;body&gt;</a></td><td>代表 HTML 文档的内容。</td></tr><tr><td><a href="#header">&lt;header&gt;</a></td><td>定义页面或章节的头部。它经常包含 logo、页面标题和导航性的目录。</td></tr><tr><td><a href="#main">&lt;main&gt;</a></td><td>定义文档中主要或重要的内容。</td></tr><tr><td><a href="#footer">&lt;footer&gt;</a></td><td>定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。</td></tr><tr><td><a href="#from-h1-to-h6">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;</a></td><td>标题元素实现了六层文档标题，&lt;h1&gt; 是最大的标题，&lt;h6&gt; 是最小的标题。标题元素简要地描述章节的主题。</td></tr><tr><td><a href="#nav">&lt;nav&gt;</a></td><td>定义只包含导航链接的章节。</td></tr><tr><td><a href="#section">&lt;section&gt;</a></td><td>定义文档中的一个章节。</td></tr><tr><td><a href="#article">&lt;article&gt;</a></td><td>定义可以独立于内容其余部分的完整独立内容块。</td></tr><tr><td><a href="#aside">&lt;aside&gt;</a></td><td>定义和页面内容关联度较低的内容——如果被删除，剩下的内容仍然很合理。</td></tr><tr><td><a href="#address">&lt;address&gt;</a></td><td>定义包含联系信息的一个章节。</td></tr></tbody></table><p>组织内容</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#p">&lt;p&gt;</a></td><td>定义一个段落。</td></tr><tr><td><a href="#pre">&lt;pre&gt;</a></td><td>代表其内容已经预先排版过，格式应当保留 。</td></tr><tr><td><a href="#hr">&lt;hr&gt;</a></td><td>代表章节、文章或其他长内容中段落之间的分隔符。</td></tr><tr><td><a href="#blockquote">&lt;blockquote&gt;</a></td><td>代表引用自其他来源的内容。</td></tr><tr><td><a href="#ol">&lt;ol&gt;</a></td><td>定义一个有序列表。</td></tr><tr><td><a href="#ul">&lt;ul&gt;</a></td><td>定义一个无序列表。</td></tr><tr><td><a href="#li">&lt;li&gt;</a></td><td>定义列表中的一个列表项。</td></tr><tr><td><a href="#dl">&lt;dl&gt;</a></td><td>定义一个定义列表（一系列术语和其定义）。</td></tr><tr><td><a href="#dt">&lt;dt&gt;</a></td><td>代表一个由下一个 &lt;dd&gt; 定义的术语。</td></tr><tr><td><a href="#dd">&lt;dd&gt;</a></td><td>代表出现在它之前术语的定义。</td></tr><tr><td><a href="#figure">&lt;figure&gt;</a></td><td>代表一个和文档有关的图例。</td></tr><tr><td><a href="#figcaption">&lt;figcaption&gt;</a></td><td>代表一个图例的说明。</td></tr><tr><td><a href="#div">&lt;div&gt;</a></td><td>代表一个通用的容器，没有特殊含义。</td></tr></tbody></table><p>文字形式</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#a">&lt;a&gt;</a></td><td>代表一个链接到其他资源的超链接 。</td></tr><tr><td><a href="#em">&lt;em&gt;</a></td><td>代表强调 文字。</td></tr><tr><td><a href="#strong">&lt;strong&gt;</a></td><td>代表特别重要 文字。</td></tr><tr><td><a href="#small">&lt;small&gt;</a></td><td>代表注释 ，如免责声明、版权声明等，对理解文档不重要。</td></tr><tr><td><a href="#s">&lt;s&gt;</a></td><td>代表不准确或不相关 的内容。</td></tr><tr><td><a href="#cite">&lt;cite&gt;</a></td><td>代表作品标题 。</td></tr><tr><td><a href="#q">&lt;q&gt;</a></td><td>代表内联的引用 。</td></tr><tr><td><a href="#dfn">&lt;dfn&gt;</a></td><td>代表一个术语包含在其最近祖先内容中的定义 。</td></tr><tr><td><a href="#addr">&lt;abbr&gt;</a></td><td>代表省略 或缩写 ，其完整内容在 title 属性中。</td></tr><tr><td><a href="#data">&lt;data&gt;</a></td><td>关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。</td></tr><tr><td><a href="#time">&lt;time&gt;</a></td><td>代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。</td></tr><tr><td><a href="#code">&lt;code&gt;</a></td><td>代表计算机代码 。</td></tr><tr><td><a href="#var">&lt;var&gt;</a></td><td>代表代码中的变量 。</td></tr><tr><td><a href="#samp">&lt;samp&gt;</a></td><td>代表程序或电脑的输出 。</td></tr><tr><td><a href="#kbd">&lt;kbd&gt;</a></td><td>代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。</td></tr><tr><td><a href="#sub">&lt;sub&gt;</a>、<a href="#sup">&lt;sup&gt;</a></td><td>分别代表下标 和上标 。</td></tr><tr><td><a href="#i">&lt;i&gt;</a></td><td>代表一段不同性质 的文字，如技术术语、外文短语等。</td></tr><tr><td><a href="#b">&lt;b&gt;</a></td><td>代表一段需要被关注 的文字。</td></tr><tr><td><a href="#u">&lt;u&gt;</a></td><td>代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。</td></tr><tr><td><a href="#mark">&lt;mark&gt;</a></td><td>代表一段需要被高亮的引用 文字。</td></tr><tr><td><a href="#ruby">&lt;ruby&gt;</a></td><td>代表被ruby 注释 标记的文本，如中文汉字和它的拼音。</td></tr><tr><td><a href="#rt">&lt;rt&gt;</a></td><td>代表ruby 注释 ，如中文拼音。</td></tr><tr><td><a href="#rp">&lt;rp&gt;</a></td><td>代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。</td></tr><tr><td><a href="#bdi">&lt;bdi&gt;</a></td><td>代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。</td></tr><tr><td><a href="#bdo">&lt;bdo&gt;</a></td><td>指定子元素的文本方向 ，显式地覆盖默认的文本方向。</td></tr><tr><td><a href="#span">&lt;span&gt;</a></td><td>代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。</td></tr><tr><td><a href="#br">&lt;br&gt;</a></td><td>代表换行 。</td></tr><tr><td><a href="#wbr">&lt;wbr&gt;</a></td><td>代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</td></tr></tbody></table><p>编辑</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#ins">&lt;ins&gt;</a></td><td>定义增加 到文档的内容。</td></tr><tr><td><a href="#del">&lt;del&gt;</a></td><td>定义从文档移除 的内容。</td></tr></tbody></table><p>嵌入内容</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#img">&lt;img&gt;</a></td><td>代表一张图片 。</td></tr><tr><td><a href="#iframe">&lt;iframe&gt;</a></td><td>代表一个内联的框架 。</td></tr><tr><td><a href="#embed">&lt;embed&gt;</a></td><td>代表一个嵌入 的外部资源，如应用程序或交互内容。</td></tr><tr><td><a href="#object">&lt;object&gt;</a></td><td>代表一个外部资源 ，如图片、HTML 子文档、插件等。</td></tr><tr><td><a href="#param">&lt;param&gt;</a></td><td>代表 &lt;object&gt; 元素所指定的插件的参数 。</td></tr><tr><td><a href="#video">&lt;video&gt;</a></td><td>代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。</td></tr><tr><td><a href="#audio">&lt;audio&gt;</a></td><td>代表一段声音 ，或音频流 。</td></tr><tr><td><a href="#source">&lt;source&gt;</a></td><td>为 &lt;video&gt; 或 &lt;audio&gt; 这类媒体元素指定媒体源 。</td></tr><tr><td><a href="#track">&lt;track&gt;</a></td><td>为 &lt;video&gt; 或 &lt;audio&gt; 这类媒体元素指定文本轨道（字幕） 。</td></tr><tr><td><a href="#canvas">&lt;canvas&gt;</a></td><td>代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。</td></tr><tr><td><a href="#map">&lt;map&gt;</a></td><td>与 &lt;area&gt; 元素共同定义图像映射 区域。</td></tr><tr><td><a href="#area">&lt;area&gt;</a></td><td>与 &lt;map&gt; 元素共同定义图像映射 区域。</td></tr><tr><td><a href="#svg">&lt;svg&gt;</a></td><td>定义一个嵌入式矢量图 。</td></tr><tr><td><a href="#math">&lt;math&gt;</a></td><td>定义一段数学公式 。</td></tr></tbody></table><p>表格</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#table">&lt;table&gt;</a></td><td>定义多维数据 。</td></tr><tr><td><a href="#caption">&lt;caption&gt;</a></td><td>代表表格的标题 。</td></tr><tr><td><a href="#colgroup">&lt;colgroup&gt;</a></td><td>代表表格中一组单列或多列 。</td></tr><tr><td><a href="#col">&lt;col&gt;</a></td><td>代表表格中的列 。</td></tr><tr><td><a href="#tbody">&lt;tbody&gt;</a></td><td>代表表格中一块具体数据 （表格主体）。</td></tr><tr><td><a href="#thead">&lt;thead&gt;</a></td><td>代表表格中一块列标签 （表头）。</td></tr><tr><td><a href="tfoot">&lt;tfoot&gt;</a></td><td>代表表格中一块列摘要 （表尾）。</td></tr><tr><td><a href="#tr">&lt;tr&gt;</a></td><td>代表表格中的行 。</td></tr><tr><td><a href="#td">&lt;td&gt;</a></td><td>代表表格中的单元格 。</td></tr><tr><td><a href="#th">&lt;th&gt;</a></td><td>代表表格中的头部单元格 。</td></tr></tbody></table><p>表单</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#from">&lt;from&gt;</a></td><td>代表一个表单 ，由控件组成。</td></tr><tr><td><a href="#fieldest">&lt;fieldest&gt;</a></td><td>代表控件组 。</td></tr><tr><td><a href="#legend">&lt;legend&gt;</a></td><td>代表 &lt;fieldset&gt; 控件组的标题 。</td></tr><tr><td><a href="#label">&lt;label&gt;</a></td><td>代表表单控件的标题 。</td></tr><tr><td><a href="#input">&lt;input&gt;</a></td><td>代表允许用户编辑数据的数据区 （文本框、单选框、复选框等）。</td></tr><tr><td><a href="#button">&lt;button&gt;</a></td><td>代表按钮 。</td></tr><tr><td><a href="#select">&lt;select&gt;</a></td><td>代表下拉框 。</td></tr><tr><td><a href="#datalist">&lt;datalist&gt;</a></td><td>代表提供给其他控件的一组预定义选项 。</td></tr><tr><td><a href="#optgroup">&lt;optgroup&gt;</a></td><td>代表一个选项分组 。</td></tr><tr><td><a href="#option">&lt;option&gt;</a></td><td>代表一个 &lt;select&gt; 元素或 &lt;datalist&gt; 元素中的一个选项</td></tr><tr><td><a href="#textarea">&lt;textarea&gt;</a></td><td>代表多行文本框 。</td></tr><tr><td><a href="#output">&lt;output&gt;</a></td><td>代表计算值 。</td></tr><tr><td><a href="#progress">&lt;progress&gt;</a></td><td>代表进度条 。</td></tr><tr><td><a href="meter">&lt;meter&gt;</a></td><td>代表滑动条 。</td></tr></tbody></table><p>交互元素</p><table><thead><tr><th>Element</th><th>说明</th></tr></thead><tbody><tr><td><a href="#details">&lt;details&gt;</a></td><td>代表一个用户可以(点击)获取额外信息或控件的小部件 。</td></tr><tr><td><a href="#summary">&lt;summary&gt;</a></td><td>代表 &lt;details&gt; 元素的综述 或标题 。</td></tr><tr><td><a href="#menuitem">&lt;menuitem&gt;</a></td><td>代表一个用户可以点击的菜单项。</td></tr><tr><td><a href="#menu">&lt;menu&gt;</a></td><td>代表菜单。</td></tr></tbody></table><h2 id="文档元数据">文档元数据</h2><h3 id="a-name-head-head-a"><a name="head">&lt;head&gt;</a></h3><blockquote><p>代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。</p></blockquote><ul><li>只能存在一个 &lt;head&gt; 元素，若是存在多个，浏览器会合并 &lt;head&gt; 中的内容，仅保留一个 &lt;head&gt; 标签。</li><li>&lt;head&gt; 中的元数据用户不可见，当然，通过浏览器调试工具也能看见。</li></ul><h3 id="base">&lt;base&gt;</h3><blockquote><p>指定用于一个文档中包含的所有相对 URL 的根 URL。只能有一个 &lt;base&gt; 元素。如果指定了多个 &lt;base&gt; 元素，只会使用第一个 <code>href</code> 和 <code>target</code> 值, 其余都会被忽略。</p></blockquote><p>如果指定了以下任一属性，这个元素必须在其他任何属性是URL的元素之前。比如 &lt;link&gt; 的 <code>href</code>。</p><p><strong>属性</strong>：</p><ul><li><strong>href</strong>：用于文档中相对 URL 地址的基础 URL。允许绝对和相对URL。</li><li><strong>target</strong>：默认浏览上下文的关键字或作者定义的名称，当没有明确目标的链接 &lt;a&gt; 或表单 &lt;form&gt; 导致导航被激活时显示其结果。该属性值定位到浏览上下文（例如选项卡，窗口或内联框 &lt;iframe&gt; ）。<ul><li>_self ：载入结果到当前浏览上下文中。（该值是元素的默认值）。</li><li>block ：载入结果到一个新的未命名的浏览上下文。</li><li>_parent ：载入结果到父级浏览上下文（如果当前页是内联框）。如果没有父级结构，该选项的行为和 _self 一样。</li><li>_top ：载入结果到顶级浏览上下文（该浏览上下文是当前上下文的最顶级上下文）。如果没有父级，该选项的行为和 _self 一样。</li></ul></li></ul><p>简单解释一下，这个标签的相当于给页面内所有 相对和绝对路径 加了个前缀。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_block&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这个链接就会被解析为 http://www.baidu.com/index.html --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./index.html&quot;</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>列举一下我测试的几种情况：</p><blockquote><p>第一个地址代表 &lt;base&gt; 的 href，第二个是 &lt;a&gt; 标签的，第三个是跳转后的浏览器路径</p></blockquote><ul><li><code>http://www.baidu.com/</code> + <code>./dome/index.html</code> =&gt; <code>https://www.baidu.com/dome/index.html</code></li><li><code>http://www.baidu.com/</code> + <code>/dome/index.html</code> =&gt; <code>https://www.baidu.com/dome/index.html</code></li><li><code>http://www.baidu.com/dome/</code> + <code>/index.html</code> =&gt; `https://www.baidu.com/index.html ``<ul><li>根路径指向了 <code>http://www.baidu.com/</code></li></ul></li><li><code>http://www.baidu.com/dome/</code> + <code>./index.html</code> =&gt; <code>https://www.baidu.com/dome/index.html</code><ul><li>注意： <code>http://www.baidu.com/dome</code> + <code>./index.html</code> =&gt; <code>https://www.baidu.com/index.html</code></li><li>浏览器会把 dome 识别成和 index.html 同级的资源</li></ul></li><li><code>./dome/</code> + <code>index.html</code> =&gt; <code>http://127.0.0.1:5500/dome/index.html</code><ul><li>用的是 vscode 的 live serve 插件打开的端口</li><li>主文件下有个 dome ，dome 文件夹下有个 mode 文件夹，每个文件夹都有一个 index.html</li></ul></li><li><code>./mode/</code> + <code>index.html</code> =&gt; <code>http://127.0.0.1:5500/dome/mode/index.html</code></li><li><code>/dome/</code> + <code>index.html</code> =&gt; <code>http://127.0.0.1:5500/dome/index.html</code><ul><li>每个 index.html 都是这个结果</li></ul></li><li>它支持跳转页面加锚，即 <code>http://www.baidu.com</code> + <code>#author</code> =&gt; <code>http://www.baidu.com#author</code></li></ul><p>是不是又增加了一点没什么用小知识呢？</p><h3 id="title">&lt;title&gt;</h3><blockquote><p>定义文档的标题，显示在浏览器的标题栏或标签页上。它只应该包含文本，若是包含有标签，则它包含的任何标签都将被忽略。</p></blockquote><ul><li>只能存在且应该存在一个 &lt;title&gt; ，若存在两个，则只作用第一个，若不存在，则显示文件名。</li><li>它是 &lt;head&gt; 的子元素。</li></ul><p>页面标题的内容可能对搜索引擎优化（SEO）具有重要意义。 通常，较长的描述性标题要比简短或一般性标题更好。 标题的内容是搜索引擎算法用来确定在搜索结果中列出页面顺序的组件之一。 同样，标题是初始的“挂钩”，您可以通过它吸引浏览浏览结果页面的读者的注意力。</p><p>撰写好标题的一些准则和技巧：</p><ul><li>避免使用一两个单词的标题。 对于词汇表或参考样式的页面，请使用描述性短语或术语-定义对。</li><li>搜索引擎通常显示页面标题的前55至60个字符。 超出此范围的文本可能会丢失，因此请尽量不要使标题更长。 如果您必须使用较长的标题，请确保重要的部分出现在前面，并且标题中可能要删除的部分中没有关键内容。</li><li>不要使用“关键字Blob”。 如果标题只是单词列表，则算法通常会降低页面在搜索结果中的位置。</li><li>尝试确保您的标题在您自己的网站中尽可能唯一。 标题重复（或几乎重复）可能会导致搜索结果不准确。</li></ul><h3 id="meta">&lt;meta&gt;</h3><blockquote><p>表示那些不能由其它 HTML 元相关元素表示的任何元数据信息。</p></blockquote><p>&lt;meta&gt; 元素定义的元数据的类型包括以下几种：</p><ul><li>如果设置了 name 属性，meta 元素提供的是文档级别（document-level）的元数据，应用于整个页面。</li><li>如果设置了 http-equiv 属性，meta 元素则是编译指令，提供的信息与类似命名的HTTP头部相同。</li><li>如果设置了 charset 属性，meta 元素是一个字符集声明，告诉文档使用哪种字符编码。</li><li>如果设置了 itemprop 属性，meta 元素提供用户定义的元数据。<ul><li>几乎见不到了。</li></ul></li></ul><p><strong>charset</strong>：</p><p>这个属性声明了文档的字符编码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>http-equiv</strong>：</p><p>这个属性定义了一个编译指示指令。这个属性叫做 http-equiv(alent) 是因为所有允许的值都是特定HTTP头部的名称，如下：</p><ul><li>content-security-policy<ul><li>它允许页面作者定义当前页的内容策略。 内容策略主要指定允许的服务器源和脚本端点，这有助于防止跨站点脚本攻击。</li></ul></li><li>content-type<ul><li>如果使用这个属性，其值必须是 “text/html; charset=utf-8” 。注意：该属性只能用于 MIME type 为 text/html 的文档，不能用于MIME类型为XML的文档。</li></ul></li><li>default-style<ul><li>设置默认 CSS 样式表组的名称。</li></ul></li><li>x-ua-compatible<ul><li>如果指定，则 content 属性必须具有值 “IE=edge”。用户代理必须忽略此指示。</li></ul></li><li>refresh<ul><li>这个属性指定:<ul><li>如果 content 只包含一个正整数，则为重新载入页面的时间间隔(秒)；</li><li>如果 content 包含一个正整数，并且后面跟着字符串 ‘;url=’ 和一个合法的 URL，则是重定向到指定链接的时间间隔(秒)，可以看做定时器。</li></ul></li></ul></li></ul><p><strong>name</strong>：</p><p>name 和 content 属性可以一起使用，以 名-值 对的方式给文档提供元数据，其中 name 作为元数据的名称，content 作为元数据的值。name 的常取值：</p><ul><li>keywords：为搜索引擎提供的关键字列表，关键字以 “,” 分割</li><li>description：告诉搜索引擎你的网站主要内容。</li><li>author：标注网页的作者。</li><li>copyright：标注版权。</li><li>viewport：移动端适配，通过 属性名=属性值 来设置，属性设置之间以 “,” 分割，属性值有：<ul><li>width：设置layout viewport 的宽度，为一个正整数，使用字符串”width-device”表示设备宽度</li><li>initial-scale：设置页面的初始缩放值，为一个数字，可以带小数</li><li>minimum-scale：允许用户的最小缩放值，为一个数字，可以带小数</li><li>maximum-scale：允许用户的最大缩放值，为一个数字，可以带小数</li><li>height：设置layout viewport 的高度，这个属性对我们并不重要，很少使用</li><li>user-scalable：是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;HTML 标签, HTML 标签语义, HTML 标签属性&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;没什么用的小知识&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;specialcarp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;copyright&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：name 、 http-equiv 应该和 content 一起使用。</p><h3 id="link">&lt;link&gt;</h3><blockquote><p>HTML 的外部资源链接元素规定了当前文档与外部资源的关系。该元素最常用于链接样式表，此外也可以被用来创建站点图标(比如PC端的“favicon”图标和移动设备上用以显示在主屏幕的图标) 。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/common.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;logo.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;img/x-ico&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>link 还有很多属性，一般用不到，若想了解，请移步 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link">MDN Web Docs ：外部资源链接元素</a> 。</p><h3 id="style">&lt;style&gt;</h3><blockquote><p>包含文档的样式信息或者文档的部分内容。默认情况下，该标签的样式信息通常是CSS的格式。</p></blockquote><p><strong>type</strong>：</p><p>该属性以MIME类型（不应该指定字符集）定义样式语言。如果该属性未指定，则默认为 text/css。</p><p><strong>media</strong>：</p><p>该属性规定该样式适用于哪个媒体。属性的取值CSS媒体查询，默认值为 all。</p><p><strong>nonce</strong>：</p><p>一种加密的随机数（一次使用的数字），用于在 style-src Content-Security-Policy 中将内联样式列入白名单。 服务器每次发送策略时都必须生成一个唯一的随机数值。 提供一个无法猜测的随机数非常重要，因为绕开资源策略是微不足道的。</p><p><strong>title</strong>：</p><p>指定可选的样式表。</p><h2 id="章节">章节</h2><h3 id="body">&lt;body&gt;</h3><blockquote><p>代表 HTML 文档的内容。</p></blockquote><ul><li><p>在文档中只能有一个 &lt;body&gt; 元素。</p></li><li><p>&lt;body&gt; 必须包裹想展示给用户的所有内容。</p></li></ul><h3 id="header">&lt;header&gt;</h3><blockquote><p>用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。</p></blockquote><ul><li>&lt;header&gt; 元素不能作为 &lt;address&gt;、 &lt;footer&gt; 或另一个 &lt;header&gt; 元素的子元素。</li><li>&lt;header&gt; 元素不是分段内容，因此不会往 大纲 中引入新的段落。也就是说， &lt;header&gt; 元素通常用于包含周围部分的标题（h1 至 h6 元素），但这<strong>不是</strong>必需的。</li><li>标题也可以用在其他语义元素中，比如 &lt;article&gt; 或 &lt;section&gt;。一个 &lt;section&gt; 可能包含 &lt;section&gt; 的标题、作者姓名等。 &lt;article&gt;、 &lt;section&gt;、&lt;aside&gt; 和 &lt;nav&gt; 可以有自己的 &lt;header&gt;。尽管它的名字是 header，但 header 不一定定位在页面或部分的开头。</li></ul><h3 id="main">&lt;main&gt;</h3><blockquote><p>呈现了文档的 &lt;body&gt; 或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。</p></blockquote><p>在文档中，&lt;main&gt; 元素的内容应当是独一无二的。任何同时存在于任意一系列文档中的相同、重复内容，比如侧边栏、导航栏链接、版权信息、网站 Logo，搜索框（除非搜索框为文档的主要功能），都不应当被包含在其内。&lt;main&gt; 元素本身也应是独一无二的，一个文档中不应存在第二个 &lt;main&gt; 元素。</p><p>&lt;main&gt; 对文档的大纲（outline）没有贡献；也就是说，它与诸如 &lt;body&gt; 之类的元素，诸如 &lt;h2&gt; 之类的标题等不同，&lt;main&gt; 不会影响 DOM 的页面结构概念。它仅有提供信息的作用。（原文：It’s strictly informative.）</p><p>直达内容（skipnav），是一种辅助功能技术，使其用户可以快速跳过大段的重复内容（如主导航栏、信息横幅等）。这允许用户更快地访问到页面的主要内容。向 &lt;main&gt; 元素添加 id 属性后，该元素可成为直达内容链接的目标。</p><p>浏览器的阅读器模式会寻找文档中的 main 元素，以及 标题元素 和 内容分区元素 以便将内容转换至阅读器视图。</p><h3 id="footer">&lt;footer&gt;</h3><blockquote><p>表示最近一个章节内容或者根节点（sectioning root）元素的页脚。一个页脚通常包含该章节作者、版权数据、法律声明或者与文档相关的链接等信息。</p></blockquote><ul><li>&lt;footer&gt;不能是 &lt;address&gt;、&lt;header&gt; 或者另一个 &lt;footer&gt; 元素的子元素。</li><li>&lt;footer&gt; 元素内的作者信息应包含在 &lt;address&gt; 元素中。</li><li>&lt;footer&gt; 元素不是章节标签，因此在 &lt;footer&gt; 中不能包含新的章节内容。</li><li>在 &lt;section&gt; 的上下文中，页脚可能包含章节内容的发布日期、许可信息等。 &lt;article&gt;、&lt;section&gt;、&lt;aside&gt; 和 &lt;nav&gt; 可以有自己的 &lt;footer&gt;。尽管它的名字是 footer，但 footer 不一定位于页面或部分的末尾。</li></ul><h3 id="a-name-from-h1-to-h6-h1-、-h2-、-h3-、-h4-、-h5-、-h6-a"><a name="from-h1-to-h6">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;</a></h3><blockquote><p>标题元素实现了六层文档标题，&lt;h1&gt; 是最大的标题，&lt;h6&gt; 是最小的标题。标题元素简要地描述章节的主题。标题的权重由大到小。</p></blockquote><ul><li>不要把它作为 &lt;hgroup&gt; 元素的子元素, 这种做法已经被废弃了。</li><li>用户代理可以使用 标题信息，例如自动构建文档的目录。</li><li>不要为了减小标题的字体大小而使用低级别的标题， 而是使用 CSS font-size 属性。</li><li>避免跳过某级标题：始终要从 &lt;h1&gt; 开始，接下来依次使用 &lt;h2&gt; 等等。</li><li>使用 &lt;section&gt; 元素时，为了方便起见，你应该考虑避免在同一个页面上重复使用 &lt;h1&gt;， &lt;h1&gt; 应被用于表示页面的标题，其他的标题当从 &lt;h2&gt; 开始。在使用 section 时，应当为每个 section 都使用一个 &lt;h2&gt;。</li></ul><p>屏幕阅读软件用户的常用导航技术是从标题跳到标题，以快速确定页面的内容。因此，重要的是不要跳过一个或多个标题级别。这样做可能会造成混乱，因为这样导航的人可能会想知道丢失的标题在哪里。</p><p>标题可以嵌套为小节，以反映页面内容的组织。大多数屏幕阅读器还可以生成页面上所有标题的有序列表，这可以帮助人们快速确定内容的层次结构。</p><p>屏幕阅读软件用户的另一种常见导航技术是生成切片内容列表，并使用它来确定页面的布局。</p><p>可以使用 <strong>aria-labelledby</strong> 和 <strong>id</strong> 属性的组合来标记节内容，该标签简明扼要地描述了节的目的。对于在同一页面上有多个 sectioning 元素的情况，此技术很有用。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;primary-navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;primary-navigation&quot;</span>&gt;</span>Primary navigation<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- navigation items --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- page content --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;footer-navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer-navigation&quot;</span>&gt;</span>Footer navigation<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- navigation items --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在此示例中，屏幕阅读技术将宣布有两个 &lt;nav&gt; 部分，一个部分称为“主导航”，另一部分称为“页脚导航”。如果未提供标签，则使用屏幕阅读软件的人员可能必须调查每个 nav 元素的内容以确定其目的。</p><p>该 aria-labelledby 属性建立对象及其标签之间的关系，其值应为一个或多个元素ID，这些ID指的是具有标签所需文本的元素。以空格分隔的方式列出多个元素ID。</p><p>这个想法类似于如何使用“for”属性将 label 链接到 input 。</p><p>辅助技术（例如屏幕阅读器）使用此属性对文档中的对象进行分类，以便用户可以在它们之间进行导航。没有元素ID，辅助技术就无法对对象进行分类。若想了解更多，请移步<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby"> MDN Web Docs 使用aria-labelledby属性</a> 。</p><h3 id="nav">&lt;nav&gt;</h3><blockquote><p>表示页面的一部分，其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。</p></blockquote><ul><li><p>一个网页也可能含有多个 &lt;nav&gt; 元素，例如一个是网站内的导航列表，另一个是本页面内的导航列表。</p></li><li><p>对于屏幕阅读障碍的人，可以使用这个元素来确定是否忽略初始内容。</p></li><li><p>你不应该嵌套多个 &lt;nav&gt; 元素。单个 &lt;nav&gt; 可以包含多级菜单层次结构，或相关的导航功能。</p></li><li><p>&lt;nav&gt; 元素应该用于标记页面的主导航，并不是所有的链接都必须使用 &lt;nav&gt; 元素，它只用来将一些热门的链接放入导航栏，例如，导航菜单或搜索框。对于其他的链接集合，比如社交媒体简介或相关链接（&lt;aside&gt; 或 &lt;section&gt;）元素可能更合适。&lt;footer&gt; 元素就常用来在页面底部包含一个不常用到，没必要加入 &lt;nav&gt; 的链接列表。</p></li><li><p>虽然列表元素是常见的导航元素，但它们并不是必需的。例如 &lt;p&gt;。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>primary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>primary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>secondary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>secondary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>primary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="section">&lt;section&gt;</h3><blockquote><p>表示一个包含在HTML文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。</p></blockquote><ul><li>&lt;section&gt; 不能成为 &lt;address&gt; 的子元素。</li><li>一般通过是否包含一个标题 (&lt;h1&gt;-&lt;h6&gt; 元素) 作为子节点 来 辨识每一个 &lt;section&gt;。</li><li>如果 &lt;section&gt; 元素的内容可以单独在多个章节中重复使用，应该使用 &lt;article&gt; 而不是 &lt;section&gt;。</li><li>不要把 &lt;section&gt; 元素作为一个普通的容器来使用，这是本应该是 &lt;div&gt; 的用法（特别是当片段仅仅是为了美化样式的时候）。 一般来说，一个 &lt;section&gt; 应该出现在文档大纲中。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 之前 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Bunch of awesome content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 之后 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Bunch of awesome content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 之前 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bird.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;bird&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 之后 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bird.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;bird&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="article">&lt;article&gt;</h3><blockquote><p>表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</p></blockquote><p>给定文档中可以包含多篇文章;例如，阅读器在博客上滚动时一个接一个地显示每篇文章的文本，每个帖子将包含在 &lt;article&gt; 元素中，可能包含一个或多个 &lt;section&gt;。</p><ul><li>&lt;article&gt;元素不能成为 &lt;address&gt; 元素的子元素。</li><li>每个 &lt;article&gt;，通常包括标题（&lt;h1&gt;-&lt;h6&gt; 元素）作为 &lt;article&gt; 元素的子元素。</li><li>当 &lt;article&gt; 元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的 &lt;article&gt; 元素可嵌套在代表博客文章的 &lt;article&gt; 元素中。</li><li>&lt;article&gt; 元素的作者信息可通过 &lt;address&gt; 元素提供，但是不适用于嵌套的 &lt;article&gt; 元素。</li><li>&lt;article&gt; 元素的发布日期和时间可通过 &lt;time&gt; 元素的 pubdate 属性表示。</li><li>可以使用 &lt;time&gt;  元素的 datetime 属性来描述 &lt;article&gt; 元素的发布日期和时间。请注意 &lt;time&gt; 的 pubdate 属性不再是W3C HTML5标准。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>How to Become an MDN Contributor<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Do you want to help protect the web?....<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><br>      Amazing quote from article<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      Author info, publication date<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="aside">&lt;aside&gt;</h3><blockquote><p>表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框（call-out boxes）。</p></blockquote><ul><li><p>注意 &lt;aside&gt; 不能成为 &lt;address&gt; 元素的子元素。</p></li><li><p>不要使用 &lt;aside&gt; 元素去尾随括号内的文本 ，因为这种文本被认为是主要流内容的一部分。</p></li><li><p>&lt;aside&gt; 元素可以嵌套在其他HTML元素的内部。 您不不能将 &lt;aside&gt; 嵌套在另一个 &lt;aside&gt; 内。 这意味着一个侧边框里面不能有一个侧边框。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    迪斯尼电影<span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>海的女儿<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>（<span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>The Little Mermaid<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span>）于 1989 年首次登上银幕。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>    在首次发行期间，该片便收获了 8700 万美元的票房。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    更多有关该电影的信息…<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="address">&lt;address&gt;</h3><blockquote><p>表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。</p></blockquote><p>由 &lt;address&gt; 元素中任何形式的内容所提供的联系信息适用于上下文的背景信息,可以是必要的任何一种联系方式,比如真实地址、URL、电子邮箱、电话号码、社交媒体账号、地理坐标等等。此元素应该包含联系信息对应的个人、团体或组织的名称。</p><p>&lt;address&gt; 可以使用在多种语境中，例如在文章开头提供商务的联系方式，或者放在 &lt;article&gt; 元素内，指明该文章的作者。</p><ul><li>当表示一个和联系信息无关的任意的地址时，请改用 &lt;p&gt; 元素而不是 &lt;address&gt; 元素。</li><li>这个元素不能包含除联系信息之外的任何信息，比如出版日期（这应当被包含在 &lt;time&gt; 元素之中）。</li><li>通常，&lt;address&gt; 元素可以放在 &lt;footer&gt; 元素之中（如果存在的话）。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"> <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><br>    You can contact author at <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.somedomain.com/contact&quot;</span>&gt;</span><br>    www.somedomain.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    If you see any bugs, please <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:webmaster@somedomain.com&quot;</span>&gt;</span><br>    contact webmaster<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    You may also want to visit us:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    Mozilla Foundation<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    331 E Evelyn Ave<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    Mountain View, CA 94041<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    USA<br><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然 &lt;address&gt; 元素看起来只是使用了 &lt;i&gt; 或者 &lt;em&gt; 元素的默认样式来渲染其中的文本，但是当处理联系信息时使用它更为合适，因为它表达了额外的语义信息。</p><h2 id="组织内容">组织内容</h2><h3 id="p">&lt;p&gt;</h3><blockquote><p>HTML 段落元素，表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。</p></blockquote><ul><li><p>&lt;p&gt; 是块级元素。</p></li><li><p>&lt;p&gt; 元素的 align 属性已被弃用，请不要使用。</p></li><li><p>使用CSS margin 属性去改变段落之间的间隙，不要在段落之间插入空的段落元素或者 &lt;br&gt; 元素。</p></li></ul><h3 id="pre">&lt;pre&gt;</h3><blockquote><p>表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 &lt;pre&gt; 开始标签后的换行符也会被省略)</p></blockquote><ul><li>你需要将该元素里的 <code>\&lt;</code> 字符转义为 <code>&amp;lt;</code> 以保证代码里的关闭代码不被浏览器解释为标签。</li></ul><p>属性说明：</p><p><strong>cols</strong>：定义每行的最大字符数。这是一个非标准的属性，作用与 width 相同。要实现这样的效果，应该使用CSS。</p><p><strong>width</strong>：包含每行的最大字符数。虽然在技术上仍被实现，但这个属性没有视觉效果。要实现这样的效果，应该使用CSS。</p><p><strong>wrap</strong>：提示溢出怎样发生。在现代浏览器中，这个提示会被忽略，且被没有视觉效果。要实现这样的效果，应该使用CSS。</p><p>可访问性：</p><p>对于使用预先格式化的文本创建的任何图像或图表，提供备用描述非常重要。备用描述应该清晰简明地描述图像或图表的内容。</p><p>视力较差的人在使用屏幕阅读器等辅助技术进行浏览时，可能无法理解按顺序读出预格式化文本字符的含义。</p><p>&lt;figure&gt; 和 &lt;figcaption&gt; 元素的组合，再加上 id 和 role 以及 labelledby 属性的组合，允许将预先格式化的文本作为图像来宣布，figcaption 作为图像的替代描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;cow-caption&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>     ___________________________<br>   <span class="hljs-symbol">&amp;lt;</span> I&#x27;m an expert in my field. <span class="hljs-symbol">&amp;gt;</span><br>     ---------------------------<br>            \   ^__^<br>             \  (oo)\_______<br>                (__)\       )\/\<br>                    ||----w |<br>                    ||     ||<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cow-caption&quot;</span>&gt;</span><br>    A cow saying, &quot;I&#x27;m an expert in my field.&quot; The cow is illustrated using preformatted text characters.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="hr">&lt;hr&gt;</h3><blockquote><p>表示段落级元素之间的主题转换（例如，一个故事中的场景的改变，或一个章节的主题的改变）。</p></blockquote><ul><li>在 HTML 的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上。所以如果想画一条横线，请使用适当的 css 样式来修饰。</li><li>必须有开始标签, 不能有结束标签。</li></ul><p>属性说明：</p><p><strong>align</strong>：设置对齐方式. 如果没有值, 默认值为 left。</p><p><strong>color</strong>：使用颜色名或十六进制设置颜色。</p><p><strong>noshade</strong>：去除阴影。</p><p><strong>size</strong>：使用像素设置高度。</p><p><strong>width</strong>：使用像素或者百分比设置宽度。</p><h3 id="blockquote">&lt;blockquote&gt;</h3><blockquote><p>HTML 块级引用元素，代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 &lt;cite&gt; 元素。</p></blockquote><ul><li>若要修改被引用内容的缩进距离，可以使用 CSS margin-left 和 margin-right 属性，或使用 margin 缩写属性。</li><li>如果想要使用短引用（行间引用，在行内引用较短的内容），可以使用 &lt;q&gt; （Quotation）标签而非创建一个单独的引用块。</li></ul><p>属性说明：</p><p><strong>cite</strong>：是一个标注引用的信息的来源文档或者相关信息的URL。通常用来描述能够解释引文的上下文或者引用的信息。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">blockquote</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">blockquote</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">blockquote</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::before</span> &#123; <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;\201C&#x27;</span>; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">blockquote</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::after</span> &#123; <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;\201D&#x27;</span>; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;https://www.huxley.net/bnw/four.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Words can be like X-rays, if you use them properly—they’ll go through anything. You read and you’re pierced.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>—Aldous Huxley, <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>Brave New World<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="ol">&lt;ol&gt;</h3><blockquote><p>表示有序列表，通常渲染为一个带编号的列表。</p></blockquote><ul><li><p>通常，有序列表的条目会和它前面的编号 标记 一起显示，编号标记可以是数字或者字母。</p></li><li><p>&lt;ol&gt; 和 &lt;ul&gt; 元素两者可以无限嵌套，既可以同类嵌套，也可以互相嵌套。</p></li><li><p>&lt;ol&gt; 和 &lt;ul&gt; 元素都表示列表。区别在于，&lt;ol&gt; 元素的有序列表的顺序是有意义的。</p></li><li><p>至于如何确定该选择哪一个列表元素，可以尝试更改列表项的顺序，如果其含义会发生改变，那么就应当使用 &lt;ol&gt; 元素，否则使用 &lt;ul&gt; 更合适。</p><ul><li>“更改顺序”时，不应当算上一些固定位于列表最前或最后的项，比如未完成的列表最后的占位项。</li></ul></li><li><p>如果只有一个元素，以至于根本不存在什么顺序可言，可能最好先考虑是否应当使用列表元素，以及是否要在列表最后增加一些占位的空项。</p></li></ul><p>属性说明：</p><p><strong>reversed</strong>：此 &lt;u&gt;布尔值&lt;/u&gt; 属性指定列表中的条目是否是倒序排列的，即编号是否应从高到低反向标注。</p><p><strong>start</strong>：一个整数值属性，指定了列表编号的起始值。此属性的值应为阿拉伯数字，尽管列表条目的编号类型 type 属性可能指定为了罗马数字编号等其他类型的编号。比如说，想要让元素的编号从英文字母 “d” 或者罗马数字 “iv” 开始，都应当使用 start=“4”。注意：这个属性在 HTML4中弃用，但是在 HTML5 中被重新引入。</p><p><strong>type</strong>：设置编号的类型：</p><ul><li>a 表示小写英文字母编号</li><li>A 表示大写英文字母编号</li><li>i 表示小写罗马数字编号</li><li>I 表示大写罗马数字编号</li><li>1 表示数字编号（默认）</li></ul><p><strong>注意</strong>： 这个属性在 HTML4中弃用，但是在 HTML5 中被重新引入。除非列表中序号很重要（比如，在法律或者技术文件中条目通常被需要所引用），否则请使用 CSS <code>list-style-type</code> 属性替代。</p><h3 id="ul">&lt;ul&gt;</h3><blockquote><p>HTML 无序列表元素，表示一个内可含多个元素的无序列表或项目符号列表。</p></blockquote><ul><li><p>&lt;ul&gt; 元素用来将没有数字顺序的一组数据进行分组，并且它们的数字顺序是没有意义的。举个例子，无序列表的列表项通常通过一个字符进行装饰，这些字符的形式可以是点，圆乃至方形．虽然这个字符没有直接在页面上定义，但是可以用与之相关的 CSS 对其进行操作，例如使用 <code>list-style-type</code> 属性。</p></li><li><p>在 &lt;ol&gt; 和 &lt;ul&gt; 元素中，嵌套列表没有深度和嵌套顺序的限制。</p></li><li><p>&lt;ol&gt; 和 &lt;ul&gt; 元素二者都代表一组数据，不过它们彼此是有区别的，ol 元素中的顺序是有意义的。如果想确定你到底需要使用哪一个列表元素，你可以试着去改变数据的顺序。如果想表达的语义改变了，你就需要使用 ol 元素，否则你该使用 ul 元素。</p></li></ul><p>属性说明：</p><p><strong>compact</strong>：此 布尔值 属性提示列表是否需要被渲染为更紧凑的样式。用户代理决定如何解释这个属性，且并非所有浏览器都支持它。注意：不要使用这个属性，因为它已经被 HTML5 废弃了：&lt;ul&gt; 元素应当使用 CSS 来更改样式。CSS 可以提供与 compact 属性相同的效果，将 CSS 属性 <code>line-height</code> 的值设为 80% 即可。</p><p><strong>type</strong>：用于设置列表的着重号样式 ，被定义在 HTML3.2 和过渡版本  HTML 4.0/4.01 中的可用值有:</p><ul><li>circle</li><li>disc</li><li>square</li><li>triangle</li></ul><p>注意：第四种着重号样式被定义在 WebTV 接口中，但并不是所有浏览器都支持。如果未设置此 HTML 属性且没有 CSS <code>list-style-type</code> 属性作用于这个元素，用户代理会决定使用哪种着重号样式，一般来说这也和嵌套的层级数有关。 在 HTML5 中不要使用这个属性，它已经被 废弃 了：使用 CSS <code>list-style-type</code> 属性作为代替。</p><h3 id="li">&lt;li&gt;</h3><blockquote><p>HTML 列表条目元素，用于表示列表里的条目。它必须包含在一个父元素里：一个有序列表(&lt;ol&gt;)，一个无序列表(&lt;ul&gt;)，或者一个菜单 (&lt;menu&gt;)。在菜单或者无序列表里，列表条目通常用点排列显示；在有序列表里，列表条目通常在左边显示按升序排列的计数，例如数字或者字母。</p></blockquote><p>属性说明：</p><p>value：这个整数型属性表明了本 &lt;li&gt; 元素在有序列表 （由 &lt;ol&gt; 元素定义）中的序号。本属性值只能用数字，即使列表使用罗马数字或字母来展示。随后的列表条目会从设置的值开始计数。value 属性对于无序列表 (&lt;ul&gt;) 或者菜单 (&lt;menu&gt;) 无效。注意：这个属性在 HTML 4 中废弃，但是在 HTML 5 中重新引入。在 Gecko 9.0 之前，负值会错误地转换为 0。Gecko 9.0 开始，所有整数值都可以正确解析。</p><p>type：这个字符型属性表明了数字的类型：</p><ul><li>a: 小写字母</li><li>A: 大写字母</li><li>i: 小写罗马数字</li><li>I: 大写罗马数字</li><li>1: 数字</li></ul><p>本属性值将覆盖 &lt;ol&gt; 元素中的同名属性值（若存在）。注意：本属性在 HTML5 中已废弃：使用 CSS <code>list-style-type</code> 属性来代替。</p><h3 id="dl">&lt;dl&gt;</h3><blockquote><p>HTML 描述列表元素，是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。</p></blockquote><ul><li><p>如果 &lt;dl&gt; 元素的子元素包含一个键值对，则显示其中内容。</p><ul><li><p>零组或多组 dom 结构，每组 dom 结构中包含一个或多个 &lt;dt&gt; 元素，以及 一个或多个 &lt;dd&gt; 元素，可通过 &lt;script&gt; 元素和 &lt;template&gt; 元素进行混入。</p></li><li><p>一组或多组 &lt;div&gt; 元素，可通过 &lt;script&gt; 元素和 &lt;template&gt; 元素混入。</p></li></ul></li></ul><p>示例：</p><p>单条属于单条描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Firefox<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>A free, open source, cross-platform, graphical web browser<br>      developed by the Mozilla Corporation and hundreds of volunteers.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- other terms and definitions --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614054442933-1297c6c4-4a29-417c-b66e-4a074ac5c7d0.png" alt="img"></p><p>多条术语单条描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Firefox<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Mozilla Firefox<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Fx<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>A free, open source, cross-platform, graphical web browser<br>      developed by the Mozilla Corporation and hundreds of volunteers.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- other terms and definitions --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614054473520-f81921dc-9187-4d82-a02b-c1551bde8bf9.png" alt="img"></p><p>单条术语多条描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Firefox<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>A free, open source, cross-platform, graphical web browser<br>      developed by the Mozilla Corporation and hundreds of volunteers.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>The Red Panda also known as the Lesser Panda, Wah, Bear Cat or Firefox,<br>      is a mostly herbivorous mammal, slightly larger than a domestic cat<br>      (60 cm long).<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- other terms and definitions --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614054665488-d348ea00-8ca2-4eba-8275-94c49ad859ca.png" alt="img"></p><p>多条术语多条描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">dt</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;: &quot;</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Godzilla<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Born<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>1952<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Birthplace<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Japan<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Color<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 &lt;div&gt; 元素包装名称值组：WHATWG HTML允许在 &lt;div&gt; 元素中的 &lt;dl&gt; 元素中包装每个名称 - 值组。当使用元数据时，或全局属性适用于整个组或用于样式时，这可能很有用。</p><p>注意：</p><p>请不要将该元素（也不要用 &lt;ul&gt; 元素）用来在页面创建具有缩进效果的内容。虽然这样的结果样式看上去没问题，但是，这是很糟糕的做法，并且语义也不清晰。要改变描述列表中描述的缩进量，请使用 CSS margin 属性。</p><h3 id="dt">&lt;dt&gt;</h3><blockquote><p>HTML 术语定义元素，用于在一个定义列表中声明一个术语。该元素仅能作为 &lt;dl&gt; 的子元素出现。通常在该元素后面会跟着 &lt;dd&gt; 元素， 然而，多个连续出现的 &lt;dt&gt; 元素都将由出现在它们后面的第一个 &lt;dd&gt; 元素定义。</p></blockquote><ul><li><p>不能包含 &lt;header&gt; 元素、 &lt;footer&gt; 元素或者其他章节、标题内容。</p></li><li><p>该元素需要出现在 &lt;dt&gt; 元素或者 &lt;dd&gt; 元素之前，并且在 &lt;dl&gt; 元素中。</p></li></ul><h3 id="dd">&lt;dd&gt;</h3><blockquote><p>HTML 描述元素，用来指明一个描述列表 (&lt;dl&gt;) 元素中一个术语的描述。</p></blockquote><ul><li>这个元素只能作为描述列表元素的子元素出现，该元素需要出现在 &lt;dt&gt; 元素和 &lt;dd&gt; 元素之后，并且在一个 &lt;dl&gt; 元素里。</li></ul><p>属性说明：</p><p><strong>nowrap</strong>：如果这个属性的值为 yes，那么定义的描述文字将不会包裹。默认值为 no。</p><h3 id="figure">&lt;figure&gt;</h3><blockquote><p>代表一段独立的内容, 经常与说明（caption） &lt;figcaption&gt; 配合使用, 并且作为一个独立的引用单元。当它属于主内容流（main flow）时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。</p></blockquote><ul><li><p>通常， &lt;figure&gt; 是图像，插图，图表，代码片段等，在文档的主流程中引用，但可以移动到文档的另一部分或附录而不影响主流程。</p></li><li><p>作为 sectioning root， &lt;figure&gt; 元素的内容轮廓将从文档的主要轮廓中排除。</p></li><li><p>通过在其中插入 &lt;figcaption&gt;（作为第一个或最后一个子元素），可以将标题与 &lt;figure&gt; 元素相关联。图中找到的第一个 &lt;figcaption&gt; 元素显示为图的标题。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>Get browser details using <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>navigator<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>function NavigatorExample() &#123;<br>  var txt;<br>  txt = &quot;Browser CodeName: &quot; + navigator.appCodeName;<br>  txt+= &quot;Browser Name: &quot; + navigator.appName;<br>  txt+= &quot;Browser Version: &quot; + navigator.appVersion ;<br>  txt+= &quot;Cookies Enabled: &quot; + navigator.cookieEnabled;<br>  txt+= &quot;Platform: &quot; + navigator.platform;<br>  txt+= &quot;User-agent header: &quot; + navigator.userAgent;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>Edsger Dijkstra:<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>If debugging is the process of removing software bugs,<br>  then programming must be the process of putting them in.<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="figcaption">&lt;figcaption&gt;</h3><p>是与其相关联的图片的说明/标题，用于描述其父节点 &lt;figure&gt; 元素里的其他数据。这意味着 &lt;figcaption&gt; 在 &lt;figure&gt; 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。</p><ul><li>父元素只能是&lt;figure&gt; 。</li><li>&lt;figcaption&gt; 元素必须是 &lt;figure&gt; 的第一个或者最后一个子节点。</li></ul><h3 id="div">&lt;div&gt;</h3><blockquote><p>HTML 文档分区元素，是一个通用型的流内容容器，在不使用CSS的情况下，其对内容或布局没有任何影响。</p></blockquote><p>作为一个“纯粹的”容器， &lt;div&gt; 元素在语义上不表示任何特定类型的内容。然而，其可以将内容分组，从而可以使用 class 或是 id 属性方便的定义内容的格式，也可以在一段文档中划分标记出使用另一种语言书写的内容（使用lang 属性）等等。</p><ul><li>&lt;div&gt; 元素应当仅在没有任何其它语义元素（比如 &lt;article&gt; 或 &lt;nav&gt; ）可用时使用。</li></ul><h2 id="文字形式">文字形式</h2><h3 id="a">&lt;a&gt;</h3><blockquote><p>或称锚元素，可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。</p></blockquote><ul><li>&lt;a&gt; 不能作为 &lt;a&gt; 的父元素</li></ul><p>属性说明：</p><p><strong>download</strong>：此属性指示浏览器下载 URL 而不是导航到它，因此将提示用户将其保存为本地文件。如果属性有一个值，那么此值将在下载保存过程中作为预填充的文件名（如果用户需要，仍然可以更改文件名）。此属性对允许的值没有限制，但是 <code>/</code> 和 <code>\</code> 会被转换为下划线。大多数文件系统限制了文件名中的标点符号，故此，浏览器将相应地调整建议的文件名。</p><p><strong>注意</strong>：</p><ul><li>此属性仅适用于同源 URL。</li><li>尽管 HTTP URL 需要位于同一源中，但是可以使用 blob: URL 和 data: URL ，以方便用户下载使用 JavaScript 生成的内容（例如使用在线绘图 Web 应用程序创建的照片）。</li><li>如果 HTTP 头中的 Content-Disposition 属性赋予了一个不同于此属性的文件名，HTTP 头属性优先于此属性。</li><li>如果 HTTP 头属性 Content-Disposition 被设置为 inline（即 Content-Disposition=‘inline’），那么 Firefox 优先考虑 HTTP 头 Content-Dispositiondownload 属性。</li></ul><p><strong>href</strong>：包含超链接指向的 URL 或 URL 片段。URL 片段是哈希标记（#）前面的名称，哈希标记指定当前文档中的内部目标位置（HTML 元素的 ID）。URL 不限于基于 Web（HTTP）的文档，也可以使用浏览器支持的任何协议。例如，在大多数浏览器中正常工作的 <code>file:</code>、<code>ftp:</code> 和 <code>mailto:</code>。</p><p><strong>注意</strong>： 可以使用 <code>href=&quot;#top&quot;</code> 或者 <code>href=&quot;#&quot;</code> 链接返回到页面顶部。这种行为是 HTML5 的特性。</p><p><strong>hreflang</strong>：该属性用于指定链接文档的人类语言。其仅提供建议，并没有内置的功能。hreflang 允许的值取决于HTML5 <a href="http://www.ietf.org/rfc/bcp/bcp47.txt">BCP47</a>。</p><p><strong>ping</strong>：包含一个以空格分隔的url列表，当跟随超链接时，将由浏览器(在后台)发送带有正文 PING 的 POST 请求。通常用于跟踪。</p><p><strong>referrerpolicy</strong>：表明在获取URL时发送哪个提交者（referrer）:</p><ul><li>“no-referrer” 表示 Referer: 头将不会被发送。</li><li>“no-referrer-when-downgrade” 表示当从使用HTTPS的页面导航到不使用 TLS(HTTPS)的来源 时不会发送 Referer: 头。如果没有指定策略，这将是用户代理的默认行为。</li><li>“origin” 表示 referrer将会是页面的来源，大致为这样的组合：主机和端口（不包含具体的路径和参数的信息）。</li><li>“origin-when-cross-origin” 表示导航到其它源将会限制为这种组合：主机 + 端口，而导航到相同的源将会只包含 referrer的路径。</li><li>‘strict-origin-when-cross-origin’</li><li>“unsafe-url” 表示 referrer将会包含源和路径（domain + path）（但是不包含密码或用户名的片段）。这种情况是不安全的，因为它可能会将安全的URLs数据泄露给不安全的源。</li></ul><p><strong>rel</strong>：该属性指定了目标对象到链接对象的关系。该值是空格分隔的列表类型值。</p><p><strong>target</strong>：该属性指定在何处显示链接的资源。 取值为标签（tab），窗口（window），或框架（iframe）等浏览上下文的名称或其他关键词。以下关键字具有特殊的意义:</p><ul><li><p>_self : 当前页面加载，即当前的响应到同一 HTML 4 frame（或 HTML5 浏览上下文）。此值是默认的，如果没有指定属性的话。</p></li><li><p>_blank : 新窗口打开，即到一个新的未命名的 HTML4 窗口或 HTML5 浏览器上下文</p></li><li><p>_parent : 加载响应到当前框架的HTML4父框架或当前的 HTML5 浏览上下文的父浏览上下文。如果没有 parent 框架或者浏览上下文，此选项的行为方式与 _self 相同。</p></li><li><p>_top : HTML4 中：加载的响应成完整的，原来的窗口，取消所有其它 frame 。 HTML5 中：加载响应进入顶层浏览上下文（即，浏览上下文，它是当前的一个的祖先，并且没有 parent ）。如果没有 parent 框架或者浏览上下文，此选项的行为方式与 _self 相同</p></li></ul><p>注意：</p><ul><li><p>使用target时，考虑添加 <code>rel=&quot;noopener noreferrer&quot;</code> 以防止针对 window.opener API 的恶意行为。</p></li><li><p>使用 <code>target = &quot;_ blank&quot;</code> 链接到另一个页面将在与页面相同的进程中运行新页面。如果新页面正在执行繁琐的 JS，那么页面的性能可能会受到影响。为了避免这种情况，请使用 <code>rel = noopener</code>。</p></li></ul><p><strong>type</strong>：该属性指定在一个 MIME type 链接目标的形式的媒体类型。其仅提供建议，并没有内置的功能。</p><p>已废弃的属性：</p><p><em>charset</em>：此属性定义链接资源的字符编码。该值是一个空格- 和/或逗号分隔的RFC 2045中定义的字符集列表。默认值是ISO-8859-1。</p><p><em>coords</em>：对于使用对象的形状，此属性使用逗号分隔的数字列表来定义对象在页面上的坐标。</p><p><em>name</em>：该属性在页面中定义锚点的目标位置时是必须的。 name 的值类似于ID核心属性值，该属性值在文档中是唯一的且由数字字母标示符所组成的。在 HTML 4.01 规范中, id 和 name 都可以使用 &lt;a&gt; 元素，只要他们有相同的值。</p><p><em>rev</em>：该属性用于指定当前文档与被链接文档的关系。用于 &lt;a&gt; 标签的可选属性 rel 和 rev 分别表示源文档与目标文档之间正式的关系和方向。rel 属性指定从源文档到目标文档的关系，而 rev 属性则指定从目标文档到源文档的关系。这两种属性可以在 &lt;a&gt; 标签中同时使用。对于网页编者来说，这个属性很有用，可以通过它来查看外链的来源。</p><p><em>shape</em>：此属性用于定义一个可选的超链接相关的一个数字来创建图像映射区域，该属性的值是圆，默认情况下，多边形，矩形。 所述的coords 属性的格式取决于形状的值。对于圆，该值的x，y，r其中x和y为圆心像素坐标，r是像素值半径。对于矩形，该coords 属性应该是x，y，w，h。x，y值定义的矩形的左上角的位置，而w和h分别定义宽度和高度。多边形形状的值需要x1，y1，x2，y2，…值来定义coords。每对x，y定义多边形的一个点，连续点由直线接合和，最后一个点连接到第一个点。默认为形状的值需要将整个封闭区域，典型的图像，可以使用。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 链接到外部地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 链接到本页的某个部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#footer_email&quot;</span>&gt;</span>底部邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 创建一个可点击的图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 创建一个email链接 --&gt;</span><br><span class="hljs-comment">&lt;!-- 通过链接将用户的电子邮件程序打开 让他们发送新邮件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:nowhere@mozilla.org&quot;</span>&gt;</span>Send email to nowhere<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 创建电话链接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:491570156&quot;</span>&gt;</span>49 157 0156<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用 download 属性将 &lt;canvas&gt; 保存为 PNG 格式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    var link = document.createElement(&#x27;a&#x27;);<br>    link.innerHTML = &#x27;download image&#x27;;<br>    link.addEventListener(&#x27;click&#x27;, function(ev) &#123;<br>        link.href = canvas.toDataURL();<br>        link.download = &quot;mypainting.png&quot;;<br>    &#125;, false);<br>    document.body.appendChild(link);<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>备注</strong>：html 3.2 只定义 name, href, rel, rev, 和 title 属性。</p><p><strong>无障碍建议</strong>：</p><p>锚点标签常常通过将 href 属性设置为 “#” 或 “javascript:void(0)” 来创造一个能阻止页面刷新的伪按钮，这种方式被滥用。 这些属性值会在拖动 或 复制链接时导致意外行为，在新窗口 或 新标签打开链接，加入书签以及 JavaScript 仍在下载时会出现错误或被禁用。这也会向辅助技术（如屏幕阅读器）传达不正确的语义。在这些情况下，推荐使用 &lt;button&gt; 来代替。通常情况下，您应该只将锚点用于正常的 URL 导航。</p><h3 id="em">&lt;em&gt;</h3><blockquote><p>HTML 着重元素 (&lt;em&gt;) 标记出需要用户着重阅读的内容， &lt;em&gt; 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。</p></blockquote><ul><li>通常地，该元素会被浏览器展示为斜体文本， 但是，它不应该仅仅用于应用斜体样式；为此目的，请使用CSS样式。使用 &lt;cite&gt; 元素标记作品的标题（书籍，戏剧，歌曲等）；它通常也采用斜体样式，但具有不同的含义。使用 &lt;strong&gt; 元素标记比周围文本更重要的文本。</li><li>&lt;em&gt; 元素通常被用于指示一个隐式或显式的对比。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  在 HTML 5中，以前的<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>块级(block-level)<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>内容现在被称为<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>流(flow)<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>内容。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p>在 HTML 5中，以前的 <em>块级(block-level)</em> 内容现在被称为 <em>流(flow)</em> 内容。</p><h3 id="i-vs-em">&lt;i&gt; vs. &lt;em&gt;</h3><p>新的开发人员看到多个元素产生相似的效果，经常被混淆。&lt;em&gt; 和 &lt;i&gt; 就是一对常见的例子，因为它们都对文字斜体化。它们的区别是什么？应该使用哪一个？</p><p>在默认情况下，它们的视觉效果是一样的。但语义是不同的。 &lt;em&gt; 标签表示其内容的着重强调，而 &lt;i&gt; 标签表示从正常散文中区分出的文本，例如外来词，虚构人物的思想，或者当文本指的是一个词语的定义，而不是其语义含义。（作品的标题，例如书籍或电影的名字，应该使用 &lt;cite&gt;。）</p><p>这意味着，正确使用哪一个取决于具体的场景。两者都不是纯粹为了装饰的目的，那是CSS样式所做的。</p><p>一个 &lt;em&gt; 的例子可能是：“Just do it already!”，或：“We had to do something about it”。人或软件在阅读文本时，会对斜体字的发音使用重读强调。</p><p>一个 &lt;i&gt; 的例子可能是：“The Queen Mary sailed last night”。在这里，没有对 “Queen Mary” 这个词添加强调或重要性。它只是表明，谈论的对象不是一个名叫玛丽的女王，而是一艘名字叫玛丽的船。另一个 &lt;i&gt; 的例子可能是：“The word the is an article”。</p><h3 id="strong">&lt;strong&gt;</h3><blockquote><p>Strong 元素 (&lt;strong&gt;)表示文本十分重要，一般用粗体显示。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>进行x操作时，<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>必须<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>先进行y操作，然后再继续。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p>在执行x时，<strong>必须</strong>先执行y，然后再继续。</p><h3 id="Bold-vs-Strong">Bold vs. Strong</h3><p>新的开发者经常感到疑惑，为什么在一个渲染的网站上会有这么多方式来表达同样的东西。Bold和Strong可能就是这其中的一种。为什么使用 &lt;strong&gt;&lt;/strong&gt; 而不是 &lt;b&gt;&lt;/b&gt; ? 使用strong的话你不得不打更多的字母，却产生出和 b 同样的效果，对吧？</p><p>也许并不是； strong是一个逻辑状态，而 bold 是一个物理状态。逻辑状态分离内容和表现形式，使用逻辑状态允许你用各种不同的方式来表达。比如你想把文字渲染成红色，使用其它大小的字体、带有下划线或其他样式，而不是加粗的样式。必须要理解使用strong呈现出的表现形式不同于单纯的加粗。 因为bold是一个物理状态，他没有区分表现形式和内容。如果让bold做了加粗文本外的其它任何事情，都将会令人困惑而且也不符合逻辑。</p><p>同样应该注意 &lt;b&gt;&lt;/b&gt; 还有其他用途，比如想单纯地吸引注意而不增加其重要性。</p><h3 id="Emphasis-vs-Strong">Emphasis vs. Strong</h3><p>在 HTML4 时， Strong 简单地表示一个更强的强调(emphasis)，而在HTML5中，这个元素被描述为表征“内容强烈的重要性(strong importance for its contents) ”。这是一个重要的区别。Em标签(Emphasis)用于改变一个句子的意思(比如&quot;我&lt;em&gt;喜欢&lt;/em&gt;胡萝卜&quot; 和&quot;我喜欢&lt;em&gt;胡萝卜&lt;/em&gt;&quot;，分别强调喜欢和胡萝卜), Strong用来对一个句子的部分增加重要性(比如 “警告! 这非常危险。”) Strong和Emphasis都可以分别通过嵌套来增加相对重要性或强调重点。</p><h3 id="small">&lt;small&gt;</h3><blockquote><p>HTML 中的&lt;small&gt;元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the first sentence.  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>This whole sentence is in small letters.<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the first sentence. <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.8em&quot;</span>&gt;</span>This whole sentence is in small letters.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p>This is the first sentence.  <small>This whole sentence is in small letters.</small></p><p>This is the first sentence. <span style="font-size:0.8em">This whole sentence is in small letters.</span></p><p><strong>注意</strong>：尽管 &lt;small&gt; 元素， &lt;b&gt; 元素和 &lt;i&gt; 元素被认为违反了结构和样式分离的原则, 但是在HTML5中是允许使用这三个元素的. 读者应该自行判断使用 &lt;small&gt; 还是CSS。</p><h3 id="s">&lt;s&gt;</h3><blockquote><p>使用删除线来渲染文本。使用 &lt;s&gt; 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 &lt;s&gt; ；为此，提倡使用 &lt;del&gt; 和 &lt;ins&gt; 元素。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>今日特惠：三文鱼<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span> 已售完。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration:line-through;&quot;</span>&gt;</span>今日特惠：三文鱼<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 已售完。<br></code></pre></td></tr></table></figure><p>结果：</p><p><s>今日特惠：三文鱼</s> 已售完。<br> <span style="text-decoration:line-through;">今日特惠：三文鱼</span> 已售完。</p><p><strong>无障碍问题</strong>：</p><p>大多数屏幕阅读技术在其默认配置中并没有宣布 s 元素的存在。可以通过使用 CSS content 属性以及 pseudo-elements 之后的 ::before 和 ::after 来宣布它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">s::before,<br>s::after &#123;<br>  clip-path: inset(100%);<br>  clip: rect(1px, 1px, 1px, 1px);<br>  height: 1px;<br>  overflow: hidden;<br>  position: absolute;<br>  white-space: nowrap;<br>  width: 1px;<br>&#125;<br>s::before &#123;<br>  content: &quot; [start of stricken text] &quot;;<br>&#125;<br>s::after &#123;<br>  content: &quot; [end of stricken text] &quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>一些使用屏幕阅读器的用户会禁用那些会产生额外冗长的宣布内容。因此，重要的是不要滥用这一技巧，只有在不知道内容被删除会对理解产生不利影响的情况下才应用这一技巧。</p><h3 id="cite">&lt;cite&gt;</h3><blockquote><p>HTML引用（ Citation）标签 (&lt;cite&gt;) 表示一个作品的引用，且必须包含作品的标题。这个引用可能是一个根据适当的上下文约定关联引用的元数据的缩写。</p></blockquote><ul><li>适用场合可能包括一本书，一张纸，一篇散文，一首诗，一个分数，一首歌，一部电影，一个电视节目，一个游戏，一个雕塑，一幅画，戏剧制作，一个剧本，一个歌剧，一种音乐，一个展览 ，一个法律案件报告，一个计算机程序，一个网站，一个网页，博客或评论，论坛帖子或评论 ，鸣叫，或者书面或口头陈述，等等。</li><li>值得注意的是，W3C 标准允许在 &lt;cite&gt; 元素中包含引用内容的作者信息。然而 WHATWG 规范不允许在 &lt;cite&gt; 元素中出现人名。</li><li>要标明 &lt;blockquote&gt; 或 &lt;q&gt; 之中内容的引用来源，可以使用元素的 cite 属性。</li><li>通常，浏览器默认使用斜体来展示 &lt;cite&gt; 元素中的内容。可以通过指定 &lt;cite&gt; 元素的 font-style 样式来覆盖这种默认行为。</li></ul><h3 id="q">&lt;q&gt;</h3><blockquote><p>HTML引用标签 (&lt;q&gt;)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 &lt;blockquote&gt; 替代。</p></blockquote><ul><li>大多数现代浏览器，会为 &lt;q&gt; 文本添加引号(“”)。旧浏览器可能需要使用 CSS 添加引号。IE、Edge 与 Firefox、Chrome 引号样式略有不同。</li></ul><p>属性说明：</p><p><strong>cite</strong>：这个属性的值是URL，意在指出被引用的文本的源文档或者源信息. 这个属性重在解释这个引用的参考或者是上下文。</p><h3 id="dfn">&lt;dfn&gt;</h3><blockquote><p>HTML 定义元素 (&lt;dfn&gt;) 表示术语的一个定义。</p></blockquote><ul><li>&lt;dfn&gt; 元素标记了被定义的术语；术语定义应当在 &lt;p&gt; ， &lt;section&gt; 或定义列表 (通常是 &lt;dt&gt; ， &lt;dd&gt; 对)中给出。</li><li>被定义术语的值由下列规则确定：<ul><li>如果 &lt;dfn&gt; 元素有一个 title 属性，那么该术语的值就是该属性的值。</li><li>否则，如果它仅包含一个 &lt;abbr&gt; 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。</li><li>否则， &lt;dfn&gt; 元素的文本内容就是该术语的值。</li></ul></li></ul><p><strong>注意</strong>：在 HTML5 中，title 属性拥有特殊含义。</p><p>示例：下列示例是合法的HTML5。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Define &quot;The Internet&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- 定义 &quot;互联网&quot; 这个名词 --&gt;</span><br><span class="hljs-comment">&lt;!-- 互联网是一个全球互联网络系统，使用互联网协议套件(TCP/IP)为全球数十亿用户提供服务。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dfn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;def-internet&quot;</span>&gt;</span>The Internet<span class="hljs-tag">&lt;/<span class="hljs-name">dfn</span>&gt;</span> is a global system of interconnected networks that use the Internet Protocol Suite (TCP/IP) to serve billions of users worldwide.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在同一文档的后面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Define &quot;World-Wide Web&quot; and reference definition for &quot;the Internet&quot; --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 定义“万维网”，并引用“互联网”的定义 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dfn</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;World-Wide Web&quot;</span>&gt;</span>WWW<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dfn</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 万维网(WWW)是通过互联网访问的相互链接的超文本文件系统。 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>The World-Wide Web (WWW) is a system of interlinked hypertext documents accessed on <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#def-internet&quot;</span>&gt;</span>the Internet<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="abbr">&lt;abbr&gt;</h3><blockquote><p>HTML 缩写元素（&lt;abbr&gt;）用于代表缩写，并且可以通过可选的 title 属性提供完整的描述。若使用 title 属性，则它必须且仅可包含完整的描述内容。</p></blockquote><p>在使用 &lt;abbr&gt; 元素的时候，title 属性有特殊的语法含义; 它必须包含对一个缩写完全天然可读的扩写或者描述。这些文本通常会作为提示，在鼠标指针覆盖到该元素时显示作为一个提示。</p><p>你使用的每一个 &lt;abbr&gt; 元素与其它同类元素都是相互独立的，为其中一个提供 title 不会自动把相同的附加文字依附到其它内容文字相同的元素上。</p><p>当然，我们不是所有的缩写都要使用 &lt;abbr&gt; 标记。但是其在下面一些场景很有帮助：</p><ul><li>当你想为缩写在文档流外提供一段扩展或定义的时候，为 &lt;abbr&gt; 设置一个合适的 title 。</li><li>在定义一个读者可能不太熟悉的缩写时，使用 &lt;abbr&gt; 和 title 属性或内联的文本来表现这个术语。</li><li>当文本中出现需要进行语义上的标注的缩写词时， &lt;abbr&gt; 元素可用于依次将其作用样式和脚本。</li><li>可以将 &lt;abbr&gt; 与 &lt;dfn&gt; 配合使用来建立缩写或首字母缩略词的定义。</li></ul><p><strong>注意</strong>：</p><p>在有 单复数 的语言中（即物体数量会影响句子语法的语言）， &lt;abbr&gt; 元素和其中的 title 属性应当单复数一致。这在阿拉伯语这样超过二数的语言中非常重要，在英语中也有一定的影响。</p><p>虽然完全为了网站制作者的方便，所有的浏览器都默认把这个元素显示为行内元素 (display: inline) ， 但是默认样式在不同浏览器中存在差别：</p><ul><li>一些浏览器，比如 IE，对它的添加的样式和 &lt;span&gt; 元素的样式完全相同。</li><li>Opera、Firefox 和其他一些浏览器给这个元素的内容添加一条点状下划线 。</li><li>一些浏览器不仅添加点状下划线，而且还把元素的内容添加小写大写字母的样式。若要避免这种样式，在 CSS 中添加 font-variant: none 。</li></ul><h3 id="data">&lt;data&gt;</h3><blockquote><p>HTML &lt;data&gt; 元素将一个指定内容和机器可读的翻译联系在一起。但是，如果内容是与时间或者日期相关的，则一定要使用 &lt;time&gt;。</p></blockquote><p>属性说明：</p><p><strong>value</strong>：该属性指定元素内容所对应的数据，或者说“机器可读的翻译”。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>新产品<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;398&quot;</span>&gt;</span>迷你番茄酱<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;399&quot;</span>&gt;</span>巨无霸番茄酱<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;400&quot;</span>&gt;</span>超级巨无霸番茄酱<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="time">&lt;time&gt;</h3><blockquote><p>HTML time 标签(&lt;time&gt;) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。</p></blockquote><ul><li><p>此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。</p></li><li><p>如果给定的日期不是正常日期或者在公历中最早的日期之前，请不要使用此元素。</p></li><li><p>该元素仍在设计和讨论中(<a href="http://blog.whatwg.org/weekly-time-data">http://blog.whatwg.org/weekly-time-data</a>)</p></li></ul><p>属性说明：</p><p><strong>datetime</strong>：该属性表示此元素的时间和日期，并且属性值必须是一个有效的日期格式，并可包含时间。 如果此值不能被解析为日期，元素不会有一个关联的时间戳。</p><p><strong>pubdate</strong>：(该属性仍在被WHATWG 和 W3C组织设计和讨论中.) This Boolean attribute specifies that the date and time given by the element is the publication date of a document. The document it applies to is either the nearest ancestor article element or the document as a whole (if there is no ancestor <a href="https://developer.mozilla.org/zh-cn/HTML/Element/article">article</a> element). If true, the time element must have a corresponding date. Additionally, each time element indicating a publication date must be the only time element that does so for that document.（这个布尔属性指定元素给出的日期和时间是文档的发布日期。它所应用的文档要么是最近的祖先文章元素，要么是整个文档(如果没有祖先文章元素)。如果为真，time元素必须有相应的日期。此外，指示发布日期的 time 元素必须是该文档中惟一这样做的 time 元素。）</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The concert starts at <span class="hljs-tag">&lt;<span class="hljs-name">time</span>&gt;</span>20:00<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The concert took place on <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2001-05-15 19:00&quot;</span>&gt;</span>May 15<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This article was created on <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">pubdate</span>&gt;</span>2011-01-28<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只有 <strong>Opera</strong> 在 11.50 版本后加入了此标签。</p><h3 id="code">&lt;code&gt;</h3><blockquote><p>HTML &lt;code&gt; 元素呈现一段计算机代码. 默认情况下，它以浏览器的默认等宽字体显示。</p></blockquote><ul><li><p>中文的等宽字和正常字看起来区别不大, 因为汉字本身就是方块行. 但是仍能看出几行文字之间的对齐差异。</p></li><li><p>CSS 规则可以覆盖浏览器默认的 code 标签字体样式. 但用户设置的浏览器字体选项可能会超过 CSS 的优先级, 使之无效。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>var num=123;<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="var">&lt;var&gt;</h3><blockquote><p>HTML Variable元素（&lt;var&gt;）表示数学表达式或编程上下文中的变量名称。尽管该行为取决于浏览器，但通常使用当前字体的斜体形式显示。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> A simple equation: <span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span> = <span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>y<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span> + 2 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="samp">&lt;samp&gt;</h3><blockquote><p>用于标识计算机程序输出，通常使用浏览器缺省的 monotype 字体（例如 Lucida Console）。</p></blockquote><ul><li>可以使用 CSS 选择器 samp 定义规则来覆盖浏览器的缺省字体。不过，用户设置的偏好可能会优先于指定的 CSS 使用。</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Regular text. <span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>This is sample text.<span class="hljs-tag">&lt;/<span class="hljs-name">samp</span>&gt;</span> Regular text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="kbd">&lt;kbd&gt;</h3><blockquote><p>HTML键盘输入元素(&lt;kbd&gt;) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认 monospace 字体显示。</p></blockquote><ul><li><p>通过定义 CSS 规则可以改变 &lt;kbd&gt; 的默认字体。用户首选项设置可能会比该 CSS 规则具有更高优先级。</p></li><li><p>当 &lt;kbd&gt; 元素处于 &lt;samp&gt; 元素之中时，它代表着被系统回显的输入。</p></li><li><p>当 &lt;kbd&gt; 元素中包含 &lt;samp&gt; 元素时，该输入是基于系统输出的，比如调用某个菜单项。</p></li><li><p>当 &lt;kbd&gt; 元素处于另一个 &lt;kbd&gt; 元素之中时，它代表了一个实际的按键，或是该输入机制下的某个单位输入。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">kbd</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, <span class="hljs-number">#eee</span>, <span class="hljs-number">#fff</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#cdd5d7</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#cdd5d7</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: consolas, <span class="hljs-string">&quot;Liberation Mono&quot;</span>, courier, monospace;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">9rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">6px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Type the following in the Run dialog: <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>cmd<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>Then click the OK button.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Save the document by pressing <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Ctrl<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> + <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>S<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614065047348-20424e19-d10d-46f6-8af6-627a0b357631.png" alt="image.png"></p><h3 id="sub">&lt;sub&gt;</h3><blockquote><p>HTML &lt;sub&gt; 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。</p></blockquote><ul><li>这个元素应该只用于排版目的，也就是改变文本的位置会改变含义，例如在数学中（t<sub>2</sub>，也可以考虑使用 MathML 公式）或者化学符号（ H<sub>2</sub>O）。</li><li>这个元素不能用于样式上的目的，比如产品名称 LaTeX 的样式，这时应该使用 CSS 样式： <strong>vertical-align</strong> 属性的 <strong>sub</strong> 值能实现相同效果。</li></ul><h3 id="sup">&lt;sup&gt;</h3><blockquote><p>HTML &lt;sub&gt; 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。</p></blockquote><ul><li><p>这个元素应该只用于排版目的，也就是改变文本的位置会改变含义，例如在数学中（f<sup>4</sup>，也可以考虑使用 MathML 公式）或者在法语缩写中（ M<sup>lle</sup>，M<sup>me</sup> 或者 C<sup>ie</sup>）。</p></li><li><p>这个元素不能用于样式上的目的，比如产品名称 LaTeX 的样式，这时应该使用 CSS样式： <strong>vertical-align</strong> 属性的 <strong>super</strong> 值能实现相同效果。</p></li></ul><p><strong>注意</strong>：你不能同时使用它们，你需要 MathML 来同时产生化学符号旁边的下标和上标，代表它的序号和核子数。</p><h3 id="i">&lt;i&gt;</h3><blockquote><p>HTML元素 &lt;i&gt; 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。</p></blockquote><p><strong>注意</strong>：在较早版本的 HTML 技术参数声明中， &lt;i&gt; 标签只是一个用于将文本显示为斜体的表示性元素，很像 &lt;b&gt; 标签被用来将文本显示为粗体。现在情况不再是这样了，因为这些标签现在定义了更多的语义而不只是排版外观。 &lt;i&gt; 标签应表现一系列带有不同语义的文本，它的典型样式显示为斜体。这意味着浏览器通常任会将内容显示为斜体，但是，根据定义，不再是必须的。</p><p>该元素只在没有更适合的语义元素表示时使用。例如：</p><ul><li>使用 &lt;em&gt; 表示强调或重读。</li><li>使用 &lt;strong&gt; 表示重要性。</li><li>使用 &lt;mark&gt; 表示相关性。</li><li>使用 &lt;cite&gt; 标记著作名，如一本书、剧本或是一首歌。</li><li>使用 &lt;dfn&gt; 标记术语的定义实例。</li></ul><p>使用class属性用来识别为何使用该元素是一个很好的办法，这样的话，如果该表示以后需要改变，就可以有选择性地改变样式表。</p><h3 id="b">&lt;b&gt;</h3><blockquote><p>HTML 提醒注意（Bring Attention To）元素（&lt;b&gt;）用于吸引读者的注意到该元素的内容上（如果没有另加特别强调）。这个元素过去被认为是粗体（Boldface）元素，并且大多数浏览器仍然将文字显示为粗体。尽管如此，你不应将 &lt;b&gt; 元素用于显示粗体文字；替代方案是使用 CSS font-weight 属性来创建粗体文字。</p></blockquote><ul><li>&lt;b&gt; 应用场合如：摘要中的关键字、评论中的产品名称，或其他典型的应该加粗显示的文字（除此之外无其它特别强调）。</li><li>不要将 &lt;b&gt; 元素与 &lt;strong&gt; 、 &lt;em&gt; 或 &lt;mark&gt; 元素混淆。&lt;strong&gt; 元素表示某些重要性的文本， &lt;em&gt; 强调文本，而 &lt;mark&gt; 元素表示某些相关性的文本。 &lt;b&gt; 元素不传达这样的特殊语义信息；仅在没有其他合适的元素时使用它。</li><li>类似的，也不要用 &lt;b&gt; 元素来标记标题。如果需要表示标题，请使用 &lt;h1&gt; 到 &lt;h6&gt; 标签。此外，可以通过样式表来改变这些元素的的默认样式，结果就是它们并不一定都是粗体。</li><li>通过在 &lt;b&gt; 元素上添加 class 属性来表示额外的语义信息是一个很好的方式（例如 <code>&lt;b class=&quot;lead&quot;&gt;</code> 来表示段落中的第一句）。这可以在样式需要变动的情况下更轻松地处理不同应用场合的 &lt;b&gt; 元素，无须改动HTML。</li><li>以前 &lt;b&gt; 元素的意思就是让文本变成粗体。但从 HTML4 开始，不赞成标签表示带样式信息，于是 &lt;b&gt; 元素的含义发生了变化。</li><li>如果不是出于语义目的而使用 &lt;b&gt; 元素，那么让文本显示粗体更好的方式是使用将 CSS 的 font-weight 属性设置为 “bold”。</li></ul><h3 id="u">&lt;u&gt;</h3><blockquote><p>HTML &lt;u&gt; 元素（表意不清 标注元素）表示一个需要标注为非文本化（non-textual）的内联文本域。默认情况下渲染为一个实线下划线，可以用CSS替换。</p></blockquote><ul><li><p>此元素以前在旧版本的 HTML 中称为“下划线”元素，但有时仍会以这种方式被滥用。要为文本加下划线，您应该应用包含 CSS <strong>text-decoration</strong> 属性设置为 <strong>underline</strong> 的样式。</p></li><li><p>就像所有排版元素那样， &lt;u&gt; 在 HTML 4 中废弃，但是在 HTML 5 中恢复了一个新的语义，意思是：将文本标记为应用了某种形式的非文本注释。</p></li><li><p>在可能和超链接混淆的地方，避免使用 &lt;u&gt; 。</p></li><li><p>&lt;u&gt; 元素的有效用例包括注释拼写错误，应用 proper name mark 来表示中文文本中的专有名称以及其他形式的注释。您不应该使用 &lt;u&gt; 简单地为文字加下划线，或者表示书籍的标题。</p></li><li><p>在大多数情况下，您应该使用 &lt;u&gt; 以外的元素，例如：</p><ul><li>&lt;em&gt; 表示强调重点</li><li>&lt;b&gt; 提示注意文字</li><li>&lt;mark&gt; 标记关键词或短语</li><li>&lt;strong&gt; 表明文本具有重要意义</li><li>&lt;cite&gt; 标记书籍或其他出版物的标题</li><li>&lt;i&gt; 表示西方文本中的技术术语，音译，思想或船名</li></ul></li><li><p>要提供文本注释（与使用 &lt;u&gt; 创建的非文本注释相对），请使用 &lt;ruby&gt; 元素。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">u<span class="hljs-selector-class">.spelling</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">text-decoration</span>: red wavy underline;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This paragraph includes a <span class="hljs-tag">&lt;<span class="hljs-name">u</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;spelling&quot;</span>&gt;</span>wrnogly<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>spelled word.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此示例使用 &lt;u&gt; 元素和一些CSS来显示包含拼写错误的段落，其中错误以红色波浪下划线样式表示，这种情况通常用于此目的。</p><p>在HTML中，我们看到 &lt;u&gt; 使用了一个类 spelling，用于表示“wrongly”一词的拼写错误。</p><p>这个CSS表示当 &lt;u&gt; 元素使用类 spelling 进行样式化时，它的文本下面应该有一个红色的波浪下划线。 这是拼写错误的常见样式。也可以使用另一种常见样式  red dashed underline 。</p><p>任何使用过今天比较流行的文字处理器的人都应该熟悉结果。</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614067106139-ed70c084-8f71-4023-8a67-93ac24af8c6e.png" alt="image.png"></p><h3 id="mark">&lt;mark&gt;</h3><blockquote><p>HTML标记文本元素(&lt; Mark &gt;)表示为引用或符号目的而标记或突出显示的文本，这是由于标记的段落在封闭上下文中的相关性或重要性造成的。</p></blockquote><ul><li><p>这个 HTML mark 标签代表突出显示的文字,例如可以为了标记特定上下文中的文本而使用这个标签. 举个例子，它可以用来显示搜索引擎搜索后关键词。</p></li><li><p>&lt;mark&gt;元素的典型使用场景包括：</p><ul><li>当用在引用（ &lt;q&gt; 、 &lt;blockquote&gt; ）中时，通常用来显示有特殊意义的文本，但不在原材料中标记出来；或者是用来显示特殊审查的材料，即使原作者不认为它特别重要。</li><li>另外， &lt;mark&gt; 元素还用来显示与用户当前活动相关的一部分文档内容。例如，它可能被用于显示匹配搜索结果中的单词。</li><li>不要为了语法高亮而用 &lt;mark&gt; 元素; 你应该用 &lt;strong&gt; 元素结合适当的CSS来实现这个目的（语法高亮）。</li></ul></li><li><p>不要把 &lt;mark&gt; 元素和 &lt;strong&gt; 元素搞混淆； &lt;strong&gt; 元素用来表示文本在上下文的重要性的， 而 &lt;mark&gt; 元素是用来表示上下文的关联性的。</p></li></ul><h3 id="ruby">&lt;ruby&gt;</h3><blockquote><p>HTML &lt;ruby&gt; 元素 被用来展示东亚文字注音或字符注释。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span><br>  汉 <span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>han<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><br>  字 <span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>zi<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span><br>  明 日 <span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>(<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>ming ri<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rp</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">rp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="rt">&lt;rt&gt;</h3><blockquote><p>HTML Ruby 文本 (&lt;rt&gt;) 元素包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 &lt;ruby&gt; 元素中使用。</p></blockquote><h3 id="rp">&lt;rp&gt;</h3><blockquote><p>HTML &lt;rp&gt; 元素用于为那些不能使用 &lt;ruby&gt; 元素展示 ruby 注解的浏览器，提供随后的圆括号。</p></blockquote><ul><li>Ruby 注解用于展示东亚文字的发音，例如使用日语罗马音和汉语拼音的文字。 &lt;rp&gt; 元素用于不支持 &lt;ruby&gt; 元素的情况。 &lt;rp&gt; 的内容提供了应该展示的东西，通常是圆括号，以便表示 ruby 注解的存在。</li></ul><h3 id="bdi">&lt;bdi&gt;</h3><blockquote><p>HTML 双向隔离元素( &lt;bdi&gt; ) 告诉浏览器的双向算法将其包含的文本与周围的文本隔离，当网站动态插入一些文本且不知道所插入文本的方向性时，此功能特别有用。</p></blockquote><ul><li>尽管同样的显示效果可以通过使用 CSS 规则 unicode-bidi：隔离 &lt;span&gt; 或者其他文本格式化元素，但语义信息只能通过 &lt;bdi&gt; 元素传递。特别是，当浏览器允许忽略 CSS 样式时，在这种情况下，使用 &lt;bdi&gt; 仍然可以保证文本正确显示，而使用 CSS 样式来传递语义时就显得毫无用处。</li></ul><p>属性说明：</p><p><strong>dir</strong>：属性不继承父元素。如果没有设置，默认值即为auto，以便浏览器根据元素内容决定元素内容的方向。</p><h3 id="span">&lt;span&gt;</h3><blockquote><p>HTML &lt;span&gt; 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。&lt;span&gt; 与 &lt;div&gt; 元素很相似，但 &lt;div&gt; 是一个 块元素 而 &lt;span&gt; 则是 行内元素 .</p></blockquote><h3 id="br">&lt;br&gt;</h3><blockquote><p>HTML &lt;br&gt; 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。</p></blockquote><ul><li><p>必须有一个开始标签，并且一定不能有结束标签。</p></li><li><p>不要用 &lt;br&gt; 来增加文本之间的行间隔；应使用 CSS margin 属性或 &lt;p&gt; 元素。</p></li></ul><h3 id="wbr">&lt;wbr&gt;</h3><blockquote><p>HTML &lt;wbr&gt; 元素表示一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。</p></blockquote><ul><li><p>在 UTF-8 编码的页面中， &lt;wbr&gt; 表现为 U+200B ZERO-WIDTH SPACE （零宽空格）代码点。特别是，它表现为 Unicode bidi BN 代码点，也就是说，它对 bidi-ordering 没有影响： <code>\&lt;div dir=rtl\&gt;123,\&lt;wbr\&gt;456\&lt;/div\&gt;</code> 展示 123,456 而不是 456,123，当不拆成的两行时候。</p></li><li><p>出于相同原因， &lt;wbr&gt;元素不会在换行的地方引入连字符。为了使连字符仅仅在行尾出现，使用连字符软实体 (<code>&amp;shy;</code>) 来代替。</p></li><li><p>这个元素首先在 Internet Explorer 5.5 中实现，并且在 HTML5 中官方定义。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>http://this<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.is<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.a<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.really<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.long<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.example<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>.com/With<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/deeper<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/level<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/pages<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/deeper<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/level<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/pages<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/deeper<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/level<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/pages<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/deeper<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/level<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/pages<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/deeper<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/level<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>/pages<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614068521277-1ba705e3-f5c1-4722-9092-4f94a21f5712.png" alt="image.png"></p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614068573492-e6ee1e1f-4728-4262-9205-4c86ad938cd8.png" alt="image.png"></p><p>当页面不允许 &lt;wbr&gt; 标签后的内容完整的出现在同一行，它就会在换行，不会是浏览器默认的铺满一行再换行的模式。</p><h3 id="ins">&lt;ins&gt;</h3><blockquote><p>HTML &lt;ins&gt; 元素定义已经被插入文档中的文本。</p></blockquote><p>属性说明：</p><p><strong>citecite</strong>：属性的值指向一个文档的 URL，该文档解释了文本被插入或修改的原因。（目前该属性还没有被主流浏览器支持）</p><p><strong>datetime</strong>：该特性指示的此修改发生的时间和日期，并且该特性的值必须是一个有效的日期或者时间字符串。如果该值不能被解析为日期或者时间，则该元素不具有相关联的时间标记。</p><h3 id="del">&lt;del&gt;</h3><blockquote><p>HTML的&lt;del&gt;标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。&lt;ins&gt;标签的作用恰恰于此相反：表示文档中添加的内容。</p></blockquote><ul><li>这个标签通常（但不一定要）在文字上显示删除线。</li></ul><p>属性说明：</p><p><strong>cite</strong>：提供一个URI，其中的资源解释作出修改的原因（比如：根据某次会议讨论）。</p><p><strong>datetime</strong>：这个属性说明修改的时间和日期，这里的时间和日期格式要符合规范。如果设置的值不符合该规范，那么它将没有任何意义。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>原价：$9999<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>现价：$1999<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="嵌入内容">嵌入内容</h2><h3 id="img">&lt;img&gt;</h3><blockquote><p>HTML &lt;img&gt; 元素将一份图像嵌入文档。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 500px; max-height: 500px;&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://scpic.chinaz.net/files/pic/pic9/202102/apic30845.jpg&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;高清人体图片&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子展示了 &lt;img&gt; 元素的用法：</p><ul><li><p><strong>src</strong> 属性是必须的，它包含了你想嵌入的图片的文件路径。</p></li><li><p><strong>alt</strong> 属性包含一条对图像的文本描述，这不是强制性的，但对可访问性而言，它难以置信地有用——屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。如果由于某种原因无法加载图像，普通浏览器也会在页面上显示 alt 属性中的备用文本：例如，网络错误、内容被屏蔽或链接过期时。</p><ul><li>alt 属性的值应该清晰、简洁地描述图像的内容。它不应该描述“图像的存在”，或仅仅包含图像的文件名。如果因为图像没有等价的文本描述， alt 属性只得不写或留白，那么可以考虑使用其他方法来呈现图像试图传递的内容。当图像上没有 alt 属性时，一些屏幕阅读器可能会读出图像的文件名。如果文件名不能代表图像的内容，甚至是一团乱码，这可只能造成令人迷惑的体验。</li></ul></li></ul><p>支持的格式：</p><table><thead><tr><th>缩写</th><th>文件格式</th><th>MIME 类型</th><th>文件拓展名</th></tr></thead><tbody><tr><td>APNG</td><td>Animated Portable Network Graphics 动态便携式网络图像</td><td>image/apng</td><td>.apng</td></tr><tr><td>BMP</td><td>Bitmap file 位图文件</td><td>image/bmp</td><td>.bmp</td></tr><tr><td>GIF</td><td>Graphics Interchange Format 图像互换格式</td><td>image/gif</td><td>.gif</td></tr><tr><td>ICO</td><td>Microsoft Icon 微软图标</td><td>image/x-icon</td><td>.ico, .cur</td></tr><tr><td>JPEG</td><td>Joint Photographic Expert Group image 联合影像专家小组图像</td><td>image/jpeg</td><td>.jpg, .jpeg, .jfif, .pjpeg, .pjp</td></tr><tr><td>PNG</td><td>Portable Network Graphics 便携式网络图像</td><td>image/png</td><td>.png</td></tr><tr><td>SVG</td><td>Scalable Vector Graphics 可缩放矢量图形</td><td>image/svg+xml</td><td>.svg</td></tr><tr><td>TIFF</td><td>Tagged Image File Format 标签图像文件格式</td><td>image/tiff</td><td>.tif, .tiff</td></tr><tr><td>WebP</td><td>Web Picture format 万维网图像格式</td><td>image/webp</td><td>.webp</td></tr></tbody></table><p>如果在加载或渲染图像时发生错误，且设置了至少一个 <code>onerror</code> 事件处理器来处理 error 事件，那么设置的事件处理器就会被调用。这样的错误可能发生在各种不同的情况下，包括：</p><ul><li>src 属性的属性值为空（“”）或者 null。</li><li>src 属性的 URL 和用户正在浏览的页面的 URL 完全相同。</li><li>图像出于某些原因损坏了，从而无法加载。</li><li>图像的元数据被破坏了，无法检索它的分辨率/宽高，而且在 &lt;img&gt; 元素的属性中没有指定宽度和/或高度。</li><li>用户代理尚未支持该图片所用的格式。</li></ul><h3 id="iframe">&lt;iframe&gt;</h3><blockquote><p>HTML内联框架元素 (&lt;iframe&gt;) 表示嵌套的browsing context。它能够将另一个HTML页面嵌入到当前页面中。</p></blockquote><ul><li><p>每个嵌入的浏览上下文（embedded browsing context）都有自己的 会话历史记录 (session history)和 DOM树 。包含嵌入内容的浏览上下文称为父级浏览上下文。顶级浏览上下文（没有父级）通常是由 Window 对象表示的 浏览器 窗口。</p></li><li><p>页面上的每个 &lt;iframe&gt; 都需要增加内存和其它计算资源，这是因为每个浏览上下文都拥有完整的文档环境。虽然理论上来说你能够在代码中写出来无限多的 &lt;iframe&gt; ，但是你最好还是先看看这么做会不会导致某些性能问题。</p></li></ul><p>属性说明：</p><p><strong>allow</strong>：用于为&lt;iframe&gt;指定其特征策略。</p><ul><li><p>fullscreen：可以通过调用 &lt;iframe&gt; 的 requestFullscreen() 方法激活全屏模式。</p></li><li><p>payment：跨域的 &lt;iframe&gt; 就可以调用 Payment Request API。</p></li></ul><p><strong>csp</strong>：对嵌入的资源配置内容安全策略。查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLIFrameElement/csp">HTMLIFrameElement.csp</a> 获取详情。</p><p><strong>importance</strong>：表示 &lt;iframe&gt; 的 src 属性指定的资源的加载优先级。允许的值有：</p><ul><li><p>auto：(default)不指定优先级。浏览器根据自身情况决定资源的加载顺序</p></li><li><p>high：资源的加载优先级较高</p></li><li><p>low：资源的加载优先级较低</p></li></ul><p><strong>name</strong>：用于定位嵌入的浏览上下文的名称。该名称可以用作 &lt;a&gt; 标签与 &lt;form&gt; 标签的 target 属性值，也可以用作 &lt;input&gt; 标签和 &lt;button&gt; 标签的 formtarget 属性值，还可以用作 window.open() 方法的 windowName 参数值。</p><p><strong>referrerpolicy</strong>：表示在获取 iframe 资源时如何发送 referrer 首部：</p><ul><li>no-referrer: 不发送 Referer 首部。</li><li>no-referrer-when-downgrade (default): 向不受 TLS (HTTPS) 保护的 origin 发送请求时，不发送 Referer 首部。</li><li>origin: referrer 首部中仅包含来源页面的源。换言之，仅包含来源页面的 scheme, host, 以及 port。</li><li>origin-when-cross-origin: 发起跨域请求时，仅在 referrer 中包含来源页面的源。发起同源请求时，仍然会在 referrer 中包含来源页面在服务器上的路径信息。</li><li>same-origin: 对于 same origin （同源）请求，发送 referrer 首部，否则不发送。</li><li>strict-origin: 仅当被请求页面和来源页面具有相同的协议安全等级时才发送 referrer 首部（比如从采用 HTTPS 协议的页面请求另一个采用 HTTPS 协议的页面）。如果被请求页面的协议安全等级较低，则不会发送 referrer 首部（比如从采用 HTTPS 协议的页面请求采用 HTTP 协议的页面）。</li><li>strict-origin-when-cross-origin: 当发起同源请求时，在 referrer 首部中包含完整的 URL。当被请求页面与来源页面不同源但是有相同协议安全等级时（比如 HTTPS→HTTPS），在 referrer 首部中仅包含来源页面的源。当被请求页面的协议安全等级较低时（比如 HTTPS→HTTP），不发送 referrer 首部。</li><li>unsafe-url: 始终在 referrer 首部中包含源以及路径 （但不包括 fragment，密码，或用户名）。这个值是不安全的, 因为这样做会暴露受 TLS 保护的资源的源和路径信息。</li></ul><p><strong>sandbox</strong>：该属性对呈现在 iframe 框架中的内容启用一些额外的限制条件。属性值可以为空字符串（这种情况下会启用所有限制），也可以是用空格分隔的一系列指定的字符串。有效的值有：</p><ul><li><p>allow-downloads-without-user-activation : 允许在没有征求用户同意的情况下下载文件.</p></li><li><p>allow-forms: 允许嵌入的浏览上下文提交表单。如果没有使用该关键字，则无法提交表单。</p></li><li><p>allow-modals: 允许嵌入的浏览上下文打开模态窗口。</p></li><li><p>allow-orientation-lock: 允许嵌入的浏览上下文锁定屏幕方向（译者注：比如智能手机、平板电脑的水平朝向或垂直朝向）。</p></li><li><p>allow-pointer-lock: 允许嵌入的浏览上下文使用 Pointer Lock API.</p></li><li><p>allow-popups: 允许弹窗 (例如 window.open, target=“_blank”, showModalDialog)。如果没有使用该关键字，相应的功能将自动被禁用。</p></li><li><p>allow-popups-to-escape-sandbox:  允许沙箱化的文档打开新窗口，并且新窗口不会继承沙箱标记。例如，安全地沙箱化一个广告页面，而不会在广告链接到的新页面中启用相同的限制条件。</p></li><li><p>allow-presentation: 允许嵌入的浏览上下文开始一个 presentation session。</p></li><li><p>allow-same-origin: 如果没有使用该关键字，嵌入的浏览上下文将被视为来自一个独立的源，这将使 same-origin policy 同源检查失败。</p></li><li><p>allow-scripts: 允许嵌入的浏览上下文运行脚本（但不能创建弹窗）。如果没有使用该关键字，就无法运行脚本。</p></li><li><p>allow-storage-access-by-user-activation : 允许嵌入的浏览上下文通过 Storage Access API 使用父级浏览上下文的存储功能。</p></li><li><p>allow-top-navigation: 允许嵌入的浏览上下文导航（加载）内容到顶级的浏览上下文。</p></li><li><p>allow-top-navigation-by-user-activation: 允许嵌入的浏览上下文在经过用户允许后导航（加载）内容到顶级的浏览上下文。</p></li></ul><blockquote><p><strong>注意</strong>：当被嵌入的文档与主页面同源时，强烈建议不要同时使用 allow-scripts 和 allow-same-origin。如果同时使用，嵌入的文档就可以通过代码删除 sandbox 属性，如此，就安全性而言还不如不用sandbox。</p><p>如果攻击者可以在沙箱化的 iframe 之外展示内容，例如用户在新标签页中打开内联框架，那么沙箱化也就没有意义了。建议把这种内容放置到独立的专用域中，以减小可能的损失。</p><p>沙箱属性(sandbox)在Internet Explorer 9及更早的版本上不被支持。</p></blockquote><p><strong>src</strong>：被嵌套的页面的 URL 地址。使用 about:blank 值可以嵌入一个遵从同源策略的空白页。在 Firefox （version 65及更高版本）、基于 Chromium 的浏览器、Safari/iOS 中使用代码移除 iframe 的 src 属性（例如通过 Element.removeAttribute() ）会导致 about:blank 被载入 frame。</p><p><strong>srcdoc</strong>：该属性是一段HTML代码，这些代码会被渲染到 iframe 中。如果浏览器不支持 srcdoc 属性，则会渲染 src 属性表示的内容。</p><p><strong>width</strong>：以CSS像素格式指定的 frame 的宽度。默认值是300。</p><p><strong>脚本</strong>：内联的框架，就像 &lt;frame&gt; 元素一样，会被包含在 window.frames 伪数组（类数组的对象）中。</p><p>有了 DOM HTMLIFrameElement 对象，脚本可以通过 contentWindow 访问内联框架的 window 对象。 contentDocument 属性则引用了 &lt;iframe&gt; 内部的 document 元素，(等同于使用contentWindow.document），但IE8-不支持。</p><p>在框架内部，脚本可以通过 window.parent 引用父窗口对象。</p><p>脚本访问框架内容必须遵守同源策略，并且无法访问非同源的 window 对象的几乎所有属性。同源策略同样适用于子窗体访问父窗体的 window 对象。跨域通信可以通过 window.postMessage 来实现。</p><p><strong>无障碍环境</strong>：使用 iframe 的 title 属性来标识框架的主要内容，这样可以极大方便使用辅助技术（例如屏幕阅读器）浏览网页的人。框架的标题应该清楚地描述框架的内容。如果没有标题，他们就只能浏览每一个框架来获取需要的内容。这非常耗时间，也很容易让人迷惑，尤其是当页面中包含很多框架或者互动内容如音视频等的时候。</p><h3 id="embed">&lt;embed&gt;</h3><p>HTML &lt;embed&gt; 元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。</p><blockquote><p><strong>声明</strong>：这里仅介绍该元素在 HTML5 中定义的部分，不包含该元素之前的声明内容和非标准的实现。请记住，大多数现代浏览器已经弃用并取消了对浏览器插件的支持，所以如果您希望您的网站可以在普通用户的浏览器上运行，那么依靠 &lt;embed&gt; 通常是不明智的。</p></blockquote><p>属性说明：</p><p><strong>height</strong>：资源显示的高度。</p><p><strong>src</strong>：被嵌套的资源的URL。</p><p><strong>type</strong>：用于选择插件实例化的 MIME 类型。</p><p><strong>width</strong>：资源显示的宽度。</p><h3 id="object">&lt;object&gt;</h3><p>HTML &lt;object&gt; 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。</p><p>属性说明：</p><p><strong>name</strong>：浏览上下文名称。</p><p><strong>height</strong>：资源显示的高度，单位是 CSS 像素。</p><p><strong>width</strong>：资源显示的宽度，单位是 CSS 像素。</p><p><strong>type</strong>：data 指定的资源的 MIME 类型，需要为 data 和 type 中至少一个设置值。</p><p><strong>data</strong>：一个合法的 URL 作为资源的地址，，需要为 data 和 type 中至少一个设置值。</p><p><strong>usemap</strong>：指向一个 &lt;map&gt; 元素的 hash-name；格式为 ‘#’ 加 map 元素 name 元素的值。</p><p><strong>form</strong>：对象元素关联的 form 元素（属于的 form）。 取值必须是同一文档下的一个 &lt;form&gt; 元素的 ID。</p><h3 id="param">&lt;param&gt;</h3><p>HTML &lt;param&gt;元素为&lt;object&gt;元素定义参数</p><p>属性说明：</p><p><strong>name</strong>：参数的名字。</p><p><strong>type</strong>：仅当 valuetype 设置为 “ref” 时才使用。根据URI中给定的数据确定MIME类型。</p><p><strong>value</strong>：确定参数的值。</p><p><strong>valuetype</strong>：确定参数的类型。可选值如下：</p><ul><li><p>data: 默认值。该值作为字符串变量传递给对象实例。</p></li><li><p>ref: 该值是存储运行时变量的资源的URI。</p></li><li><p>object: 同一页面（document）中另一个 &lt;object&gt; 的ID。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 嵌入带有参数的Flash电影 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;move.swf&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="video">&lt;video&gt;</h3><p>HTML &lt;video&gt; 元素 用于在 HTML 或者 XHTML 文档中嵌入媒体播放器，用于支持文档内的视频播放。你也可以将 &lt;video&gt; 标签用于音频内容，但是 &lt;audio&gt; 元素可能在用户体验上更合适。</p><ul><li><p>和 &lt;img&gt; 元素的使用类似，在 src 属性里加入一个我们需要展示的视频地址，同时也可以用其他属性来定义视频的宽度高度、是否自动或者循环播放、是否展示浏览器默认的视频控件等信息。</p></li><li><p>在 &lt;video&gt;&lt;/video&gt; 标签中间的内容，是针对浏览器不支持此元素时候的降级处理。</p></li><li><p>浏览器并不是都支持相同的 视频格式，所以你可以在 &lt;source&gt; 元素里提供多个视频源，然后浏览器将会使用它所支持的第一个源。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myVideo.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myVideo.webm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Your browser doesn&#x27;t support HTML5 video. Here is<br>     a <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;myVideo.mp4&quot;</span>&gt;</span>link to the video<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> instead.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>如果你没有指定 controls 属性，那么视频不会展示浏览器自带的控件，你也可以用 JavaScript 和 HTMLMediaElement API 来创建你自己的控件。详情请见<a href="https://developer.mozilla.org/en-US/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/cross_browser_video_player">Creating a cross-browser video player</a>。</li><li>HTMLMediaElement 会激活许多不同的事件，以便于让你可以控制视频（和音频）内容。</li><li>你可以用CSS 属性 object-position 来调整视频在元素内部的位置，它可以控制视频尺寸适应于元素外框的方式。</li><li>如果想在视频里展示字幕或者标题，你可以在 &lt;track&gt; 元素和 WebVTT 格式的基础上使用 JavaScript 来实现。详情请见 <a href="https://developer.mozilla.org/en-US/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/Adding_captions_and_subtitles_to_HTML5_video">Adding captions and subtitles to HTML5 video</a>。</li></ul><p>属性说明：</p><p><strong>autoplay</strong>：如果这个bool数值被指定了autoplay，视频就会开始自动播放，而且无需停止加载任何数据。</p><p><strong>buffered</strong>：这个属性可以读取到哪段时间范围内的媒体被缓存了。该属性包含了一个 TimeRanges 对象。</p><p><strong>controls</strong>：加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放。</p><p><strong>controlslist</strong>：当浏览器显示自己的控件集(例如，当指定了Controls属性时)，Controlslist属性将帮助浏览器选择在媒体元素上显示的控件。允许接受的 value 有 nodownload ，nofullscreen 和 noremoteplayback 。</p><p><strong>crossorigin</strong>：该枚举属性指明抓取相关图片是否必须用到CORS（跨域资源共享）。 支持CORS的资源 可在 &lt;canvas&gt; 元素中被重用，而不会被污染。允许的值如下：</p><ul><li>anonymous：跨域请求（即，使用 Origin: 的HTTP头）会被执行。但是不发送凭证（即，不发送cookie， X.509 证书或者 HTTP Basic 授权）。如果服务器不提供证书给源站点 (不设置 Access-Control-Allow-Origin: HTTP头)，图片会被 污染 并且它的使用会受限。</li><li>use-credentials：跨域请求A cross-origin request (i.e. with Origin: HTTP header) 会被执行，且凭证会被发送 (即， 发送一个 cookie, 一个证书和HTTP Basic授权会被执行)。如果服务器不提供证书给源站点 (通过Access-Control-Allow-Credentials: HTTP 头)，图像会被 污染 且它的使用会受限。</li></ul><blockquote><p><strong>注意</strong>：不加这个属性时，抓取资源不会走CORS请求(即，不会发送 Origin: HTTP 头)，保证其在 &lt;canvas&gt; 元素中使用时不会被污染。如果指定非法值，会被当作指定了枚举关键字 anonymous 一样使用。 查看 CORS 设置属性 获取更多信息。</p></blockquote><p><strong>currentTime</strong>：读取 CurentTime 返回一个双精度浮点值，指示以秒为单位的媒体的当前播放位置。如果 video 尚未开始播放，则会在开始播放后返回偏移量。通过 CurentTime 将当前播放位置设置为给定时间，会在加载媒体时将媒体查找到该位置（从指定的位置开始播放）。</p><p>媒体正在播放的情况下，如果媒体缓冲区的数据已经过期（视频已经播放完），则 user agent 有可能无法正常拿到数据。有些媒体可能有一个不以0秒开始的媒体时间线（不是从头开始播放的），因此应该将 currentTime 的时间设置在其数据失效之前。getStartDate() 这个方法可以用来确定媒体时间线起始的坐标。</p><p><strong>disablePictureInPicture</strong>：防止浏览器建议图片中的上下文菜单或在某些情况下自动请求图片中的图片。该属性可以禁用 video 元素的画中画特性，右键菜单中的“画中画”选项会被禁用。</p><p><strong>disableRemotePlayback</strong>：一个布尔属性，用于禁用使用有线连接的设备(HDMI、DVI等)的远程播放功能。无线技术(Miracast、Chromecast、DLNA、AirPlay等)。</p><p><strong>duration</strong>：只读属性，一个双精度浮点值，它指示媒体的持续时间(总长度)，以秒为单位，在媒体的时间线上。如果元素上没有媒体，或者媒体无效，则返回的值为NaN。如果媒体没有已知终点(例如时间未知的实时流、网络广播、来自WebRTC的媒体等等)，那么这个值就是Infinity。</p><p><strong>height</strong>：视频展示区域的高度，单位是CSS像素。</p><p><strong>intrinsicsize</strong>：这个属性告诉浏览器忽略图像的实际内在大小，并假装它是属性中指定的大小。具体来说，图像将在这些维度上展开，图像上的 naturalWidth / naturalHeight 将返回此属性中指定的值。</p><p><strong>loop</strong>：布尔属性；指定后，会在视频结尾的地方，自动返回视频开始的地方。</p><p><strong>muted</strong>：布尔属性，指明了视频里的音频的默认设置。设置后，音频会初始化为静音。默认值是 false ,意味着视频播放的时候音频也会播放 。</p><p><strong>playsinline</strong>：一个布尔属性，标志视频将被 “inline” 播放，即在元素的播放区域内。请注意，没有此属性并不意味着视频始终是全屏播放的。</p><p><strong>played</strong>：一个 TimeRanges 对象，指明了视频已经播放的所有范围。</p><p><strong>preload</strong>：该枚举属性旨在告诉浏览器作者认为达到最佳的用户体验的方式是什么。可能是下列值之一：</p><ul><li>none: 提示作者认为用户不需要查看该视频，服务器也想要最小化访问流量；换句话说就是提示浏览器该视频不需要缓存。</li><li>metadata: 提示尽管作者认为用户不需要查看该视频，不过抓取元数据（比如：长度）还是很合理的。auto: 用户需要这个视频优先加载；换句话说就是提示：如果需要的话，可以下载整个视频，即使用户并不一定会用它。</li><li>空字符串：也就代指 auto 值。</li></ul><p>假如不设置，默认值就是浏览器定义的了 （即，不同浏览器会选择自己的默认值），即使规范建议设置为 metadata。</p><blockquote><p><strong>注意</strong>：autoplay 属性优先于 preload 假如用户想自动播放视频，那么很明显浏览器需要下载视频。同时设置autoplay 和 preload属性在规范里是允许的。</p><p>规范没有强制浏览器去遵循该属性的值；这仅仅只是个提示。</p></blockquote><p><strong>poster</strong>：一个海报帧的URL，用于在用户播放或者跳帧之前展示。如果属性未指定，那么在第一帧可用之前什么都不会展示；之后第一帧就像海报帧一样展示。</p><p><strong>src</strong>：要嵌到页面的视频的URL。可选；你也可以使用video块内的 &lt;source&gt; 元素来指定需要嵌到页面的视频。</p><p><strong>width</strong>：视频显示区域的宽度，单位是CSS像素。</p><p>事件：&lt;video&gt; 元素可以触发许多不同的事件。</p><table><thead><tr><th>事件名</th><th>触发时机</th></tr></thead><tbody><tr><td>audioprocess</td><td>ScriptProcessorNode 的输入缓冲区已准备好进行处理。</td></tr><tr><td>canplay</td><td>浏览器可以播放媒体文件了，但估计没有足够的数据来支撑播放到结束，不需要停止缓存更多的内容。</td></tr><tr><td>canplaythrough</td><td>浏览器估算可以播放到结束，不需要停止缓存更多的内容。</td></tr><tr><td>complete</td><td>OfflineAudioContext 渲染完成。</td></tr><tr><td>durationchange</td><td>duration 属性的值改变时触发。</td></tr><tr><td>emptied</td><td>媒体内容为空；例如，当这个media已经加载完成（或者部分加载完成）， load() 被用来进行重新加载。</td></tr><tr><td>ended</td><td>视频停止，因为media已经到达结束点。</td></tr><tr><td>loadeddata</td><td>media中的首帧已经加载。</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;videofile.ogg&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;posterimage.jpg&quot;</span>&gt;</span><br>  抱歉，您的浏览器不支持内嵌视频，不过不用担心，你可以 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;videofile.ogg&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  并用你喜欢的播放器观看!<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;foo.ogg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;foo.en.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;English&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;foo.sv.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;sv&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Svenska&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一个例子播放一个视频，视频一收到，允许播放的时候就会立马开始播放，而不会停下来直到下载更多内容。 图片 “posterimage.jpg” 会一直展示在视频区域，直到开始播放。</p><p>第二个例子允许用户选择不同的字幕。</p><p>服务器支持：</p><p>如果视频的MIME类型设置不正确，视频可能不会显示，或者显示包含一个X的灰色盒子（如果启用了JavaScript的话）。</p><p>如果你提供的视频是 Ogg Theora 格式的，在 Apache Web 服务器上， 你可以通过 “/etc/apache” 中的 “mime.types” 文件 或者通过在 httpd.conf 中的 “AddType的” 配置指令，把视频文件的扩展名(最常见的是 “.ogm”, “.ogv”, or “.ogg” )添加到 MIME 类型 “video/ogg”， 来解决这个问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">AddType video/ogg .ogm<br>AddType video/ogg .ogv<br>AddType video/ogg .ogg<br></code></pre></td></tr></table></figure><p>如果你以 WebM 格式提供视频，在 Apache Web 服务器上，你可以通过 “/etc/apache” 中的 “mime.types” 文件 或者通过在 httpd.conf 中的 “AddType&quot; 的配置指令，把视频文件的扩展名(最常见的是 “.webm” )添加到 MIME 类型 “video/webm”， 来解决这个问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">AddType video/webm .webm<br></code></pre></td></tr></table></figure><p>你的web主机可能会提供一个简单的接口来修改MIME类型配置，直到服务器全面升级。</p><h3 id="audio">&lt;audio&gt;</h3><p>HTML &lt;audio&gt; 元素用于在文档中嵌入音频内容。 &lt;audio&gt; 元素可以包含一个或多个音频资源， 这些音频资源可以使用 src 属性或者&lt;source&gt; 元素来进行描述：浏览器将会选择最合适的一个来使用。也可以使用 MediaStream 将这个元素用于流式媒体。</p><ul><li><p>与 &lt;img&gt; 元素类似，我们在 src 属性中添加了嵌入媒体的路径；也可以使用其他属性来规定一些功能，例如是否自动播放、是否循环播放、是否显示浏览器的默认音频空间等等。</p></li><li><p>在浏览器不支持该元素时，会显示 <code>&lt;audio&gt;&lt;/audio&gt;</code> 标签之间的内容作为回退。</p></li></ul><p>属性说明：</p><p><strong>autoplay</strong>：布尔值属性；声明该属性，音频会尽快自动播放，不会等待整个音频文件下载完成。</p><blockquote><p><strong>注意</strong>：自动播放音频（或有声视频）可能会破坏用户体验，所以应该尽可能避免。如果你一定要提供自动播放功能，你应该加入开关（让用户主动打开自动播放）。然而，如果需要创建一些媒体元素，其播放源由用户在稍后设置，自动播放就会很有用。</p></blockquote><p><strong>controls</strong>：如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。</p><p><strong>crossorigin</strong>：枚举属性，展示音频资源是否可以通过CORS加载。支持CORS的资源 可以被 &lt;canvas&gt; 元素复用而不污染. 可选值如下：</p><ul><li><p>anonymous：在发送跨域请求时不携带验证信息。换句话说，浏览器在发送Origin: HTTP 请求首部时将不携带 cookie、 X.509 安全令牌、也不会执行任何 HTTP 基本认证。如果服务器没有给与源站信任（也就是说没有设置 Access-Control-Allow-Origin: 响应首部），那么图片就被认为是污染的，它就会被限制使用。</p></li><li><p>use-credentials：在发送跨域请求时不携带验证信息。换句话说，在发送Origin: HTTP 请求首部时将携带 cookie、安全令牌、并且执行 HTTP 基本认证。如果服务器没有给与源站信任（通过设置Access-Control-Allow-Credentials: 响应首部）那么图片就被认为是污染的，它就会被限制使用。</p><p>在未指定时，资源将不通过 CORS 请求来获取（也就是不发送 Origin: 请求首部），以保护 &lt;canvas&gt; 元素中未污染的内容。如果验证失败，它会表现的好像 anonymous 选项是选中的。</p></li></ul><p><strong>currentTime</strong>：读取 currentTime 属性将返回一个双精度浮点值，用以标明以秒为单位的当前音频的播放位置。如果音频的元数据暂时无法访问——这意味着你无法的知道媒体的开始或持续时间。这时，currentTime 相对应的，能够被用于改变重播的时间。否则，设置 currentTime 将设置当前的播放位置，并且会自动搜寻到媒体的那个位置，如果媒体目前已经被加载的话。</p><p>如果音频是以流的形式加载的，并且数据超出了媒体的缓冲区（buffer），user agent 可能无法获取资源的某些部分。另一些音频的时间轴可能并非从 0 秒开始，所以设置 currentTime 到一个开始时间之前的时间可能会失败。举个例子，如果音频媒体的时间轴从 12 小时开始，把 currentTime 设置到 3600 将会尝试把当前播放位置设置到媒体的开始位置之前，从而导致错误。getStartDate() 方法能够用于确定媒体时间轴的开始位置。</p><p><strong>disableRemotePlayback</strong>：这是一个布尔值，用来禁用在远程设备上进行进度控制的能力。这些设备通过有线（比如 HDMI, DVI）或无线技术（比如Miracast, Chromecast, DLNA, AirPlay,）来与 web 连接。</p><p><strong>duration</strong>：只读属性，这是一个双精度浮点数，指明了音频在时间轴中的持续时间（总长度），以秒为单位。如果元素上没有媒体，或者媒体是不可用的，那么会返回 NaN。如果媒体找不到确切的结尾（比如不确定长度的直播流，网络电台，或者是通过 WebRTC 连接的流），那么这个值将返回 +Infinity。</p><p><strong>loop</strong>：布尔属性；如果声明该属性，将循环播放音频。</p><p><strong>muted</strong>：表示是否静音的布尔值。默认值为 false，表示有声音。</p><p><strong>preload</strong>：枚举属性，让开发者自行思考来示意浏览器使用何种加载方式以达到最好的用户体验。可以是以下属性之一：</p><ul><li>none: 示意用户可能不会播放该音频，或者服务器希望节省带宽；换句话说，该音频不会被缓存；</li><li>metadata: 示意即使用户可能不会播放该音频，但获取元数据 (例如音频长度) 还是有必要的。</li><li>auto: 示意用户可能会播放音频；换句话说，如果有必要，整个音频都将被加载，即使用户不期望使用。</li><li>空字符串 : 等效于auto属性。</li></ul><p>不同浏览器会有自己的默认值，规范建议的默认值为 metadata。</p><p><strong>src</strong>：嵌入的音频的URL。 该URL应遵从 HTTP access controls。这是一个可选属性；你可以在audio元素中使用 &lt;source&gt; 元素来替代该属性指定嵌入的音频。</p><p>事件：</p><table><thead><tr><th>事件名称</th><th>触发时机</th></tr></thead><tbody><tr><td>audioprocess</td><td>一个 ScriptProcessorNode 的输入缓冲区已经准备开始处理。</td></tr><tr><td>canplay</td><td>浏览器已经可以播放媒体，但是预测已加载的数据不足以在不暂停的情况下顺利将其播放到结尾（即预测会在播放时暂停以获取更多的缓冲区内容）</td></tr><tr><td>canplaythrough</td><td>浏览器预测已经可以在不暂停的前提下将媒体播放到结束。</td></tr><tr><td>complete</td><td>一个 OfflineAudioContext 的渲染已经中止。</td></tr><tr><td>durationchange</td><td>duration 属性发生了变化。</td></tr><tr><td>emptied</td><td>媒体置空。举个例子，当一个媒体已经加载（或部分加载）的情况下话调用 load() 方法，这个事件就将被触发。</td></tr><tr><td>ended</td><td>播放到媒体的结束位置，播放停止。</td></tr><tr><td>loadeddata</td><td>媒体的第一帧加载完成。</td></tr><tr><td>loadedmetadata</td><td>元数据加载完成。</td></tr><tr><td>pause</td><td>播放暂停。</td></tr><tr><td>play</td><td>播放开始。</td></tr><tr><td>playing</td><td>因为缺少数据而暂停或延迟的状态结束，播放准备开始。</td></tr><tr><td>ratechange</td><td>播放速度变化。</td></tr><tr><td>seeked</td><td>一次获取 操作结束。</td></tr><tr><td>seeking</td><td>一次获取 操作开始。</td></tr><tr><td>stalled</td><td>用户代理试图获取媒体数据，但数据意外地没有进入。</td></tr><tr><td>suspend</td><td>媒体加载挂起。</td></tr><tr><td>timeupdate</td><td>由 currentTime 指定的时间更新。</td></tr><tr><td>volumechange</td><td>音量变化。</td></tr><tr><td>waiting</td><td>因为暂时性缺少数据，播放暂停。</td></tr></tbody></table><h3 id="source">&lt;source&gt;</h3><p>HTML &lt;source&gt; 元素为 &lt;picture&gt;, &lt;audio&gt; 或者 &lt;video&gt; 元素指定多个媒体资源。这是一个空元素。它通常用于以不同浏览器支持的多种格式提供相同的媒体内容。</p><p>属性说明：</p><p><strong>sizes</strong>：源大小列表，用于描述源表示的图像的最终渲染宽度。每个源大小由一个逗号分隔的媒体条件长度对列表组成。浏览器在展开页面之前使用此信息来确定在 srcset 中定义要使用的图像。仅当 &lt;source&gt; 元素是 &lt;picture&gt; 元素的直接子元素时，sizes属性才有效。</p><p><strong>src</strong>：对于 &lt;audio&gt; 和 &lt;video&gt; ，媒体资源的地址是必需的。将 &lt;source&gt; 元素放在 &lt;picture&gt; 元素内时，将忽略此属性的值。</p><p><strong>srcset</strong>：由逗号分隔的一个或多个字符串的列表，指示由浏览器使用的源表示的一组可能的图像。 每个字符串由以下组成：</p><ul><li><p>图片的 URL 地址。</p></li><li><p>一个宽度描述符，是一个正整数，后面直接跟着 w。如果缺少，默认值是无穷大。</p></li><li><p>像素密度描述符，即为正浮点数，后跟“ x”。如果缺少默认值，则为1x。</p></li></ul><p>列表中的每个字符串必须至少具有一个宽度描述符或一个像素密度描述符才有效。在列表中，必须只有一个字符串，其中包含相同的宽度描述符和像素密度描述符元组。浏览器选择最适当的图像以在给定的时间点显示。 仅当 &lt;source&gt; 元素是 &lt;picture&gt; 元素的直接子元素时，srcset属性才有效。</p><p><strong>type</strong>：资源的MIME类型，可以选择包含codecs参数。有关如何指定编解码器的信息。</p><p>如果未指定type属性，则从服务器检索媒体的类型，并检查Gecko是否可以处理它；如果无法呈现，则检查下一个源。如果指定了type属性，则会将其与Gecko可以播放的类型进行比较，如果无法识别，则服务器甚至不会被查询；相反，会立即检查下一个源元素。</p><p><strong>media</strong>：资源预期媒体的媒体查询；仅应在&lt;picture&gt;元素中使用。</p><h3 id="track">&lt;track&gt;</h3><p>HTML &lt;track&gt; 元素 被当作媒体元素（&lt;audio&gt; 和 &lt;video&gt;）的子元素来使用。它允许指定时序文本字幕（或者基于时间的数据），例如自动处理字幕。字幕格式有 WebVTT 格式（.vtt格式文件）— Web 视频文本字幕格式，以及指时序文本标记语言（TTML）格式。</p><p>属性说明：</p><p><strong>default</strong>：该属性定义了该 track 应该启用，除非用户首选项指定了更合适一个 track 。每个媒体元素里面只有一个 track 元素可以有这个属性。</p><p><strong>kind</strong>：定义了 text track 应该如何使用。如果省略了该属性，默认的 kind 值就是 subtitles。下面是允许的关键字：</p><ul><li><p>subtitles：字幕给观影者看不懂的内容提供了翻译。比如英文电影里非英文的对话框或者文字。</p><p>字幕可能包含额外的内容，通常有附加的背景信息。比如在电影星球大战开头的文字，或者某个场景的日期，时间，还有地点。</p></li><li><p>captions：隐藏式字幕提供了音频的转录甚至是翻译。</p><p>可能包含重要的非言语的信息，比如音乐提示或者音效。可以指定提示音的源文件 (e.g. music, text, character).</p><p>适用于耳聋的用户或者当调成静音的时候。</p></li><li><p>descriptions：视频内容的文本描述。</p><p>适用于失明用户或者当视频不可见的场景。</p></li><li><p>chapters：章节标题用于用户浏览媒体资源的时候。</p></li><li><p>metadata：脚本使用的track。 对用户不可见。</p></li></ul><p><strong>label</strong>：当列出可用的 text tracks 时，给浏览器使用的 text track 的标题，这种标题是用户可读的。</p><p><strong>src</strong>：track 的地址。必须是合法的 URL 。该属性必须定义。</p><p><strong>srclang</strong>：track 文本数据的语言。它必须是合法的 BCP 47 语言标签。如果 kind 属性被设为 subtitles, 那么srclang 必须定义。</p><blockquote><p><strong>注意</strong>：track 给媒体元素添加的数据的类型在 kind 属性中设置，属性值可以是 subtitles，captions，descriptions，chapters 或 metadata。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。</p><p>一个 media 元素的任意两个 track 子元素不能有相同的 kind, srclang, 和 label属性。</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;/images/sample.gif&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.ogv&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogv&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;captions&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleCaptions.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;descriptions&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleDescriptions.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;chapters&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleChapters.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleSubtitles_de.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;de&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleSubtitles_en.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleSubtitles_ja.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;ja&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sampleSubtitles_oz.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;oz&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;metadata&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;keyStage1.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Key Stage 1&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;metadata&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;keyStage2.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Key Stage 2&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;metadata&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;keyStage3.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Key Stage 3&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- Fallback --&gt;</span><br>   ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="canvas">&lt;canvas&gt;</h3><p>&lt;canvas&gt;元素可被用来通过JavaScript（Canvas API 或 WebGL API）绘制图形及图形动画。</p><ul><li>直接在 html 标签中设置 width 和 height 属性或者使用 JavaScript 来指定画布尺寸，这将改变一个画布的水平像素和垂直像素数，就像定义了一张图片的大小一样。</li><li>可以使用 CSS 的 width 和 height 以在渲染期间缩放图像以适应样式大小，就像 &lt;img&gt; 元素一样。如果您发现 &lt;canvas&gt; 元素中展示的内容变形，您可以通过 &lt;canvas&gt; 自带的 height 和 width 属性进行相关设置，而不要使用CSS。</li></ul><p>属性说明：</p><p><strong>height</strong>：该元素占用空间的高度，以 CSS 像素（px）表示，默认为 150。</p><p><strong>moz-opaque</strong>：通过设置这个属性，来控制 canvas 元素是否半透明。如果你不想 canvas 元素被设置为半透明，使用这个元素将可以优化浏览器绘图性能。</p><p><strong>width</strong>：该元素占用空间的宽度，以 CSS 像素（px）表示，默认为 300。</p><h3 id="map">&lt;map&gt;</h3><p>HTML &lt;map&gt;元素与&lt;area&gt;元素一起使用以定义图像映射（可单击的链接区域）。</p><p>属性说明：</p><p><strong>name</strong>：Name 属性为映射提供一个名称，以便可以引用它。该属性必须是存在的，并且必须有一个不带空格字符的非空值。Name 属性的值不能与同一文档中另一个 &lt;map&gt; 元素的 name 属性的值的兼容性无字符匹配。如果还指定了 id 属性，则两个属性必须具有相同的值。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">260px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">232px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infographic&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;poly&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;130,147,200,107,254,219,130,228&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/docs/Web/HTML&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;HTML&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;poly&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;130,147,130,228,6,219,59,107&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/docs/Web/CSS&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;CSS&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;poly&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;130,147,200,107,130,4,59,107&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/docs/Web/JavaScript&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;JavaScript&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#infographic&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://interactive-examples.mdn.mozilla.net/media/examples/mdn-info2.png&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;MDN infographic&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="area">&lt;area&gt;</h3><p>HTML &lt;area&gt; 元素 在图片上定义一个热点区域，可以关联一个超链接。&lt;area&gt;元素仅在&lt;map&gt;元素内部使用。</p><p><strong>alt</strong>：替代在不显示图像的浏览器上显示的文本字符串。文本的措辞应该使其呈现给用户的选择与图像在没有替代文本的情况下显示时提供的选择相同。仅当使用href属性时，才需要此属性。</p><p><strong>coords</strong>：coords属性详细说明shape属性的坐标，包括&lt;area&gt;的大小，形状和位置。</p><ul><li>矩形(rect)：值是``x1，y1，x2，y2<code>。值指定矩形的左上角和右下角的坐标。例如： </code><area shape="rect" coords="0,0,253,27" href="#" target="_blank" alt="Mozilla"><code>。上例中的坐标指定：</code>0,0<code>为矩形的左上角，</code>253,27`为矩形的右下角。</li><li>圆(circle)：值为``x，y，radius<code>。值指定圆心和半径的坐标。例如：</code><area shape="circle" coords="130,136,60" href="#" target="_blank" alt="MDN">`。</li><li>不规则(poly)：值是``x1，y1，x2，y2，…，xn，yn`。值指定多边形边缘的坐标。如果第一个和最后一个坐标对不相同，浏览器将添加最后一个坐标对以关闭多边形。</li><li>default：定义整个区域。值为CSS像素数。</li></ul><p><strong>download</strong>：这个属性如果存在的话，表明作者想把超链接用于下载一个资源。请查看 &lt;a&gt; 获得关于 download 属性的完整描述。</p><p><strong>href</strong>：该区域的超链接目标。它的值是一个有效的URL。该属性可以省略；如果是这样，则&lt;area&gt;元素不表示超链接。</p><p><strong>hreflang</strong>：指明链接资源的语言类型, 值的范围参考 BCP47。这个属性只能在指明href属性之后使用。</p><p><strong>ping</strong>：包含以空格分隔的URL列表，当跟随超链接时，浏览器将在后台发送带有 PING 正文的 POST 请求。通常用于跟踪。</p><p><strong>referrerpolicy</strong>：一个字符串，指示在获取资源时使用哪个引荐来源网址：</p><ul><li><p>no-referrer：表示Referer：标头将不会发送。</p></li><li><p>no-referrer-when-downgrade：表示在导航到不带TLS（HTTPS）的来源时，不会发送Referer：标头。如果未指定其他政策，这是用户代理的默认行为。</p></li><li><p>origin：表示引荐来源网址将是页面的来源，大致是方案，主机和端口。</p></li><li><p>origin-when-cross-origin：表示到其他来源的导航将仅限于方案，主机和端口，而在同一来源的导航将包括引荐来源网址的路径。</p></li><li><p>unsafe-url：表示引荐来源网址将包含来源和路径（但不包括片段，密码或用户名）。这种情况是不安全的，因为它可能会将来源和路径从受TLS保护的资源泄漏到不安全的来源。</p></li></ul><p><strong>rel</strong>：对于包含href属性的锚点，此属性指定目标对象与链接对象的关系。该值是以空格分隔的链接类型值列表。这些值及其语义将由一些对文档作者可能有意义的权威机构注册。默认关系（如果没有给出其他关系）是无效的。仅当存在href属性时才使用此属性。</p><p><strong>shape</strong>：相关热点的形状。HTML的规范定义了以下值：rect，它定义了一个矩形区域；circle，它定义了一个圆形区域；poly，它定义了一个多边形；default，它指示超出任何已定义形状的整个区域。许多浏览器，特别是 Internet Explorer 4和更高的浏览器，支持 circ、 polygon 和 rectangle 作为形状的有效值，但这些值是非标准的。</p><p><strong>target</strong>：本属性指明了在什么地方显示链接的资源. HTML4里, 这个值是一个frame的链接或者关键字。HTML5 里，它是一个浏览器上下文(比如: 标签, 窗口或者内嵌的frame)的链接或者关键字. 值的含义:</p><ul><li>_self: 在当前区域加载链接指向的资源. 这个是默认值.</li><li>_blank: 在新的未命名的窗口或者tab里加载超链接资源.</li><li>_parent: 在父级加载超链接资源. HTML4 里, 是当前 frame 的父级,  HTML5 里是当前的浏览器上下文, 如果当前环境没有父级, 行为和 _self 一样.</li><li>_top: HTML4 里: 将响应加载到完整的原始窗口中，取消所有其他帧。在 HTML5 中:将响应加载到顶级浏览上下文(也就是说，浏览上下文是当前版本的祖先，并且没有父类)。如果没有父类，这个选项的行为方式与 _self 相同</li></ul><p>本属性只能在指明 href 属性之后使用。</p><p><strong>type</strong>：该属性指定了用于链接目标的MIME类型的媒体类型。一般来说，这是严格的咨询信息;然而，在未来，浏览器可能会为多媒体类型添加一个小图标。例如，当类型设置为音频/wav时，浏览器可能会添加一个小的扬声器图标。只有当href属性存在时才使用该属性。</p><h3 id="svg">&lt;svg&gt;</h3><p>svg元素是定义新坐标系和视口的容器。它用作 SVG 文档的最外层元素，但也可以用于将 SVG 片段嵌入 SVG 或 HTML 文档中。</p><p>属性说明：</p><p><strong>height</strong>：高度 矩形视口的显示高度（不是其坐标系的高度。）默认值: auto。</p><p><strong>preserveAspectRatio</strong>：如果以不同的长宽比显示 svg 片段，那么它必须如何变形。值类型: ( none | xMinYMin | xMidYMin | xMidYMin | xMidYMid | xMidYMid | xMaxYMid | xMinYMax | xMidYMax | xMaxYMax)(meet|slice)? ； 默认值: xMidYMid meet。</p><p><strong>viewbox</strong>：当前SVG片段的SVG视口坐标。默认值: none。</p><p><strong>width</strong>：矩形视口的显示宽度（不是其坐标系的宽度。）默认值: auto。</p><p><strong>x</strong>：显示的svg容器的x坐标。对最外面的svg元素没有影响。默认值：0。</p><p><strong>y</strong>：svg容器显示的y坐标。对最外面的svg元素没有影响。默认值：0。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 300 100&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;grey&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;40&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 10 10&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="math">&lt;math&gt;</h3><p>MathML的顶级元素是&lt;math&gt;。所有有效的MathML实例必须被包括在 &lt;math&gt; 标记中。另外不可以在一个 &lt;math&gt; 元素中嵌套第二个 &lt;math&gt; 元素，但是 &lt;math&gt; 元素中可以有任意多的子元素 。</p><p>属性说明：</p><p><strong>dir</strong>：公式的整体方向。取值可以是 ltr (从左到右) 或者 rtl (从右到左)。</p><p><strong>href</strong>：用于给公式设置一个超链接的URI。</p><p><strong>mathbackground</strong>：背景颜色。你可以使用 #rgb 格式、 #rrggbb 格式和 HTML颜色名。</p><p><strong>mathcolor</strong>：公式的文本颜色。你可以使用 #rgb 格式、 #rrggbb 格式和 HTML颜色名。</p><p><strong>display</strong>：这个枚举属性指定本标记所括的MathML代码应该如何被显示。该属性有如下取值：</p><ul><li>block, 使用该值会使该 MathML 元素显示于文本之外，成为一个独立的块元素，不受其所在的文本的影响。</li><li>inline, 使用该值使这段 MathML 显示为行内元素，放置于当前文本的区域中。除非改变文本的显示，否则无法移动这个 MathML 的显示位置。</li></ul><p>如果没有指定该属性值，默认值采用 inline。</p><p><strong>overflow</strong>：指定当该数学公式超过了其运行的范围时应该如何表现。可能的取值为： linebreak (默认值), scroll, elide, truncate, scale.</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">math</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">math</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表格">表格</h2><h3 id="table">&lt;table&gt;</h3><p>HTML的 table 元素表示表格数据 — 即通过二维数据表表示的信息。</p><p>允许的子标签：</p><ul><li>一个可选的 &lt;caption&gt; 元素</li><li>零个或多个的 &lt;colgroup&gt; 元素</li><li>一个可选的 &lt;thead&gt; 元素</li><li>下列任意一个:<ul><li>零个或多个 &lt;tbody&gt;</li><li>零个或多个 &lt;tr&gt;</li></ul></li><li>一个可选的 &lt;tfoot&gt; 元素</li></ul><p>属性说明(下面列出的属性现在已经弃用，请使用CSS代替)：</p><p><strong>align</strong>： 这个枚举属性指定了包含在文档中的表格必须如何对齐。有如下值:</p><ul><li>left：表格将在文档左侧显示；</li><li>center：表格将在文档中央显示；</li><li>right：表格将在文档右侧显示；</li></ul><p><strong>bgcolor</strong>：这个属性定义了表格的背景颜色。 它是一个6位的十六进制编码，定义于 sRGB，需要加上 <code>#</code> 作为前缀。 当然也可以使用下面已经被预先定义的字符串，来表示常用的16种颜色：</p><ul><li><table><thead><tr><th>颜色</th><th>字符串</th><th>十六进制表示</th><th>示例</th></tr></thead><tbody><tr><td>黑色</td><td>black</td><td><code>#000000</code></td><td><span style="color:block;">■</span><span style="color:#000000;">■</span></td></tr><tr><td>白色</td><td>white</td><td><code>#FFFFFF</code></td><td><span style="color:white;">■</span><span style="color:#ffffff;">■</span></td></tr><tr><td>红色</td><td>red</td><td><code>#FF0000</code></td><td><span style="color:red;">■</span><span style="color:#ff0000;">■</span></td></tr><tr><td>绿色</td><td>green</td><td><code>#008000</code></td><td><span style="color:green;">■</span><span style="color:#008000;">■</span></td></tr><tr><td>蓝色</td><td>blue</td><td><code>#0000FF</code></td><td><span style="color:blue;">■</span><span style="color:#00f;">■</span></td></tr><tr><td>黄色</td><td>yellow</td><td><code>#FFFF00</code></td><td><span style="color:yellow;">■</span><span style="color:#ff0;">■</span></td></tr><tr><td>紫色</td><td>purple</td><td><code>#800080</code></td><td><span style="color:purple;">■</span><span style="color:#800080;">■</span></td></tr><tr><td>橙色</td><td>orange</td><td><code>#FFA500</code></td><td><span style="color:orange;">■</span><span style="color:#ffa500;">■</span></td></tr><tr><td>粉红色</td><td>pink</td><td><code>#FFC0CB</code></td><td><span style="color:pink;">■</span><span style="color:#ffc0cb;">■</span></td></tr><tr><td>灰色</td><td>gray</td><td><code>#808080</code></td><td><span style="color:gray;">■</span><span style="color:#808080;">■</span></td></tr><tr><td>浅灰色</td><td>lightgray</td><td><code>#D3D3D3</code></td><td><span style="color:lightgray;">■</span><span style="color:#d3d3d3;">■</span></td></tr><tr><td>深灰色</td><td>darkgray</td><td><code>#A9A9A9</code></td><td><span style="color:darkgray;">■</span><span style="color:#a9a9a9;">■</span></td></tr><tr><td>棕色</td><td>brown</td><td><code>#A52A2A</code></td><td><span style="color:brown;">■</span><span style="color:#a52a2a;">■</span></td></tr><tr><td>青色</td><td>cyan</td><td><code>#00CED1</code></td><td><span style="color:cyan;">■</span><span style="color:#00ffff;">■</span></td></tr><tr><td>金色</td><td>gold</td><td><code>#FFD700</code></td><td><span style="color:gold;">■</span><span style="color:#ffd700;">■</span></td></tr><tr><td>银色</td><td>silver</td><td><code>#C0C0C0</code></td><td><span style="color:silver;">■</span><span style="color:#c0c0c0;">■</span></td></tr></tbody></table></li></ul><p><strong>border</strong>：这个整型元素使用像素，定义了表格边框的大小。 如果设置为0，这意味着 frame 属性被设置为空。如果设置为1，表示表格具有1px大小的边框。</p><p><strong>cellpadding</strong>：这个属性定义了表格单元的内容和边框之间的空间。如果它是一个像素长度单位，这个像素将被应用到所有的四个侧边；如果它是一个百分比的长度单位，内容将被作为中心，总的垂直（上和下）长度将代表这个百分比。这同样适用于总的水平（左和右）空间。</p><p><strong>cellspacing</strong>：这个属性（使用百分比或像素）定义了两个单元格之间空间的大小（从水平和垂直方向上），包括了表格的顶部与第一行的单元格，表的左边与第一列单元格，表的右边与最后一列的单元格，表的底部与最后一行单元格之间的空间。</p><p><strong>frame</strong>：这个枚举属性定义了包围在表格周围的框架的哪个边必须显示。它可能有下列值：above、below、hsides、vsides、lhs、rhs、border、box、void</p><p><strong>rules</strong>这个枚举属性定义了在一个表格中规则的显示位置。它可以有以下值：:</p><ul><li>none：这表明没有规格将被显示；这是默认的值；</li><li>groups：这将使规则只显示在行组（row groups，通过 &lt;thead&gt; ， &lt;tbody&gt; 和 &lt;tfoot&gt; 元素定义）和列组（ column groups，通过 &lt;col&gt; 和 &lt;colgroup&gt; 元素定义）之间</li><li>rows：这将使规则在行之间显示；</li><li>columns：这将使规则在列之间显示；</li><li>all：这将使规则在列和行之间显示；</li></ul><p><strong>summary</strong>：该属性定义了一个替代文本，当表格无法在用户代理中显示的时候用来描述表格。通常，它被用来为残障人士提供可用性，比如，盲人使用盲文屏幕（Braille screen） 浏览网页，从中获取信息。如果要想对于非视力受限的人来说也可以提供作用，考虑使用 &lt;caption&gt; 代替。summary 属性不是强制性的，当一个 &lt;caption&gt; 发挥它应有的作用时，可以省略summary 属性。</p><p><strong>width</strong>：该属性定义了表格的宽度。宽度可能是一个像素或者是一个百分比值，宽度的百分比值将被定义为表格容器的宽度。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">    <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span>,</span><br><span class="language-css">  <span class="hljs-selector-tag">th</span>,</span><br><span class="language-css">  <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Simple table with header<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>First name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jane<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Doe<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Table with thead, tfoot, and tbody<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header content 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header content 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Footer content 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Footer content 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Body content 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Body content 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Table with colgroup<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;columns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Countries<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Capitals<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Population<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Language<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>USA<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Washington D.C.<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>309 million<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Sweden<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Stockholm<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>9 million<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Swedish<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Table with colgroup and col<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;columns2plus3&quot;</span> <span class="hljs-attr">span</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Lime<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Lemon<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Orange<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Yellow<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Orange<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Simple table with caption<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Awesome caption<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Awesome data<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>无障碍问题（Captions）</strong>：通过提供一个 &lt;caption&gt; 元素，该元素的值清晰、简洁地描述了表的用途，它可以帮助用户决定是否需要阅读表的其余内容或跳过它。这可以帮助视力低下的人以及有认知问题的人在诸如屏幕阅读器等辅助技术的帮助下导航。</p></blockquote><p>界定行和列的范围：在简单的上下文中，头元素的 scope 属性是多余的，因为 scope 是推断出来的。然而，一些辅助技术可能无法得出正确的推论，因此指定标头范围可以改善用户体验。在复杂的表中，可以指定范围，以便提供与标头相关的单元格的必要信息。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Color names and values<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>HEX<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>HSLa<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>RGBa<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>Teal<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>#51F6F6<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>hsla(180, 90%, 64%, 1)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>rgba(81, 246, 246, 1)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>Goldenrod<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>#F6BC57<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>hsla(38, 90%, 65%, 1)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>rgba(246, 188, 87, 1)<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在&lt;th&gt;元素上声明 scope=“col” 将有助于描述单元格位于列的顶部。在 &lt;td&gt; 元素上提供 scope=“row” 的声明将有助于描述单元格是一行中的第一个。</p><p>复杂的表格：</p><p>标题和单元格不能以严格的水平或垂直方式关联，诸如屏幕阅读器之类的辅助技术可能难以解析如此复杂的表。这通常由 colspan 和 rowspan 属性的存在来表示。</p><p>理想情况下，考虑表示表内容的替代方法，包括将其分解为一组较小的相关表，这些表不必依赖于使用 colspan 和 rowspan 属性。除了帮助使用辅助技术的人理解表的内容外，这也可以帮助有认知问题的人，他们可能很难理解表布局所描述的关联。</p><p>如果无法拆分该表，请使用 id 和 headers 属性的组合，以编程方式将每个表单元格与该单元格关联的标头相关联。</p><h3 id="caption">&lt;caption&gt;</h3><p>HTML &lt;caption&gt; 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 &lt;table&gt; 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个相对于表格的任意位置。</p><ul><li>当 &lt;table&gt; 元素是 &lt;caption&gt; 的父元素，caption 是 &lt;figure&gt; 元素的唯一后代的时候，使用 &lt;figcaption&gt; 元素替代 caption 元素。</li></ul><p>属性说明：</p><p><strong>align(已废弃)</strong>：这个可枚举属性表明了 caption 相对于 table 应该如何排列。它可能有以下几个值：</p><ul><li>left, 展示在表格左边</li><li>top, 显示在表格前面</li><li>right, 显示在表格右边</li><li>bottom, 显示在表格下面</li></ul><h3 id="colgroup">&lt;colgroup&gt;</h3><p>HTML 中的 表格列组（Column Group &lt;colgroup&gt;） 标签用来定义表中的一组列表。</p><ul><li><p>父元素必须是 &lt;table&gt;</p></li><li><p>&lt;colgroup&gt; 必须出现在任何可选的 &lt;caption&gt; 元素之后，但在任何 &lt;thead&gt; ， &lt;th&gt; ， &lt;tbody&gt; ， &lt;tfoot&gt; 和 &lt;tr&gt; 元素之前。</p></li></ul><p>属性说明：</p><p><strong>span</strong>：此属性包含一个正整数，表示&lt;colgroup&gt;元素跨越的连续列数。如果不存在，则其默认值为1。</p><blockquote><p><strong>注意</strong>：此属性应用于列组的属性，它对与之关联的 CSS 样式规则没有影响，甚至对列的组成员的单元格也没有影响。如果 &lt;colgroup&gt; 中有一个或多个 &lt;col&gt; 元素，则不允许使用 span 属性。</p></blockquote><h3 id="col">&lt;col&gt;</h3><p>HTML &lt;col&gt; 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于&lt;colgroup&gt;元素内。</p><ul><li><p>此元素允许使用CSS进行样式列，但只有少数属性将对该列产生影响。</p></li><li><p>没有结束标签</p></li></ul><p>属性说明：</p><p><strong>span</strong>：该属性值为一个正整数，表示该 &lt;col&gt; 元素横跨的列数。默认值为1。</p><h3 id="tbody">&lt;tbody&gt;</h3><p>HTML表主体元素(&lt;tbody&gt;)封装了一组表行(&lt;tr&gt;元素)，表明它们组成了表的主体(&lt; Table &gt;)。</p><ul><li><p>&lt;tbody&gt; 元素，以及它的兄弟 &lt;thead&gt; 和 &lt;tfoot&gt; ，提供了有用的语义信息，这些信息可以用于屏幕或打印机的渲染，也可以用于访问目的。</p></li><li><p>当打印文档时， &lt;thead&gt; 和 &lt;tfoot&gt; 元素在多页表的每一页上指定的信息可能是相同的，或者至少是非常相似的，而 &lt;tbody&gt; 元素的内容通常会因页面而异。</p></li><li><p>当表显示在屏幕上下文(例如窗口)中，而屏幕上下文不足以显示整个表时，用户代理可以让用户为同一个父表分别滚动 &lt;thead&gt; 、 &lt;tbody&gt; 、 &lt;tfoot&gt; 和 &lt;caption&gt; 块的内容。</p></li></ul><p>如果表包含一个 &lt;thead&gt; 块(用于在语义上识别标题行) ，那么 &lt;tbody&gt; 块必须紧随其后。</p><p>它不是 &lt;table&gt; 的必须子元素，但它必须是 &lt;table&gt; 的子元素。而且必须在 &lt;caption&gt; 、 &lt;colgroup&gt; 、 &lt;thead&gt; 之后。</p><p>&lt;tbody&gt; 元素不是父元素 &lt;table&gt; 图形化渲染所必需的子元素。但是，如果它的父元素 &lt;table&gt; 有一个 &lt;tr&gt; 元素作为它的直接子元素，则它必须不能作为该 &lt;table&gt; 的子元素。</p><p>允许的子元素：零个或多个 tr 元素。</p><p>每个表可以使用多个 &lt;tbody&gt; ，只要它们都是连续的。这使您可以将大型表中的行划分为多个部分，如果需要，每个部分都可以单独进行格式化。</p><p>示例：</p><p>在这个相对简单的示例中，我们创建一个表，该表列出有关一组带有 &lt;thead&gt; 和 &lt;tbody&gt; 的学生的信息，其中的正文中包含许多行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这里显示了表的html 注意 包括有关学生信息在内的所有体单元格都包含在一个&lt;tbody&gt;元素内 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Student ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Major<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3741255<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jones, Martha<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3971244<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nim, Victor<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Russian Literature<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4100332<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Petrov, Alexandra<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Astrophysics<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">   * 首先 设置表格的整体样式属性 配置表格外部边框的厚度 样式和颜色 </span></span><br><span class="hljs-comment"><span class="language-css">   * 并使用border-collapse来确保边界线在相邻的单元格之间共享，而不是每个边框之间都有空格 </span></span><br><span class="hljs-comment"><span class="language-css">   * font用于为表格建立初始字体</span></span><br><span class="hljs-comment"><span class="language-css">   */</span></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#555</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span> <span class="hljs-string">&quot;Lucida Grande&quot;</span>, <span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">   * 然后 为表中的大多数单元格设置样式 包括所有数据单元格 </span></span><br><span class="hljs-comment"><span class="language-css">   * 以及&lt;td&gt;和&lt;th&gt;单元格之间共享的那些样式</span></span><br><span class="hljs-comment"><span class="language-css">   * 单元格被赋予浅灰色轮廓 该轮廓为单个像素厚 填充被调整 并且所有单元格都使用text-align左对齐</span></span><br><span class="hljs-comment"><span class="language-css">   */</span></span><br><span class="language-css">  <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bbb</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: left;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">   * 最后 对&lt;thead&gt;块中包含的标题单元格进行其他样式设置</span></span><br><span class="hljs-comment"><span class="language-css">   * 与其他单元格边框相比 它们使用较暗的背景色 较大的字体大小和较粗 较暗的底部边框</span></span><br><span class="hljs-comment"><span class="language-css">   */</span></span><br><span class="language-css">  <span class="hljs-selector-tag">thead</span> &gt; <span class="hljs-selector-tag">tr</span> &gt; <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cce</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614087205550-26f961d4-fcff-4fb5-958b-c950d9d097bd.png" alt="image.png"></p><p>您可以使用多个&lt;tbody&gt;元素在一个表中创建多个节。 每个可能都有自己的一个或多个标题行； 但是，每个表只能有一个&lt;thead&gt;！ 因此，您需要使用填充有&lt;th&gt;元素的&lt;tr&gt;在每个&lt;tbody&gt;中创建标题。让我们以前面的示例为例，将更多学生添加到列表中，然后更新表格，以使学生无需按行对每个学生的专业进行分组，而是按专业进行分组，并为每个专业添加标题行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#555</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span> <span class="hljs-string">&quot;Lucida Grande&quot;</span>, <span class="hljs-string">&quot;Helvetica&quot;</span>, <span class="hljs-string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bbb</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: left;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">thead</span>&gt;<span class="hljs-selector-tag">tr</span>&gt;<span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cce</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-css">   * 大多数CSS保持不变 但是 我们确实为直接包含在&lt;tbody&gt;中的标头单元格（而不是那些驻留在&lt;thead&gt;中的标头单元格）</span></span><br><span class="hljs-comment"><span class="language-css">   * 添加了更微妙的样式 这用于指示每个表节的对应专业的标题</span></span><br><span class="hljs-comment"><span class="language-css">   */</span></span><br><span class="language-css">  <span class="hljs-selector-tag">tbody</span>&gt;<span class="hljs-selector-tag">tr</span>&gt;<span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#dde</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1.5px</span> solid <span class="hljs-number">#bbb</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Student ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 请注意 每个专业都放置在一个单独的&lt;tbody&gt;块中 该块的第一行包含一个&lt;th&gt;元素 </span><br><span class="hljs-comment">该元素的 colspan 属性横跨整个表的宽度 该标题列出&lt;tbody&gt;中包含的专业名称 --&gt;</span><br><span class="hljs-comment">&lt;!-- 然后 每个专业的&lt;tbody&gt;中其余的每一行都由两个单元格组成：</span><br><span class="hljs-comment">第一个单元格用于学生的ID，第二个单元格用于其名称  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Computer Science<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3741255<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jones, Martha<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4077830<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Pierce, Benjamin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5151701<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Kirk, James<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Russian Literature<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3971244<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nim, Victor<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Astrophysics<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4100332<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Petrov, Alexandra<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8892377<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Toyota, Hiroko<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2023/11/26/html%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89/assets/1614087921523-d0b81cdf-c01f-4a91-8024-b8fbe2c01c00.png" alt="image.png"></p><h3 id="thead">&lt;thead&gt;</h3><p>HTML的&lt;thead&gt;元素定义了一组定义表格的列头的行。</p><ul><li><p>允许的子元素：零或多个&lt;tr&gt;元素。</p></li><li><p>&lt;thead&gt; 必须出现在任何 &lt;caption&gt; 或 &lt;colgroup&gt; 元素之后，甚至是隐式定义，但必须出现在任何 &lt;tbody&gt; ， &lt;tfoot&gt; 和 &lt;tr&gt; 元素之前。</p></li></ul><h3 id="tfoot">&lt;tfoot&gt;</h3><p>HTML 元素&lt;tfoot&gt;  定义了一组表格中各列的汇总行。</p><ul><li><p>允许的子元素：零个或多个 &lt;tr&gt; 元素。</p></li><li><p>&lt;tfoot&gt; 必须出现在一个或多个 &lt;caption&gt;， &lt;colgroup&gt; ， &lt;thead&gt; , &lt;tbody&gt; ，或 &lt;tr&gt; 元素之后。 注意这是自 HTML5 起有的要求。</p><ul><li>在 HTML 4 中， &lt;tfoot&gt; 元素不能放在任何 &lt;tbody&gt; 或 &lt;tr&gt; 元素之后。注意，这与上述 HTML5 的标准相冲突。</li></ul></li></ul><h3 id="tr">&lt;tr&gt;</h3><p>HTML &lt;tr&gt; 元素定义表格中的行。 同一行可同时出现&lt;td&gt; 和&lt;th&gt; 元素。</p><ul><li><p>允许的子元素：零个或多个&lt;td&gt;或&lt;th&gt;元素，或它们的混合，一般只用一种，做双导航的时候会用到两种。</p></li><li><p>允许的父元素：&lt;table&gt;，&lt;thead&gt;，&lt;tbody&gt;或&lt;tfoot&gt;元素。</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">190</span>, <span class="hljs-number">190</span>, <span class="hljs-number">190</span>);</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">th</span><span class="hljs-selector-attr">[scope=<span class="hljs-string">&quot;col&quot;</span>]</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#696969</span>;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">th</span><span class="hljs-selector-attr">[scope=<span class="hljs-string">&quot;row&quot;</span>]</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d7d9f2</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">caption</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">caption-side</span>: bottom;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);</span><br><span class="language-css">    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-family</span>: sans-serif;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">8rem</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Alien football stars<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Player<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Gloobles<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>Za&#x27;taak<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>TR-7<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4,569<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>Khiresh Odo<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7,223<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>Mia Oolong<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>6,219<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="td">&lt;td&gt;</h3><p>HTML &lt;td&gt; 元素 定义了一个包含数据的表格单元格。</p><ul><li>只允许是 &lt;tr&gt; 的子元素。</li></ul><p>属性说明：</p><p><strong>colspan</strong>：此属性包含一个非负整数值，该整数值指示单元格可以扩展多少列。其默认值为1。大于1000的值将被视为错误，并将设置为默认值（1）。</p><p><strong>headers</strong>：此属性包含以空格分隔的字符串列表，每个字符串都与应用于该元素的 &lt;th&gt; 元素的 id 属性相对应。</p><p><strong>rowspan</strong>：此属性包含一个非负整数值，表示单元格扩展了多少行。它的默认值是 1 ；如果它的值设置为 0，它将一直扩展到单元格所属的表节（ &lt;thead&gt; 、 &lt;tbody&gt; 、 &lt;tfoot&gt; ，即使是隐式定义的）。高于 65534 的值将缩减为 65534 。</p><h3 id="th">&lt;th&gt;</h3><p>HTML &lt;th&gt; 元素定义表格内的表头单元格。这部分特征是由 scope 和 headers 属性准确定义的。</p><ul><li>只允许是 &lt;tr&gt; 的子元素。</li></ul><p>属性说明：</p><p><strong>colspan</strong>：这个属性包含一个正整数表示了每单元格中扩展列的数量。默认值为1 。超过1000的值被视作1000。</p><p><strong>headers</strong>：这个属性包含了一个空间分隔的字符串的列表, 每个与其他&lt;th&gt;元素相关联的id 属性一一对应。</p><p><strong>rowspan</strong>：这个属性包含一个正整数表示了每单元格中扩展列的数量。默认值为1. 如果该值被设置为 0, 这个单元格就被扩展为( &lt;thead&gt; ， &lt;tbody&gt; 或 &lt;tfoot&gt; )中表格部分的最后一个元素。比65534大的值被视作65534。</p><p><strong>scope</strong>：这个枚举属性定义了表头元素 (在 &lt;th&gt; 中定义) 关联的单元格。它可能有以下值：</p><ul><li>row:     表头关联一行中所有的单元格。</li><li>col:      表头关联一列中所有的单元格。</li><li>rowgroup:表头属于一个行组并与其中所有单元格相关联。这些单元格可以被放在表头的左侧或右侧，取决于 &lt;table&gt; 元素中 dir 属性的值 。</li><li>colgroup: 表头属于一个列组并与其中所有单元格相关联。</li><li>auto</li></ul><h2 id="表单">表单</h2><h3 id="from">&lt;from&gt;</h3><p>HTML &lt;form&gt; 元素表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。</p><p>属性说明：</p><p><strong>accept-charset</strong>：一个空格分隔或逗号分隔的列表，此列表包括了服务器支持的字符编码。浏览器以这些编码被列举的顺序使用它们。默认值是一个保留字符串 “UNKNOWN”。此字符串指的是，和包含此表单元素的文档相同的编码。在之前版本的 HTML 中，不同的字符编码可以用空格或逗号分隔。在 HTML5 中，只有空格可以允许作为分隔符。</p><p><strong>autocapitalize</strong>：这是一个被 iOS Safari 使用的非标准属性。当用户在一些表单的文本后代控件中，输入/编辑一些文本值时，此属性控制了这些文本值的首字母是否大写或者使用其他的大写样式。如果 autocapitalize 属性在某个单独的表单后代控件被指定的话，那么此单独的设定会覆盖原来表单范围内的 autocapitalize 设定。默认值为 sentences。可以选择的值如下：</p><ul><li><p>none：完全禁用自动首字母大写。</p></li><li><p>sentences：自动对每句话首字母大写。</p></li><li><p>words：自动对每个单词首字母大写。</p></li><li><p>characters：自动大写所有的字母。</p></li></ul><p><strong>autocomplete</strong>：用于指示 input 元素是否能够拥有一个默认值，此默认值是由浏览器自动补全的。此设定可以被属于此表单的子元素的 autocomplete 属性覆盖。 可能的值有：</p><ul><li><p>off：浏览器可能不会自动补全条目（在疑似登录表单中，浏览器倾向于忽略该值，而提供密码自动填充功能，参见 自动填充属性和登录）</p></li><li><p>on：浏览器可自动补全条目</p></li></ul><p><strong>name</strong>：表单的名称。HTML 4中不推荐（应使用 id）。在 HTML 5 中，该值必须是所有表单中独一无二的，而且不能是空字符串。</p><p><strong>rel</strong>：根据 value 创建一个超链接。</p><p><strong>action</strong>：处理表单提交的 URL。这个值可被 &lt;button&gt;、&lt;input type=“submit”&gt; 或 &lt;input type=“image”&gt; 元素上的 formaction 属性覆盖。</p><p><strong>enctype</strong>：当 method 属性值为 post 时，enctype 就是将表单的内容提交给服务器的 MIME 类型 。可能的取值有：</p><ul><li><p>application/x-www-form-urlencoded：未指定属性时的默认值。</p></li><li><p>multipart/form-data：当表单包含 type=file 的 &lt;input&gt; 元素时使用此值。</p></li><li><p>text/plain：出现于 HTML5，用于调试。</p></li></ul><p>这个值可被 &lt;button&gt; 、 &lt;input type=“submit”&gt; 或 &lt;input type=“image”&gt; 元素上的 formaction 属性覆盖。</p><p><strong>method</strong>：浏览器使用这种 HTTP 方式来提交 表单. 可能的值有：</p><ul><li><p>post：指的是 HTTP POST 方法；表单数据会包含在表单体内然后发送给服务器。</p></li><li><p>get：指的是 HTTP GET 方法；表单数据会附加在 action 属性的 URL 中，并以 ‘?’ 作为分隔符，没有副作用 时使用这个方法。</p></li><li><p>dialog：如果表单在 &lt;dialog&gt; 元素中，提交时关闭对话框。</p></li></ul><p>此值可以被 &lt;button&gt;、&lt;input type=“submit”&gt; 或 &lt;input type=“image”&gt; 元素中的 formmethod 属性覆盖。</p><p><strong>novalidate</strong>：此布尔值属性表示提交表单时不需要验证表单。 如果没有声明该属性 （因此表单需要通过验证）。该属性可以被表单中的 &lt;button&gt; 、 &lt;input type=“submit”&gt; 或 &lt;input type=“image”&gt; 元素中的 formnovalidate 属性覆盖。</p><p><strong>target</strong>：表示在提交表单之后，在哪里显示响应信息。在 HTML 4 中, 这是一个 frame 的名字/关键字对。在 HTML5 里，这是一个浏览上下文 的名字/关键字（如标签页、窗口或 iframe）。下述关键字有特别含义：</p><ul><li><p>_self：默认值。在相同浏览上下文中加载。</p></li><li><p>_blank：在新的未命名的浏览上下文中加载。</p></li><li><p>_parent：在当前上下文的父级浏览上下文中加载，如果没有父级，则与 _self 表现一致。</p></li><li><p>_top：在最顶级的浏览上下文中（即当前上下文的一个没有父级的祖先浏览上下文），如果没有父级，则与 _self 表现一致。</p></li></ul><p>此值可以被 &lt;button&gt;、&lt;input type=“submit”&gt; 或 &lt;input type=“image”&gt;  元素中的 formmethod 属性覆盖。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Form which will send a GET request to the current URL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submitted-name&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Form which will send a POST request to the current URL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submitted-name&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Form with fieldset, legend, and label --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span> Select me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="fieldset">&lt;fieldset&gt;</h3><p>HTML &lt;fieldset&gt; 元素用于对表单中的控制元素进行分组（也包括 label 元素）。</p><p>&lt;fieldset&gt; 元素将一个HTML表单的一部分组成一组，内置了一个 &lt;legend&gt; 元素作为 fieldset 的标题。这个元素有几个属性，最值得注意的是 form属性，其可以包含同一页面的 &lt;form&gt; 元素的 id，以使 &lt;fieldset&gt; 成为这个 &lt;form&gt; 的一部分，即使 &lt;fieldset&gt; 不在其内。还有 disabled 属性，可将 &lt;fieldset&gt; 及其所有内容设置为不可用。</p><p>属性说明：</p><p><strong>disabled</strong>：如果设置了这个 bool 值属性, &lt;fieldset&gt; 的所有子代表单控件也会继承这个属性。这意味着它们不可编辑，也不会随着 &lt;form&gt; 一起提交。它们也不会接收到任何浏览器事件，如鼠标点击或与聚焦相关的事件。默认情况下，浏览器会将这样的控件展示为灰色。注意， &lt;legend&gt; 中的表单元素不会被禁用。</p><p><strong>form</strong>：将该值设为一个 &lt;form&gt; 元素的 id 属性值以将 &lt;fieldset&gt; 设置成这个 &lt;form&gt; 的一部分。</p><p><strong>name</strong>：元素分组的名称。</p><blockquote><p><strong>注意</strong>：fieldset 的标题由第一个 &lt;legend&gt; 子元素确定。</p></blockquote><h3 id="legend">&lt;legend&gt;</h3><p>HTML &lt;legend&gt; 元素用于表示其父元素 &lt;fieldset&gt; 的内容标题。</p><h3 id="label">&lt;label&gt;</h3><p>HTML &lt;label&gt; 元素（标签）表示用户界面中某个元素的说明。</p><ul><li><p>将一个 &lt;label&gt; 和一个 &lt;input&gt; 元素相关联主要有这些优点：</p><ul><li>标签文本不仅与其相应的文本输入元素在视觉上相关联，程序中也是如此。 这意味着，当用户聚焦到这个表单输入元素时，屏幕阅读器可以读出标签，让使用辅助技术的用户更容易理解应输入什么数据。</li><li>你可以点击关联的标签来聚焦或者激活这个输入元素，就像直接点击输入元素一样。这扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</li></ul></li><li><p>将一个 &lt;label&gt; 和一个 &lt;input&gt; 元素匹配在一起，你需要给 &lt;input&gt; 一个 id 属性。而 &lt;label&gt; 需要一个 for 属性，其值和  &lt;input&gt; 的 id 一样。另外，你也可以将 &lt;input&gt; 直接放在 &lt;label&gt; 里，此时则不需要 for 和 id 属性，因为关联已隐含存在。</p></li><li><p>关联标签的表单控件称为这个标签的已关联标签的控件。一个 input 可以与多个标签相关联。</p></li><li><p>点击或者轻触（tap）与表单控件相关联的 &lt;label&gt; 也可以触发关联控件的 click 事件。</p></li></ul><p>属性说明：</p><p><strong>for</strong>：即和 &lt;label&gt; 元素在同一文档中的 可关联标签的元素 的 id。 文档中第一个 id 值与 &lt;label&gt; 元素 for 属性值相同的元素，如果可关联标签（labelable），则为已关联标签的控件，其标签就是这个 &lt;label&gt; 元素。如果这个元素不可关联标签，则 for 属性没有效果。如果文档中还有其他元素的 id 值也和 for 属性相同，for 属性对这些元素也没有影响。</p><p><strong>form</strong>：表示与 label 元素关联的 &lt;form&gt; 元素（即它的表单拥有者）。如果声明了该属性，其值应是同一文档中 &lt;form&gt; 元素的 id。因此你可以将 label 元素放在文档的任何位置，而不仅作为 &lt;form&gt; 元素的后代。</p><p><strong>可访问性问题</strong>：不要在 label 元素内部放置可交互的元素，比如 &lt;a&gt; 或 &lt;button&gt; 。这样做会让用户更难激活或触发与 label 相关联的表单输入元素。</p><p>在一个 &lt;label&gt; 元素内部放置标题元素（heading elements）会干扰许多辅助技术，原因是标题通常被用于辅助导航（a navigation aid）。若标签内的文本需要做视觉上的调整，应该使用适用于 &lt;label&gt; 元素的 CSS 类。若一个 表单，或表单中的一部分需要一个标题，应使用 &lt;legend&gt; 元素置于 &lt;fieldset&gt; 元素中。</p><p>若 &lt;input&gt; 元素声明了 type=“button” 和有效的 value 属性，则不需要为其添加标签。添加标签可能会影响辅助技术理解这个输入按钮的语义。 &lt;button&gt; 元素也一样。</p><h3 id="input">&lt;input&gt;</h3><p>HTML &lt;input&gt; 元素用于为基于 Web 的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和 user agent 。</p><ul><li>没有结束标签。</li></ul><p>属性说明：</p><p><strong>type</strong>：&lt;input&gt; 的工作方式相当程度上取决于 type 属性的值，不同的 type 值会在各自的参考页中进行介绍。如果未指定此属性，则采用的默认类型为 text。</p><p>可用的值包括：</p><table><thead><tr><th>Type</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>没有默认行为的按钮，上面显示 value 属性的值，默认为空。</td></tr><tr><td>checkbox</td><td>复选框，可设为选中或未选中。</td></tr><tr><td>color</td><td>用于指定颜色的控件；在支持的浏览器中，激活时会打开取色器。</td></tr><tr><td>date</td><td>输入日期的控件（年、月、日，不包括时间）。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</td></tr><tr><td>datetime-local</td><td>输入日期和时间的控件，不包括时区。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</td></tr><tr><td>email</td><td>编辑邮箱地址的区域。类似 text 输入，但在支持的浏览器和带有动态键盘的设备上会有确认参数和相应的键盘。</td></tr><tr><td>file</td><td>让用户选择文件的控件。使用accept属性规定控件能选择的文件类型。</td></tr><tr><td>hidden</td><td>不显示的控件，其值仍会提交到服务器。举个例子，右边就是一个隐形的控件。</td></tr><tr><td>image</td><td>带图像的 submit 按钮。显示的图像由 src 属性规定。如果 src 缺失，alt 属性就会显示。</td></tr><tr><td>month</td><td>输入年和月的控件，没有时区。</td></tr><tr><td>number</td><td>用于输入数字的控件。如果支持的话，会显示滚动按钮并提供缺省验证（即只能输入数字）。拥有动态键盘的设备上会显示数字键盘。</td></tr><tr><td>password</td><td>单行的文本区域，其值会被遮盖。如果站点不安全，会警告用户。</td></tr><tr><td>radio</td><td>单选按钮，允许在多个拥有相同 name 值的选项中选中其中一个。</td></tr><tr><td>range</td><td>此控件用于输入不需要精确的数字。控件是一个范围组件，默认值为正中间的值。同时使用 htmlattrdefmin  和 htmlattrdefmax 来规定值的范围。</td></tr><tr><td>reset</td><td>此按钮将表单的所有内容重置为默认值。不推荐。</td></tr><tr><td>search</td><td>用于搜索字符串的单行文字区域。输入文本中的换行会被自动去除。在支持的浏览器中可能有一个删除按钮，用于清除整个区域。拥有动态键盘的设备上的回车图标会变成搜索图标。</td></tr><tr><td>submit</td><td>用于提交表单的按钮。</td></tr><tr><td>tel</td><td>用于输入电话号码的控件。拥有动态键盘的设备上会显示电话数字键盘。</td></tr><tr><td>text</td><td>默认值。单行的文本区域，输入中的换行会被自动去除。</td></tr><tr><td>time</td><td>用于输入时间的控件，不包括时区。</td></tr><tr><td>url</td><td>用于输入 URL 的控件。类似 text 输入，但有验证参数，在支持动态键盘的设备上有相应的键盘。</td></tr><tr><td>week</td><td>用于输入以年和周数组成的日期，不带时区。</td></tr><tr><td>废弃的值</td><td></td></tr><tr><td>datetime</td><td>用于输入基于UTC时区的日期和时间（时、分、秒及秒的小数部分）。</td></tr></tbody></table><p>&lt;input&gt; 元素由于拥有诸多属性而异常强大，其中前文举例说明的 type 属性尤其重要。由于所有 &lt;input&gt; 元素，无论是哪种 type ，都基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement">HTMLInputElement</a> 接口，所以理论上说，它们共享一套相同的属性。但实际上大部分属性只作用于特定一组 type。此外，一些属性作用于 &lt;input&gt; 的方式取决于 &lt;input&gt; 的 type 属性，不同的 type 有不同的效果。</p><p>下面的表格列出了所有属性，每个属性都有简短的描述。表格后的列表更详细地描述了各个属性及它们与哪些 &lt;input&gt; type相关。与大部分或者全部 &lt;input&gt; type都相关的属性会讲述更多细节。一些针对特定 &lt;input&gt;type的属性，或者所有 &lt;input&gt; type都有，但在特定的 &lt;input&gt; type上有特定表现的属性，会在相应的 type 页面中说明。这个元素包含全局属性，一些针对&lt;input&gt;元素有额外意义的全局属性也会特别说明。 &lt;input&gt; 元素的属性包括全局HTML属性和以下属性：</p><table><thead><tr><th>属性</th><th>相关的 type</th><th>描述</th></tr></thead><tbody><tr><td>accept</td><td>file</td><td>用于规定文件上传控件中期望的文件类型</td></tr><tr><td>alt</td><td>image</td><td>image type的alt属性，是可访问性的要求。</td></tr><tr><td>autocomplete</td><td>所有</td><td>用于表单的自动填充功能</td></tr><tr><td>autofocus</td><td>所有</td><td>页面加载时自动聚焦到此表单控件</td></tr><tr><td>capture</td><td>file</td><td>文件上传控件中媒体拍摄的方式</td></tr><tr><td>checked</td><td>radio, checkbox</td><td>用于控制控件是否被选中</td></tr><tr><td>dirname</td><td>text, search</td><td>表单区域的一个名字，用于在提交表单时发送元素的方向性</td></tr><tr><td>disabled</td><td>所有</td><td>表单控件是否被禁用</td></tr><tr><td>form</td><td>所有</td><td>将控件和一个form元素联系在一起</td></tr><tr><td>fromaction</td><td>image, submit</td><td>用于提交表单的URL</td></tr><tr><td>formenctype</td><td>image, submit</td><td>表单数据集的编码方式，用于表单提交</td></tr><tr><td>formmethod</td><td>image, submit</td><td>用于表单提交的HTTP方法</td></tr><tr><td>formnovalidate</td><td>image, submit</td><td>提交表单时绕过对表单控件的验证</td></tr><tr><td>formtarget</td><td>image, submit</td><td>表单提交的浏览上下文</td></tr><tr><td>height</td><td>image</td><td>和 &lt;img&gt; 的 height 属性相同；垂直方向</td></tr><tr><td>list</td><td>绝大部分</td><td>自动填充选项的&lt;datalist&gt; 的id值</td></tr><tr><td>max</td><td>数字 type</td><td>最大值</td></tr><tr><td>maxlength</td><td>password, search, tel, text, url</td><td>value 的最大长度（最多字符数目）</td></tr><tr><td>min</td><td>数字 type</td><td>最小值</td></tr><tr><td>minlength</td><td>password, search, tel, text, url</td><td>value 的最小长度（最少字符数目）</td></tr><tr><td>multiple</td><td>email, file</td><td>布尔值。 是否允许多个值</td></tr><tr><td>name</td><td>所有</td><td>input表单控件的名字。以名字/值对的形式随表单一起提交</td></tr><tr><td>pattern</td><td>password, text, tel</td><td>匹配有效 value 的模式（pattern）</td></tr><tr><td>placeholder</td><td>password, search, tel, text, url</td><td>当表单控件为空时，控件中显示的内容</td></tr><tr><td>readonly</td><td>绝大部分</td><td>布尔值。存在时表示控件的值不可编辑</td></tr><tr><td>required</td><td>绝大部分</td><td>布尔值。表示此值为必填项或者提交表单前必须先检查该值</td></tr><tr><td>size</td><td>email, password, tel, text</td><td>控件的大小</td></tr><tr><td>src</td><td>image</td><td>和&lt;img&gt; 的 src 属性一样；图像资源的地址</td></tr><tr><td>step</td><td>数字type</td><td>有效的递增值</td></tr><tr><td>type</td><td>所有</td><td>input表单控件的type</td></tr><tr><td>value</td><td>所有</td><td>表单控件的值。以名字/值对的形式随表单一起提交</td></tr><tr><td>width</td><td>image</td><td>与 &lt;img&gt; 的 width 属性一样</td></tr></tbody></table><h3 id="button">&lt;button&gt;</h3><p>HTML &lt;button&gt; 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。</p><p>属性说明：</p><p><strong>autofocus</strong>：一个布尔属性，用于指定当页面加载时按钮必须有输入焦点，除非用户重写，例如通过不同控件键入。只有一个表单关联元素可以指定该属性。</p><p><strong>autocomplete</strong>：该属性在 &lt;button&gt;上的使用并未标准化，只有 Firefox 允许。不像其它浏览器，Firefox 默认在页面加载时持续禁用Button的动态状态）。将此属性设置为off (i.e. autocomplete=“off”)关闭此特性。</p><p><strong>disabled</strong>：此布尔属性表示用户不能与button交互。如果属性值未指定，button 继承包含元素，例如 &lt;fieldset&gt; ；如果没有设置 disabled 属性的包含元素，button 将可交互。不像其它浏览器，Firefox默认在页面加载时持续禁用Button的动态状态。使用 autocomplete 属性可控制此特性。</p><p><strong>form</strong>：表示 button 元素关联的 form 元素（它的表单拥有者）。此属性值必须为同一文档中的一个 &lt;form&gt; 元素的 id 属性。如果此属性未指定， &lt;button&gt; 元素必须是form元素的后代。利用此属性，你可以将 &lt;button&gt; 元素放置在文档内的任何位置，而不仅仅是作为他们form元素的后代。</p><p><strong>formaction</strong>：表示程序处理button提交信息的URI。如果指定了，将重写 button 表单拥有者的 action 属性。</p><p><strong>formenctype</strong>：如果 button 是 submit 类型，此属性值指定提交表单到服务器的内容类型。可选值：</p><ul><li>application/x-www-form-urlencoded: 未指定时的默认值。</li><li>multipart/form-data: 如果使用 type 属性的 &lt;input&gt; 元素设置文件，使用此值。</li><li>text/plain</li></ul><p>如果指定此属性，它将重写 button 的表单拥有者的 enctype 属性。</p><p><strong>formmethod</strong>：如果 button 是 submit 类型，此属性指定浏览器提交表单使用的 HTTP 方法。可选值:</p><ul><li><p>post: 来自表单的数据被包含在表单内容中，被发送到服务器。</p></li><li><p>get:  来自表单的数据以’?'作为分隔符被附加到form的URI属性中，得到的URI被发送到服务器。当表单没有副作用，且仅包含ASCII字符时使用这种方法。</p></li></ul><p>如果指定了，此属性会重写 button 拥有者的 method 属性。</p><p><strong>formnovalidate</strong>：如果button是submit类型，此布尔属性指定当表单被提交时不需要验证。如果指定了，它会重写 button 拥有者的 novalidate 属性。</p><p><strong>formtarget</strong>：如果 button 是 submit 类型，此属性指定一个名称或关键字，表示接收提交的表单后在哪里显示响应。这是一个浏览上下文（例如tab，window或内联框架）的名称或关键字。如果指定了，它会重写 button 拥有者的 target 属性。关键字如下：</p><ul><li><p>_self: 在同一个浏览上下文中加载响应作为当前的。未指定时此值为默认值。</p></li><li><p>_blank:  在一个新的不知名浏览上下文中加载响应。</p></li><li><p>_parent: 在当前浏览上下文父级中加载响应。如果没有父级的，此选项将按 _self 执行。</p></li><li><p>_top:  在顶级浏览上下文（即当前浏览上下文的祖先，且没有父级）中架加载响应。如果没有顶级的，此选项将按 _self 执行。</p></li></ul><p><strong>name</strong>：button的名称，与表单数据一起提交。</p><p><strong>type</strong>：button的类型。可选值：</p><ul><li><p>submit: 此按钮将表单数据提交给服务器。如果未指定属性，或者属性动态更改为空值或无效值，则此值为默认值。</p></li><li><p>reset:  此按钮重置所有组件为初始值。</p></li><li><p>button: 此按钮没有默认行为。它可以有与元素事件相关的客户端脚本，当事件出现时可触发。</p></li><li><p>menu: 此按钮打开一个由指定 &lt;menu&gt; 元素进行定义的弹出菜单。</p></li></ul><p><strong>value</strong>：button的初始值。它定义的值与表单数据的提交按钮相关联。当表单中的数据被提交时，这个值便以参数的形式被递送至服务器。</p><p>&lt;button&gt; 元素比 &lt;input&gt; 元素更容易使用样式。你可以在元素内添加HTML内容（像 &lt;em&gt; 、 &lt;strong&gt; 甚至 &lt;img&gt; ），以及 ::after 和 ::before 伪元素来实现复杂的效果，而 &lt;input&gt; 只支持文本内容。</p><p>如果你的按钮不是用于向服务器提交数据，请确保这些按钮的 type 属性设置成 button。否则它们被按下后将会向服务器发送数据并加载（可能并不存在的）响应内容，因而可能会破坏当前文档的状态。</p><p>IE7 在使用 &lt;button type=“submit” name=“myButton” value=“foo”&gt;Click me&lt;/button&gt; 提交表单时存在一个BUG，POST 提交的数据将是 myButton=Click me 而不是 myButton=foo（没有把 value 属性的值 foo 提交上去）。</p><p>IE6 的BUG更糟糕，在提交表单的时候会把表单内所有的按钮都提交上去，同时还有和 IE7 一样的BUG。</p><p>IE8 已经修复了这个问题。</p><p>Firefox 出于使用方便的目的，会在获得焦点的按钮上添加一个细小的虚线框。 这个边框由浏览器内部的样式表中的 CSS 定义，但如果有必要的话，你可以用 button::-moz-focus-inner { } 重写这个样式。</p><p>Firefox 在默认情况下会在页面加载时让 &lt;button&gt; 保持动态禁用状态 ，这个行为在其它浏览器上是没有的。将 autocomplete 属性设置为 off 可以禁用这项特性。</p><p>安卓系统上的 Firefox &lt;35 会为每个按钮设置一个默认的 background-image 渐变背景。这项可以通过 background-image: none 禁用。</p><p>点击 &lt;button&gt; 会让浏览器和操作系统（默认情况下）将焦点放在其上。 &lt;input&gt; 的 type=“button” 和 type=“submit” 也是一样的。</p><table><thead><tr><th>桌面浏览器</th><th>Windows 8.1</th><th>OS X 10.9</th></tr></thead><tbody><tr><td>Firefox 30.0</td><td>Yes</td><td>No (even with a tabindex )</td></tr><tr><td>Chrome 35</td><td>Yes</td><td>Yes</td></tr><tr><td>Safari 7.0.5</td><td>N/A</td><td>No (even with a tabindex )</td></tr><tr><td>Internet Explorer 11</td><td>Yes</td><td>N/A</td></tr><tr><td>Presto (Opera 12)</td><td>Yes</td><td>Yes</td></tr><tr><td>桌面浏览器</td><td>Windows 8.1</td><td>OS X 10.9</td></tr><tr><td>Firefox 30.0</td><td>Yes</td><td>No (even with a tabindex )</td></tr><tr><td>Chrome 35</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="select">&lt;select&gt;</h3><p>HTML &lt;select&gt; 元素表示一个提供选项菜单的控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">label</span>,<span class="hljs-selector-tag">footer</span> &#123; <span class="hljs-attribute">font-family</span>: sans-serif; &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">label</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>; &#125;</span><br><span class="language-css">  select &#123; <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">9rem</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span>; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pet-select&quot;</span>&gt;</span>Choose a pet:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pets&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pet-select&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--Please choose an option--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dog&quot;</span>&gt;</span>Dog<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cat&quot;</span>&gt;</span>Cat<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hamster&quot;</span>&gt;</span>Hamster<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;parrot&quot;</span>&gt;</span>Parrot<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spider&quot;</span>&gt;</span>Spider<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;goldfish&quot;</span>&gt;</span>Goldfish<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述例子展示了 &lt;select&gt; 的典型用法。元素中设置了 id 属性以将其与 &lt;label&gt; 元素关联在一起，提高可及性（accessibility）。name 属性表示提交到服务器的相关数据点的名字。每个菜单选项由 &lt;select&gt; 中的一个 &lt;option&gt; 元素定义。</p><p>每个 &lt;option&gt; 元素都应该有一个 value 属性，其中包含被选中时需要提交到服务器的数据值。如果不含 value 属性，则 value 值默认为元素中的文本。你可以在 &lt;option&gt; 元素中设置一个 selected 属性以将其设置为页面加载完成时默认选中的元素。</p><p>&lt;select&gt; 元素有一些用于控制元素的特有属性，例如 multiple 规定了能不能同时选中多个选项，size 规定了一次性显示多少选项。这个元素也支持大多数常见的表单输入元素属性，如 required, disabled, autofocus 等。</p><p>你还可以将 &lt;option&gt; 元素放在 &lt;optgroup&gt; 元素中以为下拉菜单创建不同的选项分组。</p><p>属性说明：</p><p><strong>autocomplete</strong>：一个 DOMString，为 用户代理 提供自动填充功能的线索。 关于该值的完整列表以及如何使用自动填充的详细信息，请参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E5%B1%9E%E6%80%A7">HTML 自动完成属性</a>。</p><p><strong>autofocus</strong>：这个布尔值属性能够让一个对象在页面加载的时候获得焦点。一个文档中只有一个对象可以有这个属性。</p><p><strong>disabled</strong>：这个布尔值的属性表示用户不能与该表单控件交互。如果没有声明这个属性，则从它的父元素继承，例如 fieldset；如果没有父元素设置了 disabled 属性, 那么默认该表单对象可用。</p><p><strong>form</strong>：&lt;select&gt; 所关联的 &lt;form&gt; (它的&quot;表单拥有者&quot;)。其值必须是在同一文档中的 &lt;form&gt; 元素的 id（如果没有设置这个属性， &lt;select&gt; 元素则与其任何存在的祖先 &lt;form&gt; 元素关联）。这个属性让你将 &lt;select&gt; 元素与文档中任意位置的 &lt;form&gt; 元素相关联，而不仅仅是包含 &lt;select&gt;元素的 &lt;form&gt; 元素。这个属性还可以覆盖元素的祖先 &lt;form&gt; 元素。</p><p><strong>multiple</strong>：这个布尔值属性表示列表中的选项是否支持多选。没有声明该值时，一次只能选中一个选项。声明这个属性后，大多数浏览器都会显示一个可滚动的列表框，而非一个下拉菜单。</p><p><strong>name</strong>：该属性规定了控件的名称。</p><p><strong>required</strong>：一个布尔值属性，表示必须选中一个有非空字符串值的选项。</p><p><strong>size</strong>：如果控件显示为滚动列表框（如声明了 multiple），则此属性表示为控件中同时可见的行数。浏览器不需要将选择元素呈现为滚动列表框。默认值为 0。根据 HTML5 规范， 默认值应该为 1； 但是，在实践中，这样会影响到一些网站，同时其它浏览器也没有那么处理，所以 Mozilla 在 Firefox 中选择继续使用默认值 0。</p><p>在桌面电脑中，有几种方式在设置了 multiple 属性的 &lt;select&gt; 元素中选中多个选项：</p><p>鼠标用户可以按住 Ctrl, Command, 或 Shift 键（取决于你的操作系统）然后点击不同选项以选择或取消选择。</p><p>警告：以下所述的通过键盘选择多个不连续选项的方法目前只在 Firefox 有效（译者注：Chrome 81 也已支持）。</p><p>另请注意：在 macOS 中， Ctrl + Up 和 Ctrl + Down 组合键会与系统默认用于任务管理和应用窗口的组合键冲突。所以如果要使用这些组合键，你需要关掉系统默认的组合键。</p><p>键盘用户可以这样选中多个连续的选项：</p><ul><li><p>聚焦于 &lt;select&gt; 元素（如使用 Tab）</p></li><li><p>使用 Up 和 Down 方向键以从下向上或从上向下选择选项。</p></li><li><p>按住 Shift 键然后使用 Up 和 Down 方向键来增加或减少选中的方向。</p></li></ul><p>键盘用户还可以这样选中多个不连续的选项：</p><ul><li><p>聚焦于 &lt;select&gt; 元素（例如使用 Tab）。</p></li><li><p>按住 Ctrl 键，然后使用 Up 和 Down 方向键来改变聚焦的选项，聚焦的选项使用虚线轮廓高亮，和使用键盘聚焦链接的方式一样。</p></li><li><p>按下 Space 以选择或取消选择聚焦的选项。</p></li></ul><p>众所周知， &lt;select&gt; 元素很难用 CSS 进行高效的设计。你可以像其他元素一样改变某些方面——例如，调整 盒模型、显示的字体 等，你还可以使用 appearance 属性来去除默认的系统外观。</p><p>但是，这些属性的表现在不同浏览器之间并不一致，而且有些事情难以很好地处理，例如在一列中顺序排列不同类型的表单元素。 &lt;select&gt; 元素的内部结构复杂，难以控制。 如果你想完全控制，你应该考虑使用一个在修改表单部件样式方面拥有强大能力的库，或者尝试使用非语义元素和 JavaScript 来制作下拉菜单，再使用 WAI-ARIA 来提供语义。</p><p>有关样式 &lt;select&gt; 的更多有用信息，请参阅：</p><p>○<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Styling_HTML_forms">Styling HTML forms</a></p><p>○<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Advanced_styling_for_HTML_forms">Advanced styling for HTML forms</a></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Please choose one or more pets:<br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pets&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;4-legged pets&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dog&quot;</span>&gt;</span>Dog<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cat&quot;</span>&gt;</span>Cat<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hamster&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Hamster<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Flying pets&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;parrot&quot;</span>&gt;</span>Parrot<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;macaw&quot;</span>&gt;</span>Macaw<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;albatross&quot;</span>&gt;</span>Albatross<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="datalist">&lt;datalist&gt;</h3><p>HTML &lt;datalist&gt;元素包含了一组&lt;option&gt;元素，这些元素表示其它表单控件可选值。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Choose a browser from this list:<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;browsers&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myBrowser&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Firefox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Internet Explorer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Opera&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Safari&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="optgroup">&lt;optgroup&gt;</h3><p>HTML元素 &lt;optgroup&gt; 为&lt;select&gt; 元素中的选项创建分组。</p><ul><li>&lt;optgroup&gt; 元素不能嵌套。</li></ul><p>属性说明：</p><p><strong>disabled</strong>：如果设置了这个布尔值，则不能选择这个选项组中的任何选项。通常浏览器会置灰这样的控件，它不接受任何浏览器事件，如鼠标点击或者焦点相关的事件。</p><p><strong>label</strong>：选项组的名字，浏览器用以在用户界面中标记选项。使用这个元素时必须加上这个属性。</p><h3 id="option">&lt;option&gt;</h3><p>HTML &lt;datalist&gt;元素包含了一组&lt;option&gt;元素，这些元素表示其它表单控件可选值.</p><h3 id="textarea">&lt;textarea&gt;</h3><p>HTML &lt;textarea&gt; 元素表示一个多行纯文本编辑控件，当你希望用户输入一段相当长的、不限格式的文本，例如评论或反馈表单中的一段意见时，这很有用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">label</span>,<span class="hljs-selector-tag">textarea</span> &#123; <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">8rem</span>; <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">textarea</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">#999</span>; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">label</span> &#123; <span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span>Tell us your story:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;story&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;story&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><br>It was a dark and stormy night...<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述例子展示了 &lt;textarea&gt; 的几个特点：</p><ul><li><p>为了提高可访问性（accessibility），用于将 &lt;textarea&gt; 与一个 &lt;label&gt; 关联的 id 属性。</p></li><li><p>name 属性，用于设置随表单一同提交到服务器的相关数据的名字。</p></li><li><p>rows 和 cols 属性，用于声明 &lt;textarea&gt; 的精确尺寸。这对于一致性非常有帮助，因为不同浏览器的默认值常常不一样。</p></li><li><p>位于开始标签和闭合标签之间的默认内容。 &lt;textarea&gt; 不支持 value 属性。但是通过 .value 来获取内容。</p></li></ul><p>&lt;textarea&gt; 还可以使用 &lt;input&gt; 中的一些常见属性，如autocomplete, autofocus, disabled, placeholder, readonly, 和 required。</p><p>属性说明：</p><p><strong>autocapitalize</strong>：iOS的非标准属性（运行在iOS上的Safari、Firefox、Chrome都支持），文本是否自动首字母大写。在iOS5和之后的版本上有效。可能的值为：</p><ul><li><p>none: 禁用首字母大写。</p></li><li><p>sentences: 句子的首字母大写。</p></li><li><p>words: 单词或者字母的首字母大写。</p></li><li><p>characters: 全部字母大写。</p></li><li><p>on:  自iOS 5废弃。</p></li><li><p>off: 自iOS 5废弃。</p></li></ul><p><strong>autocomplete</strong>：是否使用浏览器的记忆功能自动填充文本。可能的值有：</p><ul><li><p>off: 不使用浏览器的记忆自动填充，使用者必须输入他们想要输入的所有内容。或者网页提供了自己的自动填充方法。</p></li><li><p>on: 浏览器根据用户之前输入的内容或者习惯，在用户输入的时候给出相应输入提示。</p></li></ul><p>如果不指明 autocomplete 属性，浏览器会从父级的表单元素上解析是不是开启这个属性。表单元素可以是textarea 元素的父级 &lt;form&gt; 或者 textarea 有跟表单相同的 id。</p><p><strong>autofocus</strong>：页面加载完毕之后是否自动给本元素添加焦点。只有跟表格关联的才能使本属性生效。</p><p><strong>cols</strong>：文本域的可视宽度。必须为正数，默认为20 (HTML5)。</p><p><strong>disabled</strong>：禁用文本域。默认为false。如果未指定，也可以从父级上如 &lt;fieldset&gt; 继承而来。</p><p><strong>form</strong>：指定跟自身相关联的表单。值必须为本文档内的表单的ID，如果未指定，就是跟当前所在的表单元素相关联。这就允许你在文档的任意地方放置文本域元素。</p><p><strong>maxlength</strong>：允许用户输入的最大字符长度 (Unicode) 。未指定表示无限长度。</p><p><strong>minlength</strong>：允许用户输入的最小字符长度(Unicode) 。</p><p><strong>name</strong>：元素的名称。</p><p><strong>placeholder</strong>：向用户提示可以在控件中输入的内容。 在渲染提示时，占位符文本中的回车符(\r)或换行符(\n)一定会被作为行断（换行）处理。占位符只能用于显示应该输入到表单中的数据类型的示例; 它们不能替代与输入相关联的适当的 &lt; label &gt; 元素。</p><p><strong>readonly</strong>：不允许用户修改元素内文本。和 disabled 属性不同的是，这个能让用户点击和选择元素内的文本。如果在表单里，这个元素的值还是会跟随表单一起提交。</p><p><strong>required</strong>：提示用户这个元素的内容必填。</p><p><strong>rows</strong>：元素的输入文本的行数（显示的高度）。</p><p><strong>spellcheck</strong>：该属性设为 true 时，表明该元素会做拼写和语法检查。属性值为 default 时，表明元素有默认行为，可能会基于父元素的spellcheck值。属性值为 false 时，表明元素不做拼写和语法检查。</p><p><strong>wrap</strong>：指定文本换行的方式。默认为 soft 。可能的值为：</p><ul><li><p>hard: 在文本到达元素最大宽度的时候，浏览器自动插入换行符(CR+LF) 。比如指定 cols值。</p></li><li><p>soft: 在到达元素最大宽度的时候，不会自动插入换行符。</p></li></ul><h3 id="output">&lt;output&gt;</h3><p>HTML &lt;output&gt; 标签表示计算或用户操作的结果。</p><p>属性说明：</p><p><strong>for</strong>：其它影响计算结果的标签的ID，可以多个。</p><p><strong>form</strong>：与当前标签有关联的form（从属的表单）。该属性的值必须是当前文档内的表单元素的ID。如果未指明该属性，output标签必须是一个form的后代标签。该属性的用处在于可以让output标签脱离form标签，存在于一个网页文档的任意位置。</p><p><strong>name</strong>：name属性。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;result.value=parseInt(a.value)+parseInt(b.value)&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span> /&gt;</span> +<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span> =<br>  <span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="progress">&lt;progress&gt;</h3><p>HTML中的&lt;progress&gt;元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式。</p><p>属性说明：</p><p><strong>max</strong>：该属性描述了这个progress元素所表示的任务一共需要完成多少工作。</p><p><strong>value</strong>：该属性用来指定该进度条已完成的工作量。如果没有value属性,则该进度条的进度为&quot;不确定&quot;，也就是说,进度条不会显示任何进度，你无法估计当前的工作会在何时完成(比如在下载一个未知大小的文件时，下载对话框中的进度条就是这样的)。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>70 %<span class="hljs-tag">&lt;/<span class="hljs-name">progress</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="meter">&lt;meter&gt;</h3><p>HTML &lt;meter&gt;元素用来显示已知范围的标量值或者分数值。</p><p>属性说明：</p><p><strong>value</strong>：当前的数值。如果设置了最小值和最大值（分别由min属性和max属性定义），它必须介于最小值和最大值之间。如果没有指定或者格式有误，值即为0.如果给定的值不在最小值和最大值之间，它的值就等于它最接近的一端的值。除非值域在0到1（闭区间）, 否则最小值和最大值属性需要定义，以保证value属性在值域范围内。换言之，默认的min和max值分别为0和1。</p><p><strong>min</strong>：值域的最小边界值。如果设置了，它必须比最大值要小。如果没设置，默认为0。</p><p><strong>max</strong>：值域的上限边界值。如果设置了，它必须比最小值要大。如果没设置，默认为1。</p><p><strong>low</strong>：定义了低值区间的上限值（译者注：如果value介于min和low之间，该元素就会表现出低值的视觉效果，value落在[min,low]、[high,max]等不同的区间会使浏览器渲染该元素时出不同的视觉效果）。如果设置了，它必须比最小值属性大，并且不能超过high值和最大值。未设置或者比最小值还要小时，其值即为最小值。</p><p><strong>high</strong>：定义了高值区间的下限值。如果设置了，它必须小于最大值，同时必须大于low值和最小值。如果没有设置，或者比最大值还大，其值即为最大值。</p><p><strong>optimum</strong>：这个属性用来指示最优/最佳取值。它必须在正确的值域内（由最小值属性和最大值属性定义）。当使用了low和high属性时，它指明哪一个取值范围是更好的。例如，假设它介于最小值和low之间，那么lower区间就被认为是更佳的取值范围。</p><p><strong>form</strong>：该属性将本元素与对应的form元素关联。例如，一个计量器可能用来显示某个数值输入框（input元素，number类型）的范围。只有当计量器元素被用作表单关联的元素时，该属性才应当被使用；即便如此，如果它作为表单的后代元素出现，它仍然有可能被省略。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Heat the oven to <span class="hljs-tag">&lt;<span class="hljs-name">meter</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;500&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;350&quot;</span>&gt;</span>350 degrees<span class="hljs-tag">&lt;/<span class="hljs-name">meter</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="交互元素">交互元素</h2><h3 id="details">&lt;details&gt;</h3><p>HTML&lt;details&gt;元素可创建一个挂件 仅在被切换成展开状态时，它才会显示内含的信息。&lt;summary&gt; 元素可为该部件提供概要或者标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>Details<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>  Something small enough to escape casual notice.<br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><p>公开小部件通常在屏幕上显示，使用一个小三角形旋转（或扭曲）以指示打开/关闭状态，三角形旁边有一个标签。如果 &lt;details&gt; 元素的第一个子元素是 &lt;summary&gt; ，则 &lt;summary&gt; 元素的内容被用作公开小部件的标签。</p><p>属性说明：</p><p><strong>open</strong>：此布尔值属性指示详细信息（即&lt;details&gt;元素的内容）当前是否可见。默认值为false，表示细节不可见。</p><p>事件：</p><p>除了HTML元素支持的常见事件之外， &lt;details&gt; 元素还支持 toggle 事件，每当 &lt;details&gt; 元素的状态在 open 和 closed 间发生变化时，toggle 事件就会被调度到该元素。它是在状态更改后发送的，但是如果在浏览器可以发送事件之前状态更改了多次，则会合并事件以便只发送一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">details.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;toggle&quot;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (details.<span class="hljs-property">open</span>) &#123;<br>    <span class="hljs-comment">/* the element was toggled open */</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/* the element was toggled closed */</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="summary">&lt;summary&gt;</h3><p>HTML &lt;summary&gt; 元素 用作 一个&lt;details&gt;元素的一个内容的摘要，标题或图例。</p><h3 id="menu-menuitem">&lt;menu&gt; &amp; &lt;menuitem&gt;</h3><p>许多浏览器不支持。若想了解请移步：</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu">menu</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem">menuitem</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
      <tag>无障碍阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 主题</title>
    <link href="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>Hexo 主题</h1><blockquote><p>本文编写时间为 ，可能存在过期内容，仅供参考。最新数据请访问 <a href="https://hexo.io/zh-cn/docs/themes">官方文档</a>。</p></blockquote><span id="more"></span><h2 id="更换主题">更换主题</h2><p><strong>查找主题：</strong></p><ol><li><a href="https://hexo.io/themes/">官网</a></li><li>在 <a href="https://github.com/search?q=hexo-theme&amp;type=repositories">Github</a> 上搜索 <code>hexo-theme</code></li><li>在 <a href="https://search.gitee.com/?skin=rec&amp;type=repository&amp;q=hexo-theme">Gitee</a> 上搜索 <code>hexo-theme</code></li></ol><p><strong>推荐主题：</strong> <a href="https://github.com/fluid-dev/hexo-theme-fluid"><strong>fluid</strong></a> ，预览主题： <a href="https://hexo.fluid-dev.com/">Fluid’s blog</a>。介绍就不介绍了。</p><p>以 fluid 为例，更换主题。</p><h3 id="下载主题">下载主题</h3><p><strong>方式一：</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>这种方式下载的主题会放到 <code>node_modules/hexo-theme-fluid</code> ，且在 <code>package.json</code> 中确定版本 <code> &quot;hexo-theme-fluid&quot;: &quot;^1.9.5-a&quot;</code> ，如果你要修改主题的配置信息，则不建议直接在 <code>node_modules/hexo-theme-fluid/_config.yml</code> 中修改，需要在项目的根目录下创建 <code>_config.fluid.yml</code>，将 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">主题的配置文件</a> 复制过去，然后进行修改。</p><p><strong>方式二：</strong></p><p>在<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">Releases</a>页面下载主题压缩包，或者直接下载源码，解压然后改名为 <code>fluid</code> 放到项目的 <code>theme</code> 目录中。</p><p>这种方式可以直接在主题的配置文件中修改，但是还是建议将配置文件复制到根目录下，然后重命名为 <code>_config.fluid.yml</code>。</p><blockquote><p>配置文件项的加载优先级 <code>_config.fluid.yml</code> &gt; <code>theme/fluid/_config.yml</code> &gt; <code>_config.yml</code> ，越是默认项，优先级就越低。</p><p>主题的配置文件格式是 <code>_config.&lt;主题名&gt;.yml</code>。</p></blockquote><h3 id="切换主题">切换主题</h3><p>在根目录的 <code>_config.yml</code> 中修改配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>修改 <code>scaffolds/page.md</code>：</p><p>主要是添加一个 <code>type</code> 属性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br><span class="hljs-section">type: &#123;&#123; title &#125;&#125;</span><br><span class="hljs-section">---</span><br><br></code></pre></td></tr></table></figure><p>创建其他页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page categories <span class="hljs-comment"># 分类</span><br>hexo new page tags <span class="hljs-comment"># 标签</span><br>hexo new page about <span class="hljs-comment"># 关于</span><br></code></pre></td></tr></table></figure><p>分类和标签页不用动，主题会自动收集统计文章的文档属性(Front-matter)，然后展示；关于页面请自行编写。</p><p>然后执行以下命令，查看主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 清楚缓存</span><br>hexo g <span class="hljs-comment"># 生成静态文件</span><br>hexo s <span class="hljs-comment"># 启动本地服务</span><br></code></pre></td></tr></table></figure><h2 id="主题推荐">主题推荐</h2><h3 id="Fluid">Fluid</h3><blockquote><p>页面干净简单，UI 还好看，不是全部文字的排版，也不是全部在秀特效的那种，非常中庸的一个主题。</p></blockquote><p><a href="https://hexo.fluid-dev.com/"><strong>页面展示</strong></a>：</p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153301387.png" alt="fluid 主页大屏"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153333482.png" alt="fluid 主页文章"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153402826.png" alt="fluid 归档页面"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153427608.png" alt="fluid 分类页面"></p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119153458942.png" alt="fluid 标签页面"></p><h4 id="使用主题">使用主题</h4><p><a href="#%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98">往上看</a></p><h4 id="主题纯净化">主题纯净化</h4><ol><li>去除控制台输出：例如使用VScode打开主题文件夹，检索主题文件夹下的 <code>hexo.log.info</code> 和 <code>console.log</code>。</li><li>页脚第一行文字的 HTML：注释或修改<code>_config.fluid.yml</code> 中的 <code>footer.content</code>。</li><li>友链：<code>_config.fluid.yml</code> 中的 <code>link</code>。</li><li>网站图标：<code>_config.fluid.yml</code> 中的 <code>favicon</code> 和 <code>apple_touch_icon</code>。</li></ol><p>可以在 <code>source</code> 下创建 <code>assets</code> 文件夹，将所有的跟网站相关的资源文件放到这里，在 hexo 编译时，会把这个文件夹放到输出文件夹的根目录下，例如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── source<br>  └── assets<br>    └── <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>      ├── <span class="hljs-keyword">banner.jpg</span><br><span class="hljs-keyword"></span>      └── logo.ico<br></code></pre></td></tr></table></figure><p>你就可以在主题配置文件中配置：<code>favicon: /assets/blog/logo.ico</code>。</p><p>执行 <code>hexo g</code> 之后，目录结构如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── public<br>  └── assets<br>    └── <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>      ├── <span class="hljs-keyword">banner.jpg</span><br><span class="hljs-keyword"></span>      └── logo.ico<br></code></pre></td></tr></table></figure><h4 id="主题配置">主题配置</h4><p>配置文件中都有注释，这里不详细解释，我只说一下我的修改了的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#42b983&quot;</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 遵循访客浏览器&quot;请勿追踪&quot;的设置，如果开启则不统计其访问</span><br>  <span class="hljs-attr">follow_dnt:</span> <span class="hljs-literal">false</span><br>  <br><span class="hljs-comment"># 导航栏的相关配置\</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示\</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;SpecialCarp&quot;</span><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">7</span><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-attr">menu:</span><br>  <span class="hljs-comment"># ...</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/links/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner1.jpg</span><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.7</span><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;目标推动技术发展&quot;</span><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner1.jpg</span><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/assets/image/index1.jpg</span><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY-NC&#x27;</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">SpecialCarp/SpecialCarp.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner2.jpg</span><br><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner3.jpg</span><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/assets/image/banner4.jpg</span><br><br><span class="hljs-attr">links:</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><h4 id="添加评论插件">添加评论插件</h4><blockquote><p>Utterances 是一个用于在静态网站上添加基于 GitHub Issue 的评论系统的工具。它的特点是与 GitHub Issues 紧密集成，使用 GitHub 的 Issue 作为评论存储和管理的后端。</p></blockquote><ol><li><p>在你的博客仓库安装 <a href="https://github.com/apps/utterances">utterances</a>。<br><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119164655588.png" alt="utterances 应用安装"><br><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119165223184.png" alt="选择安装的仓库"><br>输入确认密码，或使用移动端github验证。</p></li><li><p>修改 <code>_config.fluid.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br>    <span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">SpecialCarp/SpecialCarp.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br></code></pre></td></tr></table></figure><p>配置文件中有两个 <code>comments</code> 的配置项，一个文章页，一个友链页，注意看好。</p></li></ol><p>这是效果：</p><p><img src="/2023/11/19/hexo-%E4%B8%BB%E9%A2%98/assets/image-20231119170404974.png" alt="utterances 评论插件效果"></p><p>没有登录github不允许评论。</p><h2 id="创建主题">创建主题</h2><blockquote><p>可能这辈子都不会去学这个了，闲的蛋疼再说。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>主题</category>
      
      <category>插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>主题</tag>
      
      <tag>fluid</tag>
      
      <tag>插件</tag>
      
      <tag>utterances</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 部署 GitHub Pages</title>
    <link href="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/"/>
    <url>/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/</url>
    
    <content type="html"><![CDATA[<h1>Hexo 部署 GitHub Pages</h1><blockquote><p>本文编写时间为 2023-11-15，可能存在过期内容，仅供参考。最新数据请访问 <a href="https://hexo.io/zh-cn/docs/github-pages">官方文档</a>。</p></blockquote><p><strong>注意</strong>：下面的所有 <code>speicalcarp</code> 都需要替换成你的 GitHub 用户名。</p><span id="more"></span><h2 id="GitHub-Pages">GitHub Pages</h2><blockquote><p><a href="https://docs.github.com/en/pages">GitHub Pages</a> 是 GitHub 提供的免费托管服务，允许用户在其平台上创建和发布静态网站。你可以使用 GitHub Pages 托管个人博客、项目文档、简历等静态网页内容。</p></blockquote><p><strong>创建 GitHub 仓库</strong></p><p>在 GitHub 上创建一个<a href="https://github.com/new">新的仓库</a>，仓库的名称应该是 <code>username.github.io</code>，其中 <code>username</code> 是你的 GitHub 用户名。</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231115143503669.png" alt="GitHub Pages 仓库创建"></p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119121649750.png" alt="SpecialCarp.github.io 仓库"></p><p>其中，主分支是 <code>main</code>，项目地址是 <code>https://github.com/SpecialCarp/SpecialCarp.github.io.git</code> 。</p><h2 id="部署插件-hexo-deployer-git">部署插件 hexo-deployer-git</h2><p>下载 git 部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改项目根目录下的 <code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/SpecialCarp/SpecialCarp.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h2 id="部署到远端仓库">部署到远端仓库</h2><p><strong>清理缓存</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p><strong>生成静态文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p><strong>部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dexo d<br></code></pre></td></tr></table></figure><p>如果是初次部署，会出现需要登录的提示：</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119122803276.png" alt="git发送github登录界面"> <img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119122849907.png" alt="界面中文翻译"></p><p>命令行输出 <code>INFO  Deploy done: git</code> 即为部署成功，github 仓库如下：</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119123224737.png" alt="image-20231119123224737"></p><p>访问 <code>https://specialcarp.github.io/</code> ，即可进入博客。</p><p><img src="/2023/11/15/hexo-%E9%83%A8%E7%BD%B2-github-pages/assets/image-20231119123551370.png" alt="博客界面"></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>部署</category>
      
      <category>插件</category>
      
      <category>代码管理</category>
      
      <category>git</category>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>github-pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo指令</title>
    <link href="/2023/11/15/hexo%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/15/hexo%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1>Hexo指令</h1><blockquote><p>本文编写时间为 2023-11-15，可能存在过期内容，仅供参考。最新数据请访问 [官方文档][<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a>]。</p></blockquote><span id="more"></span><h2 id="初始化项目（init）">初始化项目（init）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><h2 id="新建文章（new）">新建文章（new）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code>（布局）的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><p>Hexo 提供了三种常见的布局：</p><ol><li><strong>post：</strong> 用于普通的博客文章。</li><li><strong>page：</strong> 用于创建页面，例如关于页面、联系页面等。</li><li><strong>draft：</strong> 用于创建草稿，这些文章默认不会被生成到站点中，直到你将其发布。</li></ol><p>除了这些默认的布局，你还可以根据自己的需要创建自定义的布局。在 Hexo 中，布局是存储在 <code>source/_layouts</code> 目录下的文件。例如，如果你创建了一个自定义布局叫做 <code>mylayout</code>，你就可以使用以下命令创建一个使用该布局的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new mylayout <span class="hljs-string">&quot;Custom Layout Article&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--path</code></td><td style="text-align:left">自定义新文章的路径</td></tr><tr><td style="text-align:left"><code>-r</code>, <code>--replace</code></td><td style="text-align:left">如果存在同名文章，将其替换</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--slug</code></td><td style="text-align:left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page --path about/me<br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="生成静态文件（generate）">生成静态文件（generate）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>在根目录下的 <code>public</code> 文件夹中生成静态文件。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-d</code>, <code>--deploy</code></td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left"><code>-w</code>, <code>--watch</code></td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left"><code>-b</code>, <code>--bail</code></td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left"><code>-f</code>, <code>--force</code></td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left"><code>-c</code>, <code>--concurrency</code></td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h2 id="发表草稿（publish）">发表草稿（publish）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>将草稿（draft）发布为正式的文章。草稿是一种特殊的文章状态，它们默认不会被生成到最终的网站文件中，直到你明确地发布它们。这个命令可以将指定的草稿发布，并更新其状态为已发布。</p><ul><li><code>layout</code>：可选参数，表示文章的布局，可以是 <code>post</code>、<code>page</code> 或者其他自定义布局。如果不指定，默认是 <code>post</code>。</li><li><code>filename</code>：要发布的草稿文件的文件名（不包括扩展名），它通常位于 <code>source/_drafts</code> 目录中。</li></ul><p>请注意，<code>hexo publish</code> 命令并不是必需的，你也可以手动将草稿移动到 <code>source/_posts</code> 目录并更新其 Front Matter 来达到相同的效果。这个命令只是为了方便和自动化这个过程。</p><h2 id="启动服务器（server）">启动服务器（server）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>启动本地服务器以预览生成的静态网站的命令。执行这个命令后，Hexo 将启动一个本地服务器，你可以通过浏览器访问这个服务器地址来查看你的博客。</p><p>默认情况下，Hexo 会在 <code>localhost:4000</code> 上启动服务器。你可以通过浏览器访问 <code>http://localhost:4000</code> 来查看你的博客。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--port</code></td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--static</code></td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left"><code>-l</code>, <code>--log</code></td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>如果你希望在文件发生变化时自动刷新页面，可以使用 <code>--watch</code> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server --watch<br></code></pre></td></tr></table></figure><p>这会在文件变化时重新生成网站，并刷新浏览器页面。</p><h2 id="部署网站（deploy）">部署网站（deploy）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>将生成的静态网站部署到远程服务器的命令。部署的具体方式取决于你在 Hexo 的配置文件 <code>_config.yml</code> 中设置的部署配置。</p><p>在执行这个命令之前，你需要确保你已经通过 <code>hexo generate</code> 生成了静态文件。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-g</code>, <code>--generate</code></td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>在 Hexo 的配置文件（通常是 <code>_config.yml</code>）中，你需要配置你的部署信息。以下是一个示例配置，使用 Git 部署到 GitHub Pages：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository-url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><ul><li><code>type</code>: 部署类型，可以是 <code>git</code>、<code>heroku</code>、<code>rsync</code> 等，具体取决于你的部署方式。</li><li><code>repo</code>: 远程仓库的 URL。</li><li><code>branch</code>: 分支，默认是 <code>master</code>。</li></ul><p>如果你使用 GitHub Pages，通常配置中的 <code>repo</code> 部分会类似于 <code>https://github.com/username/username.github.io.git</code>。</p><p>在配置好部署信息后，执行 <code>hexo deploy</code> 就会根据配置将生成的静态文件推送到远程服务器上。</p><p>请注意，不同的部署方式可能需要不同的配置。如果你使用的是其他部署方式，例如 FTP、SFTP、OSS 等，你需要根据相应的配置进行设置。</p><h2 id="渲染文件（render）">渲染文件（render）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染指定的文件。这个命令通常用于查看特定文件的渲染效果，而不必生成整个博客。</p><p>其中 <code>&lt;file1&gt;</code>, <code>[file2]</code>, … 是你要渲染的文件路径。这可以是 Markdown 文件、HTML 文件等。执行这个命令后，Hexo 会使用配置中指定的渲染引擎对这些文件进行渲染，并输出到终端中。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-o</code>, <code>--output</code></td><td style="text-align:left">设置输出路径</td></tr></tbody></table><p>请注意，这个命令在实际使用中可能会因为 Hexo 版本的不同而有所变化。如果你使用的是较新的版本，可以通过 <code>hexo help render</code> 命令来查看详细的帮助信息。帮助信息会列出可用的选项和参数。</p><p>一般情况下，对于调试和查看渲染效果，你可能更倾向于使用 <code>hexo server</code> 命令来启动本地服务器，以便于在浏览器中查看博客的实际渲染效果。</p><h2 id="迁移（migrate）">迁移（migrate）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo migrate &lt;<span class="hljs-built_in">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="清除缓存（clean）">清除缓存（clean）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>清除生成的缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)，以便重新生成静态网站时始终从干净的状态开始。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="列出网站数据（list）">列出网站数据（list）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo list &lt;<span class="hljs-built_in">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出指定类型的资源。 <code>&lt;type&gt;</code> 参数表示你要列出的资源的类型。根据 Hexo 版本和插件的不同，可用的 <code>&lt;type&gt;</code> 类型可能会有所不同。</p><p>在 Hexo 的文档或帮助信息中，一般会提供对 <code>hexo list</code> 命令支持的资源类型的描述。</p><ul><li><strong>post：</strong> 列出所有博客文章。</li><li><strong>page：</strong> 列出所有页面。</li><li><strong>route：</strong> 列出所有路由。</li><li><strong>tag：</strong> 列出所有标签。</li><li><strong>category：</strong> 列出所有分类。</li></ul><p>你可以使用 <code>hexo help list</code> 命令来查看详细的帮助信息，以获取特定 Hexo 版本支持的资源类型列表。</p><h2 id="显示-Hexo-版本（version）">显示 Hexo 版本（version）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo version<br><span class="hljs-comment"># OR 简写为</span><br>hexo -v<br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="列出网站的配置（config）">列出网站的配置（config）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo config [key] [value]<br></code></pre></td></tr></table></figure><p>列出网站的配置（<code>_config.yml</code>）。如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</p><p>请注意，通过这种方式设置的配置项值只在当前会话中有效，重启 Hexo 后将失效。如果你想永久修改配置，应该直接编辑 Hexo 项目根目录下的 <code>_config.yml</code> 文件。</p><h2 id="选项">选项</h2><h3 id="安全模式">安全模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --safe<br></code></pre></td></tr></table></figure><p>在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式">调试模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --debug<br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式">简洁模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --silent<br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径">自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 custom.yml 代替默认的 _config.yml</span><br>hexo server --config custom.yml<br><br><span class="hljs-comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br>hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 custom.yml 代替默认的 _config.yml</span><br>hexo server --config custom.yml<br><br><span class="hljs-comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br>hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿">显示草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --draft<br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD">自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo --cwd /path/to/cwd<br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>指令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建静态博客</title>
    <link href="/2023/11/14/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/14/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1>Hexo搭建静态博客</h1><blockquote><p>本文编写时间为 2023-11-14，hexo: 6.3.0，hexo-cli: 4.3.1，可能存在过期内容，仅供参考。最新数据请访问 [官方文档][<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>]。</p></blockquote><span id="more"></span><h2 id="环境要求">环境要求</h2><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h2 id="安装-Hexo">安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="新建项目">新建项目</h2><p>安装 Hexo-cli 完成后，请执行下列命令，Hexo 将会在指定文件夹中创建所需要的文件。<code>&lt;folder&gt;</code> 就是你项目的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，项目文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs te">.<br>├── _config.yml     -- 配置文件<br>├── package.json    -- 依赖信息<br>├── scaffolds       -- 模板<br>├── source          -- 源文件<br>|   ├── _drafts       -- 文章<br>|   └── _posts        -- 草稿<br>└── themes-- 主题<br></code></pre></td></tr></table></figure><p>本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在项目根目录下执行以下命令</span><br><span class="hljs-comment"># 启动本地服务</span><br>hexo server<br></code></pre></td></tr></table></figure><p>此时，访问 <code>http://localhost:4000/</code> 即可，当前项目只有一篇自带的 hello-world 文章，其文件在项目的<code>source\_posts</code> 目录下，在命令行工具中 <code>Ctrl + C</code> 即可停止项目。</p><p>如果启动失败请删除 <code>node_moudle</code> 目录，然后在项目根目录下执行 <code>npm install</code> 命令重新下载依赖。</p><h3 id="hexo-简单命令">hexo 简单命令</h3><p><strong>新建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><p><strong>新建文章</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new &lt;title&gt;<br></code></pre></td></tr></table></figure><p>Hexo 会根据 <code>scaffolds</code> 目录下的模板 <code>post.md</code> ，在 <code>source\_posts</code> 目录下生成一个 <code>&lt;title&gt;.md</code> 文件。</p><p><strong>生成静态文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br><span class="hljs-comment"># OR 简写为</span><br>hexo g<br></code></pre></td></tr></table></figure><p>Hexo 会根据 <code>_config.yml</code> 的配置，在根目录 <code>public</code> 下生成静态网站文件，通过部署 nginx、github pages、gitee pages 或其他服务器上，即可通过网络访问。</p><p><strong>启动本地服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br><span class="hljs-comment"># OR 简写为</span><br>hexo s<br></code></pre></td></tr></table></figure><p>Hexo 会在本地的 <code>4000</code> 端口开启一个服务，用于调试和本地查看。</p><p><strong>清除已生成的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="引用外部资源文件">引用外部资源文件</h2><blockquote><p>标准的 markdown 语法 <code>![]()</code> 在 hexo 编译静态文件时，会导致文件路径不对，<a href="https://hexo.io/zh-cn/docs/asset-folders">hexo 官方</a>提供了模板语法 <code>&#123;% asset_path slug [title] %&#125;</code> ，这样会导致正常的笔记和项目中的文件出现两种引用，既然是基于 markdown 的博客项目，那么一切都要以正常的 markdown 语法为主。</p><p>官方提供了一个新的选择：<code>hexo-renderer-marked</code> ，但是不好用，它需要你将所有的资源文件放到一个资源文件夹下。</p></blockquote><p>修改根目录下的 <code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><code>post_asset_folder: true</code>: 这个配置项是 Hexo 中用于开启或关闭文章资产文件夹功能。当设置为 <code>true</code> 时，Hexo 会在每篇文章对应的文件夹中创建一个与文章同名的资源文件夹，用于存放与该篇文章相关的资源文件（如图片、附件等）。</li><li><code>marked</code>: 这个配置项是与 Markdown 渲染相关的配置。<ul><li><code>prependRoot: true</code>: 当设置为 <code>true</code> 时，它会将相对路径的图片链接转换为以站点根目录开头的绝对路径。这样设置后，在生成的页面中，图片的链接将从站点根目录开始。</li><li><code>postAsset: true</code>: 当设置为 <code>true</code> 时，允许在文章中使用相对路径引用位于文章资产文件夹中的资源文件。也就是说，当您在文章中引用图片等资源时，可以使用相对路径，资源文件将会被正确引用和显示。</li></ul></li></ul><h3 id="hexo-asset-image">hexo-asset-image</h3><blockquote><p>这个插件在开启 <code>post_asset_folder: true</code> 的情况下，默认你的资源文件夹是文章同目录下的同名文件夹，在执行 <code>hexo g</code> 之后，hexo 会把资源文件夹下的文件全部复制到生成后的文章目录下。</p>  <figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">└── <span class="hljs-keyword">source</span><br>  └── _posts<br>    ├── hexo<br>    │ └── <span class="hljs-keyword">filename</span>.jpg<br>    └── hexo.md<br></code></pre></td></tr></table></figure>  <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">└── <span class="hljs-keyword">public</span><br>  └── <span class="hljs-number">2023</span><br>    └── <span class="hljs-number">9</span><br>      └── <span class="hljs-number">5</span><br>        └── hexo<br>          ├── filename.jpg<br>          └── <span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><p>这个插件会修改你生成后的文章（ <code>index.html</code>）中的 <code>&lt;img&gt;</code>的 src 属性。</p></blockquote><p><code>hexo-asset-image</code> 则会根据你在笔记中的引入路径去编译相应的资源文件路径。</p><p>下载插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-asset-image<br></code></pre></td></tr></table></figure><p>修改 <code>node_modules/hexo-asset-image/index.js</code> 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">post_asset_folder</span>) &#123;<br>    <span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br>    <span class="hljs-keyword">if</span> (version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>      <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br>      <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>)) &#123;<br>          <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>          <span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>            !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>            <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>            <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>            <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">if</span> (srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>              srcArray.<span class="hljs-title function_">shift</span>();<br>            src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span> + config.<span class="hljs-property">root</span> + link + src);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.<span class="hljs-title function_">html</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这个插件只是在 hexo 规则的基础上，对图片的引用做出相应的配合，但是我的编写习惯是：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tcl">└── <span class="hljs-keyword">source</span><br>  └── _posts<br>    └── hexo<br>      ├── assets<br>      │ └── <span class="hljs-keyword">filename</span>.jpg<br>      └── hexo.md<br></code></pre></td></tr></table></figure><p>我使用的是 Typora 作为笔记的编写工具，不想它作为博客的时候，需要改变，我希望它可以编译成下面得到这种情况：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">└── <span class="hljs-keyword">public</span><br>  └── <span class="hljs-number">2023</span><br>    └── <span class="hljs-number">9</span><br>      └── <span class="hljs-number">5</span><br>        └── hexo<br>          ├── assets<br>          │ └── filename.jpg<br>          └── <span class="hljs-keyword">index</span>.html<br></code></pre></td></tr></table></figure><h3 id="hexo-asset-file-carp">hexo-asset-file-carp</h3><blockquote><p>为了让 hexo 适应我的编写习惯，所以我在 <code>hexo-asset-image</code> 的插件基础上做出了调整，我将文章和资源文件夹看作一个整体，然后，资源文件夹默认在文章所在的文件夹下，只要文章到哪我把资源文件夹一起复制过去就可以了。</p></blockquote><p>下载插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-asset-file-carp<br></code></pre></td></tr></table></figure><p>修改 <code>_config.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yam">asset_dir: ./assets # 文章的资源文件夹，对于文章的相对路径<br></code></pre></td></tr></table></figure><p><code>asset_dir</code> 是我自定义的配置项，默认为 <code>assets</code> 文件夹，你可以像 Typora 中的配置一样写：<code>./$&#123;filename&#125;.assets</code> ，插件会自动解析替换的。</p><p>需要注意的是，这个插件的前提是你的资源文件夹处于文章的同目录下，如果是上一级目录，出问题，自负，或者你也可以自己写一个适合你习惯的插件。</p><p>一定要软件适应你，如果你去适应软件，最后所有的记录就都不是统一的规范。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
      <category>top.specialcarp</category>
      
      <category>blog</category>
      
      <category>hexo</category>
      
      <category>nodejs</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/10/hello-world/"/>
    <url>/2023/11/10/hello-world/</url>
    
    <content type="html"><![CDATA[<h1>Hello World</h1><p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！这是你的第一篇文章。查看<a href="https://hexo.io/docs/">文档</a>了解更多信息。如果你在使用 Hexo 时遇到任何问题，你可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a>中找到答案，或者你可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上问我。</p><h2 id="快速启动">快速启动</h2><h3 id="创建一篇新的文章或一条帖子">创建一篇新的文章或一条帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="运行服务器">运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更多信息:<a href="https://hexo.io/docs/generating.html">生成</a></p><h3 id="部署到远程站点">部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p><hr><hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>博客</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>hello-world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
